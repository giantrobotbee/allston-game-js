(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error("Cannot find module '"+o+"'")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
var Event=require("./core/Event.js"),InputEvent=Event.extend({constructor:function(t){this.constructor.__super__.constructor(t)}});InputEvent.UP_PRESSED="upPressInputEvent",InputEvent.DOWN_PRESSED="downPressInputEvent",InputEvent.LEFT_PRESSED="leftPressInputEvent",InputEvent.RIGHT_PRESSED="rightPressInputEvent",InputEvent.ACTION_PRESSED="actionPressInputEvent",InputEvent.UP_RELEASED="upReleaseInputEvent",InputEvent.DOWN_RELEASED="downReleaseInputEvent",InputEvent.LEFT_RELEASED="leftReleaseInputEvent",InputEvent.RIGHT_RELEASED="rightReleaseInputEvent",InputEvent.ACTION_RELEASED="actionReleaseInputEvent",module.exports=InputEvent;
},{"./core/Event.js":3}],2:[function(require,module,exports){
var PIXI=require("pixi"),Scene=require("./scene.js"),InputEvent=require("./InputEvent.js"),SceneOne=Scene.extend({events:{upPressInputEvent:"onUp",upReleaseInputEvent:"offUp",rightPressInputEvent:"onRight",rightReleaseInputEvent:"offRight",downPressInputEvent:"onDown",downReleaseInputEvent:"offDown",leftPressInputEvent:"onLeft",leftReleaseInputEvent:"offLeft"},initialize:function(){var i=PIXI.Texture.fromImage("/assets/img/player.png"),t=new PIXI.Sprite(i);this.movingUp=!1,this.movingRight=!1,this.movingLeft=!1,this.movingDown=!1,this.player=t,this.world.stage.addChild(this.player)},onUp:function(){this.movingUp=!0},offUp:function(){this.movingUp=!1},onRight:function(){this.movingRight=!0},offRight:function(){this.movingRight=!1},onLeft:function(){this.movingLeft=!0},offLeft:function(){this.movingLeft=!1},onDown:function(){this.movingDown=!0},offDown:function(){this.movingDown=!1},update:function(){this.movingRight&&(this.player.position.x=this.player.position.x+6),this.movingLeft&&(this.player.position.x=this.player.position.x-6),this.movingUp&&(this.player.position.y=this.player.position.y-6),this.movingDown&&(this.player.position.y=this.player.position.y+6),this.player.position.x<0&&(this.player.position.x=0),this.player.position.x+this.player.width>this.world.renderer.width&&(this.player.position.x=this.world.renderer.width-this.player.width),this.player.position.y<0&&(this.player.position.y=0),this.player.position.y+this.player.height>this.world.renderer.height&&(this.player.position.y=this.world.renderer.height-this.player.height)}});module.exports=SceneOne;
},{"./InputEvent.js":1,"./scene.js":14,"pixi":17}],3:[function(require,module,exports){
var Base=require("./baseObject.js"),Event=Base.extend({constructor:function(e){this.type=e}});module.exports=Event;
},{"./baseObject.js":5}],4:[function(require,module,exports){
var Concur=require("Concur");module.exports=Concur.extend({constructor:function(){},pollInput:function(){}});
},{"Concur":18}],5:[function(require,module,exports){
var Concur=require("Concur");module.exports=Concur.extend({constructor:function(){}});
},{"Concur":18}],6:[function(require,module,exports){
var Base=require("./baseObject.js"),ee=require("ee");module.exports=Base.extend(ee.prototype);
},{"./baseObject.js":5,"ee":16}],7:[function(require,module,exports){
var InputDevice=require("./InputDevice"),_=require("lodash"),GamepadDevice=InputDevice.extend({constructor:function(){this.gamepads={},this.buttonMap={},this.axisMap={},window.addEventListener("gamepadconnected",this.gamepadConnected),window.addEventListener("gamepaddisconnected",this.gamepadDisconnected),navigator.webkitGetGamepads&&setInterval(this.scanGamepads.bind(this),500)},pollInput:function(){var e,a;navigator.webkitGetGamepads&&this.scanGamepads(),_.each(this.gamepads,function(t){e=this.captureButtons(t.buttons),a=this.captureJoy(t.axes)},this)},scanGamepads:function(){for(var e=navigator.webkitGetGamepads(),a=0;a<e.length;a++)e[a]&&(_.has(e[a].index,this.gamepads)?this.gamepads[e[a].index]=e[a]:this.addGamepad(e[a]))},gamepadConnected:function(e){this.addGamepad(e.gamepad)},gamepadDisconnected:function(e){delete this.gamepads[e.gamepad.index]},addGamepad:function(e){this.gamepads[e.index]=e},captureButtons:function(e){var a=[];return _.each(e,function(e,t){e>0&&a.push(GamepadDevice.BUTTONS[t])}),a},captureJoy:function(){}});GamepadDevice.BUTTONS=["A","B","X","Y","LB","RB","LT","RT","BACK","START","LEFT_STICK","RIGHT_STICK","DPAD_UP","DPAD_DOWN","DPAD_LEFT","DPAD_RIGHT","HOME"],GamepadDevice.AXES=["LEFT_STICK_X","LEFT_STICK_Y","RIGHT_STICK_X","RIGHT_STICK_Y"],module.exports=GamepadDevice;
},{"./InputDevice":4,"lodash":21}],8:[function(require,module,exports){
var Evented=require("./evented.js"),_=require("lodash");module.exports=Evented.extend({constructor:function(){this.devices=[],this.inputStates=[]},addInputDevice:function(t){this.devices.push(t)},update:function(){_.each(this.devices,this.updateDevice,this),this.emitEvents()},updateDevice:function(t){var e;e=t.pollInput(),this.inputStates.push(e)},emitEvents:function(){var t=_.uniq(_.flatten(this.inputStates));_.each(t,function(t){this.emit(t.type,t)},this),this.inputStates=[]}});
},{"./evented.js":6,"lodash":21}],9:[function(require,module,exports){
var _=require("lodash"),InputDevice=require("./InputDevice.js"),InputEvent=require("../InputEvent.js"),KeyboardDevice=InputDevice.extend({constructor:function(){document.addEventListener("keydown",this.keyPressed.bind(this)),document.addEventListener("keyup",this.keyReleased.bind(this)),this.events=[]},pollInput:function(){var e=this.events;return this.events=[],e},keyPressed:function(e){_.each(KeyboardDevice.INPUT_MAP,function(t){var n,E=t.keyCode;e.keyCode==E&&(n=new InputEvent(t.pressedEvent),this.events.push(n))},this)},keyReleased:function(e){_.each(KeyboardDevice.INPUT_MAP,function(t){var n,E=t.keyCode;e.keyCode==E&&(n=new InputEvent(t.releasedEvent),this.events.push(n))},this)}});KeyboardDevice.INPUT_MAP={arrowUp:{keyCode:38,pressedEvent:InputEvent.UP_PRESSED,releasedEvent:InputEvent.UP_RELEASED},arrowDown:{keyCode:40,pressedEvent:InputEvent.DOWN_PRESSED,releasedEvent:InputEvent.DOWN_RELEASED},arrowLeft:{keyCode:37,pressedEvent:InputEvent.LEFT_PRESSED,releasedEvent:InputEvent.LEFT_RELEASED},arrowRight:{keyCode:39,pressedEvent:InputEvent.RIGHT_PRESSED,releasedEvent:InputEvent.RIGHT_RELEASED},spacebar:{keyCode:32,pressedEvent:InputEvent.ACTION_PRESSED,releasedEvent:InputEvent.ACTION_RELEASED}},module.exports=KeyboardDevice;
},{"../InputEvent.js":1,"./InputDevice.js":4,"lodash":21}],10:[function(require,module,exports){
function Game(e,n){this.width=e,this.height=n,this.stage=this.createStage(),this.renderer=this.fetchRenderer(),this.inputManager=this.setupInputManager(),this.sceneManager=this.setupSceneManager(),this.sceneManager.addScene("one",new SceneOne)}var PIXI=require("pixi"),Player=require("./player.js"),Level=require("./level.js"),Scene=require("./scene.js"),SceneOne=require("./SceneOne.js"),InputEvent=require("./InputEvent.js"),SceneManager=require("./sceneManager.js"),InputManager=require("./core/inputManager.js"),GamepadDevice=require("./core/gamepadDevice.js"),KeyboardDevice=require("./core/keyboardDevice.js");window.requestAnimationFrame=window.requestAnimationFrame||window.mozRequestAnimationFrame||window.webkitRequestAnimationFrame||window.msRequestAnimationFrame,window.webkitRequestAnimationFrame||window.msRequestAnimationFrame,Game.prototype.update=function(){this.inputManager.update(),this.sceneManager.update(),this.renderer.render(this.stage),requestAnimationFrame(this.update.bind(this))},Game.prototype.createStage=function(){return new PIXI.Stage(6750105)},Game.prototype.fetchRenderer=function(){return PIXI.autoDetectRenderer(this.width,this.height)},Game.prototype.run=function(){var e=document.querySelector("#gameContainer");e.appendChild(this.renderer.view),this.sceneManager.changeScene("one"),this.update()},Game.prototype.setupInputManager=function(){var e=new InputManager;return e.addInputDevice(new KeyboardDevice),e},Game.prototype.setupSceneManager=function(){var e=new SceneManager(this);return e},module.exports=Game;
},{"./InputEvent.js":1,"./SceneOne.js":2,"./core/gamepadDevice.js":7,"./core/inputManager.js":8,"./core/keyboardDevice.js":9,"./level.js":11,"./player.js":13,"./scene.js":14,"./sceneManager.js":15,"pixi":17}],11:[function(require,module,exports){
function Level(e,i){var t=PIXI.Texture.fromImage("assets/img/grass.png");this.tile=new PIXI.TilingSprite(t,e,i)}var PIXI=require("pixi");Level.prototype.update=function(){},module.exports=Level;
},{"pixi":17}],12:[function(require,module,exports){
var Game=require("./game.js"),startGame;startGame=function(){document.removeEventListener("DOMContentLoaded",startGame);var e=new Game(1024,576);e.run()},document.addEventListener("DOMContentLoaded",startGame);
},{"./game.js":10}],13:[function(require,module,exports){
function Player(){this.texture=PIXI.Texture.fromImage("assets/img/player.png"),this.sprite=new PIXI.Sprite(this.texture),this.sprite.width=100,this.sprite.height=100,this.sprite.position.x=400,this.sprite.position.y=200}var PIXI=require("pixi");module.exports=Player;
},{"pixi":17}],14:[function(require,module,exports){
var _=require("lodash"),Base=require("./core/baseObject.js"),Scene=Base.extend({events:{},constructor:function(n){this.id=n},setWorld:function(n){this.world=n,this.initialize(),this.bindEvents()},initialize:function(){},bindEvents:function(){this.unbindEvents(),_.each(this.events,function(n,i){this.world.inputManager.on(i,this[n].bind(this))},this)},unbindEvents:function(){this.world.inputManager.removeAllListeners()},update:function(){},play:function(){this.bindEvents()},pause:function(){this.unbindEvents()},stop:function(){this.unbindEvents()}});module.exports=Scene;
},{"./core/baseObject.js":5,"lodash":21}],15:[function(require,module,exports){
var _=require("lodash"),Base=require("./core/baseObject.js"),SceneManager=Base.extend({constructor:function(e){this.world=e,this.scenes={},this.currentScene=null},addScene:function(e,n){this.scenes[e]||(n.setWorld(this.world),this.scenes[e]=n)},removeScene:function(e){this.scenes[e.id]&&delete this.scenes[e.id]},changeScene:function(e){if(_.has(this.scenes,e)){if(this.currentScene){var n=this.currentScene.id||null;this.currentScene.pause(),this.scenes[n]=this.currentScene}var s=this.scenes[e];this.currentScene=s,this.currentScene.play()}},update:function(){this.currentScene.update()}});module.exports=SceneManager;
},{"./core/baseObject.js":5,"lodash":21}],16:[function(require,module,exports){
!function(){"use strict";function e(){}function t(e,t){for(var n=e.length;n--;)if(e[n].listener===t)return n;return-1}function n(e){return function(){return this[e].apply(this,arguments)}}var r=e.prototype,i=this,s=i.EventEmitter;r.getListeners=function(e){var t,n,r=this._getEvents();if(e instanceof RegExp){t={};for(n in r)r.hasOwnProperty(n)&&e.test(n)&&(t[n]=r[n])}else t=r[e]||(r[e]=[]);return t},r.flattenListeners=function(e){var t,n=[];for(t=0;t<e.length;t+=1)n.push(e[t].listener);return n},r.getListenersAsObject=function(e){var t,n=this.getListeners(e);return n instanceof Array&&(t={},t[e]=n),t||n},r.addListener=function(e,n){var r,i=this.getListenersAsObject(e),s="object"==typeof n;for(r in i)i.hasOwnProperty(r)&&-1===t(i[r],n)&&i[r].push(s?n:{listener:n,once:!1});return this},r.on=n("addListener"),r.addOnceListener=function(e,t){return this.addListener(e,{listener:t,once:!0})},r.once=n("addOnceListener"),r.defineEvent=function(e){return this.getListeners(e),this},r.defineEvents=function(e){for(var t=0;t<e.length;t+=1)this.defineEvent(e[t]);return this},r.removeListener=function(e,n){var r,i,s=this.getListenersAsObject(e);for(i in s)s.hasOwnProperty(i)&&(r=t(s[i],n),-1!==r&&s[i].splice(r,1));return this},r.off=n("removeListener"),r.addListeners=function(e,t){return this.manipulateListeners(!1,e,t)},r.removeListeners=function(e,t){return this.manipulateListeners(!0,e,t)},r.manipulateListeners=function(e,t,n){var r,i,s=e?this.removeListener:this.addListener,o=e?this.removeListeners:this.addListeners;if("object"!=typeof t||t instanceof RegExp)for(r=n.length;r--;)s.call(this,t,n[r]);else for(r in t)t.hasOwnProperty(r)&&(i=t[r])&&("function"==typeof i?s.call(this,r,i):o.call(this,r,i));return this},r.removeEvent=function(e){var t,n=typeof e,r=this._getEvents();if("string"===n)delete r[e];else if(e instanceof RegExp)for(t in r)r.hasOwnProperty(t)&&e.test(t)&&delete r[t];else delete this._events;return this},r.removeAllListeners=n("removeEvent"),r.emitEvent=function(e,t){var n,r,i,s,o=this.getListenersAsObject(e);for(i in o)if(o.hasOwnProperty(i))for(r=o[i].length;r--;)n=o[i][r],n.once===!0&&this.removeListener(e,n.listener),s=n.listener.apply(this,t||[]),s===this._getOnceReturnValue()&&this.removeListener(e,n.listener);return this},r.trigger=n("emitEvent"),r.emit=function(e){var t=Array.prototype.slice.call(arguments,1);return this.emitEvent(e,t)},r.setOnceReturnValue=function(e){return this._onceReturnValue=e,this},r._getOnceReturnValue=function(){return this.hasOwnProperty("_onceReturnValue")?this._onceReturnValue:!0},r._getEvents=function(){return this._events||(this._events={})},e.noConflict=function(){return i.EventEmitter=s,e},"function"==typeof define&&define.amd?define(function(){return e}):"object"==typeof module&&module.exports?module.exports=e:this.EventEmitter=e}.call(this);
},{}],17:[function(require,module,exports){
!function(t){__browserify_shim_require__=require,function(t,e,i,s,n){!function(){var i=this,n=n||{};n.WEBGL_RENDERER=0,n.CANVAS_RENDERER=1,n.VERSION="v1.5.1",n.blendModes={NORMAL:0,ADD:1,MULTIPLY:2,SCREEN:3,OVERLAY:4,DARKEN:5,LIGHTEN:6,COLOR_DODGE:7,COLOR_BURN:8,HARD_LIGHT:9,SOFT_LIGHT:10,DIFFERENCE:11,EXCLUSION:12,HUE:13,SATURATION:14,COLOR:15,LUMINOSITY:16},n.scaleModes={DEFAULT:0,LINEAR:0,NEAREST:1},n.INTERACTION_FREQUENCY=30,n.AUTO_PREVENT_DEFAULT=!0,n.RAD_TO_DEG=180/Math.PI,n.DEG_TO_RAD=Math.PI/180,n.Point=function(t,e){this.x=t||0,this.y=e||0},n.Point.prototype.clone=function(){return new n.Point(this.x,this.y)},n.Point.prototype.constructor=n.Point,n.Point.prototype.set=function(t,e){this.x=t||0,this.y=e||(0!==e?this.x:0)},n.Rectangle=function(t,e,i,r){this.x=t||0,this.y=e||0,this.width=i||0,this.height=r||0},n.Rectangle.prototype.clone=function(){return new n.Rectangle(this.x,this.y,this.width,this.height)},n.Rectangle.prototype.contains=function(t,e){if(this.width<=0||this.height<=0)return!1;var i=this.x;if(t>=i&&t<=i+this.width){var r=this.y;if(e>=r&&e<=r+this.height)return!0}return!1},n.Rectangle.prototype.constructor=n.Rectangle,n.EmptyRectangle=new n.Rectangle(0,0,0,0),n.Polygon=function(t){if(t instanceof Array||(t=Array.prototype.slice.call(arguments)),"number"==typeof t[0]){for(var e=[],i=0,r=t.length;r>i;i+=2)e.push(new n.Point(t[i],t[i+1]));t=e}this.points=t},n.Polygon.prototype.clone=function(){for(var t=[],e=0;e<this.points.length;e++)t.push(this.points[e].clone());return new n.Polygon(t)},n.Polygon.prototype.contains=function(t,e){for(var i=!1,r=0,s=this.points.length-1;r<this.points.length;s=r++){var n=this.points[r].x,o=this.points[r].y,a=this.points[s].x,h=this.points[s].y,l=o>e!=h>e&&(a-n)*(e-o)/(h-o)+n>t;l&&(i=!i)}return i},n.Polygon.prototype.constructor=n.Polygon,n.Circle=function(t,e,i){this.x=t||0,this.y=e||0,this.radius=i||0},n.Circle.prototype.clone=function(){return new n.Circle(this.x,this.y,this.radius)},n.Circle.prototype.contains=function(t,e){if(this.radius<=0)return!1;var i=this.x-t,r=this.y-e,s=this.radius*this.radius;return i*=i,r*=r,s>=i+r},n.Circle.prototype.constructor=n.Circle,n.Ellipse=function(t,e,i,r){this.x=t||0,this.y=e||0,this.width=i||0,this.height=r||0},n.Ellipse.prototype.clone=function(){return new n.Ellipse(this.x,this.y,this.width,this.height)},n.Ellipse.prototype.contains=function(t,e){if(this.width<=0||this.height<=0)return!1;var i=(t-this.x)/this.width,r=(e-this.y)/this.height;return i*=i,r*=r,1>=i+r},n.Ellipse.prototype.getBounds=function(){return new n.Rectangle(this.x,this.y,this.width,this.height)},n.Ellipse.prototype.constructor=n.Ellipse,n.determineMatrixArrayType=function(){return"undefined"!=typeof Float32Array?Float32Array:Array},n.Matrix2=n.determineMatrixArrayType(),n.Matrix=function(){this.a=1,this.b=0,this.c=0,this.d=1,this.tx=0,this.ty=0},n.Matrix.prototype.fromArray=function(t){this.a=t[0],this.b=t[1],this.c=t[3],this.d=t[4],this.tx=t[2],this.ty=t[5]},n.Matrix.prototype.toArray=function(t){this.array||(this.array=new Float32Array(9));var e=this.array;return t?(this.array[0]=this.a,this.array[1]=this.c,this.array[2]=0,this.array[3]=this.b,this.array[4]=this.d,this.array[5]=0,this.array[6]=this.tx,this.array[7]=this.ty,this.array[8]=1):(this.array[0]=this.a,this.array[1]=this.b,this.array[2]=this.tx,this.array[3]=this.c,this.array[4]=this.d,this.array[5]=this.ty,this.array[6]=0,this.array[7]=0,this.array[8]=1),e},n.identityMatrix=new n.Matrix,n.DisplayObject=function(){this.position=new n.Point,this.scale=new n.Point(1,1),this.pivot=new n.Point(0,0),this.rotation=0,this.alpha=1,this.visible=!0,this.hitArea=null,this.buttonMode=!1,this.renderable=!1,this.parent=null,this.stage=null,this.worldAlpha=1,this._interactive=!1,this.defaultCursor="pointer",this.worldTransform=new n.Matrix,this.color=[],this.dynamic=!0,this._sr=0,this._cr=1,this.filterArea=new n.Rectangle(0,0,1,1),this._bounds=new n.Rectangle(0,0,1,1),this._currentBounds=null,this._mask=null},n.DisplayObject.prototype.constructor=n.DisplayObject,n.DisplayObject.prototype.setInteractive=function(t){this.interactive=t},Object.defineProperty(n.DisplayObject.prototype,"interactive",{get:function(){return this._interactive},set:function(t){this._interactive=t,this.stage&&(this.stage.dirty=!0)}}),Object.defineProperty(n.DisplayObject.prototype,"worldVisible",{get:function(){var t=this;do{if(!t.visible)return!1;t=t.parent}while(t);return!0}}),Object.defineProperty(n.DisplayObject.prototype,"mask",{get:function(){return this._mask},set:function(t){this._mask&&(this._mask.isMask=!1),this._mask=t,this._mask&&(this._mask.isMask=!0)}}),Object.defineProperty(n.DisplayObject.prototype,"filters",{get:function(){return this._filters},set:function(t){if(t){for(var e=[],i=0;i<t.length;i++)for(var r=t[i].passes,s=0;s<r.length;s++)e.push(r[s]);this._filterBlock={target:this,filterPasses:e}}this._filters=t}}),n.DisplayObject.prototype.updateTransform=function(){this.rotation!==this.rotationCache&&(this.rotationCache=this.rotation,this._sr=Math.sin(this.rotation),this._cr=Math.cos(this.rotation));var t=this.parent.worldTransform,e=this.worldTransform,i=this.pivot.x,r=this.pivot.y,s=this._cr*this.scale.x,n=-this._sr*this.scale.y,o=this._sr*this.scale.x,a=this._cr*this.scale.y,h=this.position.x-s*i-r*n,l=this.position.y-a*r-i*o,u=t.a,c=t.b,d=t.c,p=t.d;e.a=u*s+c*o,e.b=u*n+c*a,e.tx=u*h+c*l+t.tx,e.c=d*s+p*o,e.d=d*n+p*a,e.ty=d*h+p*l+t.ty,this.worldAlpha=this.alpha*this.parent.worldAlpha},n.DisplayObject.prototype.getBounds=function(t){return t=t,n.EmptyRectangle},n.DisplayObject.prototype.getLocalBounds=function(){return this.getBounds(n.identityMatrix)},n.DisplayObject.prototype.setStageReference=function(t){this.stage=t,this._interactive&&(this.stage.dirty=!0)},n.DisplayObject.prototype._renderWebGL=function(t){t=t},n.DisplayObject.prototype._renderCanvas=function(t){t=t},Object.defineProperty(n.DisplayObject.prototype,"x",{get:function(){return this.position.x},set:function(t){this.position.x=t}}),Object.defineProperty(n.DisplayObject.prototype,"y",{get:function(){return this.position.y},set:function(t){this.position.y=t}}),n.DisplayObjectContainer=function(){n.DisplayObject.call(this),this.children=[]},n.DisplayObjectContainer.prototype=Object.create(n.DisplayObject.prototype),n.DisplayObjectContainer.prototype.constructor=n.DisplayObjectContainer,n.DisplayObjectContainer.prototype.addChild=function(t){this.addChildAt(t,this.children.length)},n.DisplayObjectContainer.prototype.addChildAt=function(t,e){if(!(e>=0&&e<=this.children.length))throw new Error(t+" The index "+e+" supplied is out of bounds "+this.children.length);t.parent&&t.parent.removeChild(t),t.parent=this,this.children.splice(e,0,t),this.stage&&t.setStageReference(this.stage)},n.DisplayObjectContainer.prototype.swapChildren=function(t,e){if(t!==e){var i=this.children.indexOf(t),r=this.children.indexOf(e);if(0>i||0>r)throw new Error("swapChildren: Both the supplied DisplayObjects must be a child of the caller.");this.children[i]=e,this.children[r]=t}},n.DisplayObjectContainer.prototype.getChildAt=function(t){if(t>=0&&t<this.children.length)return this.children[t];throw new Error("The supplied DisplayObjects must be a child of the caller "+this)},n.DisplayObjectContainer.prototype.removeChild=function(t){var e=this.children.indexOf(t);if(-1===e)throw new Error(t+" The supplied DisplayObject must be a child of the caller "+this);this.stage&&t.removeStageReference(),t.parent=void 0,this.children.splice(e,1)},n.DisplayObjectContainer.prototype.updateTransform=function(){if(this.visible){n.DisplayObject.prototype.updateTransform.call(this);for(var t=0,e=this.children.length;e>t;t++)this.children[t].updateTransform()}},n.DisplayObjectContainer.prototype.getBounds=function(t){if(0===this.children.length)return n.EmptyRectangle;if(t){var e=this.worldTransform;this.worldTransform=t,this.updateTransform(),this.worldTransform=e}for(var i,r,s,o=1/0,a=1/0,h=-1/0,l=-1/0,u=!1,c=0,d=this.children.length;d>c;c++){var p=this.children[c];p.visible&&(u=!0,i=this.children[c].getBounds(t),o=o<i.x?o:i.x,a=a<i.y?a:i.y,r=i.width+i.x,s=i.height+i.y,h=h>r?h:r,l=l>s?l:s)}if(!u)return n.EmptyRectangle;var f=this._bounds;return f.x=o,f.y=a,f.width=h-o,f.height=l-a,f},n.DisplayObjectContainer.prototype.getLocalBounds=function(){var t=this.worldTransform;this.worldTransform=n.identityMatrix;for(var e=0,i=this.children.length;i>e;e++)this.children[e].updateTransform();var r=this.getBounds();return this.worldTransform=t,r},n.DisplayObjectContainer.prototype.setStageReference=function(t){this.stage=t,this._interactive&&(this.stage.dirty=!0);for(var e=0,i=this.children.length;i>e;e++){var r=this.children[e];r.setStageReference(t)}},n.DisplayObjectContainer.prototype.removeStageReference=function(){for(var t=0,e=this.children.length;e>t;t++){var i=this.children[t];i.removeStageReference()}this._interactive&&(this.stage.dirty=!0),this.stage=null},n.DisplayObjectContainer.prototype._renderWebGL=function(t){if(this.visible&&!(this.alpha<=0)){var e,i;if(this._mask||this._filters){for(this._mask&&(t.spriteBatch.stop(),t.maskManager.pushMask(this.mask,t),t.spriteBatch.start()),this._filters&&(t.spriteBatch.flush(),t.filterManager.pushFilter(this._filterBlock)),e=0,i=this.children.length;i>e;e++)this.children[e]._renderWebGL(t);t.spriteBatch.stop(),this._filters&&t.filterManager.popFilter(),this._mask&&t.maskManager.popMask(t),t.spriteBatch.start()}else for(e=0,i=this.children.length;i>e;e++)this.children[e]._renderWebGL(t)}},n.DisplayObjectContainer.prototype._renderCanvas=function(t){if(this.visible!==!1&&0!==this.alpha){this._mask&&t.maskManager.pushMask(this._mask,t.context);for(var e=0,i=this.children.length;i>e;e++){var r=this.children[e];r._renderCanvas(t)}this._mask&&t.maskManager.popMask(t.context)}},n.Sprite=function(t){n.DisplayObjectContainer.call(this),this.anchor=new n.Point,this.texture=t,this._width=0,this._height=0,this.tint=16777215,this.blendMode=n.blendModes.NORMAL,t.baseTexture.hasLoaded?this.onTextureUpdate():(this.onTextureUpdateBind=this.onTextureUpdate.bind(this),this.texture.addEventListener("update",this.onTextureUpdateBind)),this.renderable=!0},n.Sprite.prototype=Object.create(n.DisplayObjectContainer.prototype),n.Sprite.prototype.constructor=n.Sprite,Object.defineProperty(n.Sprite.prototype,"width",{get:function(){return this.scale.x*this.texture.frame.width},set:function(t){this.scale.x=t/this.texture.frame.width,this._width=t}}),Object.defineProperty(n.Sprite.prototype,"height",{get:function(){return this.scale.y*this.texture.frame.height},set:function(t){this.scale.y=t/this.texture.frame.height,this._height=t}}),n.Sprite.prototype.setTexture=function(t){this.texture.baseTexture!==t.baseTexture?(this.textureChange=!0,this.texture=t):this.texture=t,this.cachedTint=16777215,this.updateFrame=!0},n.Sprite.prototype.onTextureUpdate=function(){this._width&&(this.scale.x=this._width/this.texture.frame.width),this._height&&(this.scale.y=this._height/this.texture.frame.height),this.updateFrame=!0},n.Sprite.prototype.getBounds=function(t){var e=this.texture.frame.width,i=this.texture.frame.height,r=e*(1-this.anchor.x),s=e*-this.anchor.x,n=i*(1-this.anchor.y),o=i*-this.anchor.y,a=t||this.worldTransform,h=a.a,l=a.c,u=a.b,c=a.d,d=a.tx,p=a.ty,f=h*s+u*o+d,g=c*o+l*s+p,m=h*r+u*o+d,v=c*o+l*r+p,x=h*r+u*n+d,y=c*n+l*r+p,b=h*s+u*n+d,T=c*n+l*s+p,S=-1/0,C=-1/0,w=1/0,A=1/0;w=w>f?f:w,w=w>m?m:w,w=w>x?x:w,w=w>b?b:w,A=A>g?g:A,A=A>v?v:A,A=A>y?y:A,A=A>T?T:A,S=f>S?f:S,S=m>S?m:S,S=x>S?x:S,S=b>S?b:S,C=g>C?g:C,C=v>C?v:C,C=y>C?y:C,C=T>C?T:C;var E=this._bounds;return E.x=w,E.width=S-w,E.y=A,E.height=C-A,this._currentBounds=E,E},n.Sprite.prototype._renderWebGL=function(t){if(this.visible&&!(this.alpha<=0)){var e,i;if(this._mask||this._filters){var r=t.spriteBatch;for(this._mask&&(r.stop(),t.maskManager.pushMask(this.mask,t),r.start()),this._filters&&(r.flush(),t.filterManager.pushFilter(this._filterBlock)),r.render(this),e=0,i=this.children.length;i>e;e++)this.children[e]._renderWebGL(t);r.stop(),this._filters&&t.filterManager.popFilter(),this._mask&&t.maskManager.popMask(t),r.start()}else for(t.spriteBatch.render(this),e=0,i=this.children.length;i>e;e++)this.children[e]._renderWebGL(t)}},n.Sprite.prototype._renderCanvas=function(t){if(this.visible!==!1&&0!==this.alpha){var e=this.texture.frame,i=t.context,r=this.texture;if(this.blendMode!==t.currentBlendMode&&(t.currentBlendMode=this.blendMode,i.globalCompositeOperation=n.blendModesCanvas[t.currentBlendMode]),this._mask&&t.maskManager.pushMask(this._mask,t.context),e&&e.width&&e.height&&r.baseTexture.source){i.globalAlpha=this.worldAlpha;var s=this.worldTransform;if(t.roundPixels?i.setTransform(s.a,s.c,s.b,s.d,s.tx||0,s.ty||0):i.setTransform(s.a,s.c,s.b,s.d,s.tx,s.ty),t.smoothProperty&&t.scaleMode!==this.texture.baseTexture.scaleMode&&(t.scaleMode=this.texture.baseTexture.scaleMode,i[t.smoothProperty]=t.scaleMode===n.scaleModes.LINEAR),16777215!==this.tint){if(this.cachedTint!==this.tint){if(!r.baseTexture.hasLoaded)return;this.cachedTint=this.tint,this.tintedTexture=n.CanvasTinter.getTintedTexture(this,this.tint)}i.drawImage(this.tintedTexture,0,0,e.width,e.height,this.anchor.x*-e.width,this.anchor.y*-e.height,e.width,e.height)}else if(r.trim){var o=r.trim;i.drawImage(this.texture.baseTexture.source,e.x,e.y,e.width,e.height,o.x-this.anchor.x*o.width,o.y-this.anchor.y*o.height,e.width,e.height)}else i.drawImage(this.texture.baseTexture.source,e.x,e.y,e.width,e.height,this.anchor.x*-e.width,this.anchor.y*-e.height,e.width,e.height)}for(var a=0,h=this.children.length;h>a;a++){var l=this.children[a];l._renderCanvas(t)}this._mask&&t.maskManager.popMask(t.context)}},n.Sprite.fromFrame=function(t){var e=n.TextureCache[t];if(!e)throw new Error('The frameId "'+t+'" does not exist in the texture cache'+this);return new n.Sprite(e)},n.Sprite.fromImage=function(t,e,i){var r=n.Texture.fromImage(t,e,i);return new n.Sprite(r)},n.SpriteBatch=function(t){n.DisplayObjectContainer.call(this),this.textureThing=t,this.ready=!1},n.SpriteBatch.prototype=Object.create(n.DisplayObjectContainer.prototype),n.SpriteBatch.constructor=n.SpriteBatch,n.SpriteBatch.prototype.initWebGL=function(t){this.fastSpriteBatch=new n.WebGLFastSpriteBatch(t),this.ready=!0},n.SpriteBatch.prototype.updateTransform=function(){n.DisplayObject.prototype.updateTransform.call(this)},n.SpriteBatch.prototype._renderWebGL=function(t){!this.visible||this.alpha<=0||!this.children.length||(this.ready||this.initWebGL(t.gl),t.spriteBatch.stop(),t.shaderManager.activateShader(t.shaderManager.fastShader),this.fastSpriteBatch.begin(this,t),this.fastSpriteBatch.render(this),t.shaderManager.activateShader(t.shaderManager.defaultShader),t.spriteBatch.start())},n.SpriteBatch.prototype._renderCanvas=function(t){var e=t.context;e.globalAlpha=this.worldAlpha;var i=this.worldTransform;t.roundPixels?e.setTransform(i.a,i.c,i.b,i.d,Math.floor(i.tx),Math.floor(i.ty)):e.setTransform(i.a,i.c,i.b,i.d,i.tx,i.ty),e.save();for(var r=0;r<this.children.length;r++){var s=this.children[r],o=s.texture,a=o.frame;if(e.globalAlpha=this.worldAlpha*s.alpha,0===s.rotation%(2*Math.PI))e.drawImage(o.baseTexture.source,a.x,a.y,a.width,a.height,0|s.anchor.x*-a.width*s.scale.x+s.position.x+.5,0|s.anchor.y*-a.height*s.scale.y+s.position.y+.5,a.width*s.scale.x,a.height*s.scale.y);else{n.DisplayObject.prototype.updateTransform.call(s),i=s.localTransform,this.rotation!==this.rotationCache&&(this.rotationCache=this.rotation,this._sr=Math.sin(this.rotation),this._cr=Math.cos(this.rotation));var h=s._cr*s.scale.x,l=-s._sr*s.scale.y,u=s._sr*s.scale.x,c=s._cr*s.scale.y;e.setTransform(h,u,l,c,s.position.x,s.position.y),e.drawImage(o.baseTexture.source,a.x,a.y,a.width,a.height,0|s.anchor.x*-a.width+.5,0|s.anchor.y*-a.height+.5,a.width,a.height)}}e.restore()},n.MovieClip=function(t){n.Sprite.call(this,t[0]),this.textures=t,this.animationSpeed=1,this.loop=!0,this.onComplete=null,this.currentFrame=0,this.playing=!1},n.MovieClip.prototype=Object.create(n.Sprite.prototype),n.MovieClip.prototype.constructor=n.MovieClip,Object.defineProperty(n.MovieClip.prototype,"totalFrames",{get:function(){return this.textures.length}}),n.MovieClip.prototype.stop=function(){this.playing=!1},n.MovieClip.prototype.play=function(){this.playing=!0},n.MovieClip.prototype.gotoAndStop=function(t){this.playing=!1,this.currentFrame=t;var e=0|this.currentFrame+.5;this.setTexture(this.textures[e%this.textures.length])},n.MovieClip.prototype.gotoAndPlay=function(t){this.currentFrame=t,this.playing=!0},n.MovieClip.prototype.updateTransform=function(){if(n.Sprite.prototype.updateTransform.call(this),this.playing){this.currentFrame+=this.animationSpeed;var t=0|this.currentFrame+.5;this.loop||t<this.textures.length?this.setTexture(this.textures[t%this.textures.length]):t>=this.textures.length&&(this.gotoAndStop(this.textures.length-1),this.onComplete&&this.onComplete())}},n.FilterBlock=function(){this.visible=!0,this.renderable=!0},n.Text=function(t,e){this.canvas=document.createElement("canvas"),this.context=this.canvas.getContext("2d"),n.Sprite.call(this,n.Texture.fromCanvas(this.canvas)),this.setText(t),this.setStyle(e),this.updateText(),this.dirty=!1},n.Text.prototype=Object.create(n.Sprite.prototype),n.Text.prototype.constructor=n.Text,n.Text.prototype.setStyle=function(t){t=t||{},t.font=t.font||"bold 20pt Arial",t.fill=t.fill||"black",t.align=t.align||"left",t.stroke=t.stroke||"black",t.strokeThickness=t.strokeThickness||0,t.wordWrap=t.wordWrap||!1,t.wordWrapWidth=t.wordWrapWidth||100,this.style=t,this.dirty=!0},n.Text.prototype.setText=function(t){this.text=t.toString()||" ",this.dirty=!0},n.Text.prototype.updateText=function(){this.context.font=this.style.font;var t=this.text;this.style.wordWrap&&(t=this.wordWrap(this.text));for(var e=t.split(/(?:\r\n|\r|\n)/),i=[],r=0,s=0;s<e.length;s++){var o=this.context.measureText(e[s]).width;i[s]=o,r=Math.max(r,o)}this.canvas.width=r+this.style.strokeThickness;var a=this.determineFontHeight("font: "+this.style.font+";")+this.style.strokeThickness;for(this.canvas.height=a*e.length,navigator.isCocoonJS&&this.context.clearRect(0,0,this.canvas.width,this.canvas.height),this.context.fillStyle=this.style.fill,this.context.font=this.style.font,this.context.strokeStyle=this.style.stroke,this.context.lineWidth=this.style.strokeThickness,this.context.textBaseline="top",s=0;s<e.length;s++){var h=new n.Point(this.style.strokeThickness/2,this.style.strokeThickness/2+s*a);"right"===this.style.align?h.x+=r-i[s]:"center"===this.style.align&&(h.x+=(r-i[s])/2),this.style.stroke&&this.style.strokeThickness&&this.context.strokeText(e[s],h.x,h.y),this.style.fill&&this.context.fillText(e[s],h.x,h.y)}this.updateTexture()},n.Text.prototype.updateTexture=function(){this.texture.baseTexture.width=this.canvas.width,this.texture.baseTexture.height=this.canvas.height,this.texture.frame.width=this.canvas.width,this.texture.frame.height=this.canvas.height,this._width=this.canvas.width,this._height=this.canvas.height,this.requiresUpdate=!0},n.Text.prototype._renderWebGL=function(t){this.requiresUpdate&&(this.requiresUpdate=!1,n.updateWebGLTexture(this.texture.baseTexture,t.gl)),n.Sprite.prototype._renderWebGL.call(this,t)},n.Text.prototype.updateTransform=function(){this.dirty&&(this.updateText(),this.dirty=!1),n.Sprite.prototype.updateTransform.call(this)},n.Text.prototype.determineFontHeight=function(t){var e=n.Text.heightCache[t];if(!e){var i=document.getElementsByTagName("body")[0],r=document.createElement("div"),s=document.createTextNode("M");r.appendChild(s),r.setAttribute("style",t+";position:absolute;top:0;left:0"),i.appendChild(r),e=r.offsetHeight,n.Text.heightCache[t]=e,i.removeChild(r)}return e},n.Text.prototype.wordWrap=function(t){for(var e="",i=t.split("\n"),r=0;r<i.length;r++){for(var s=this.style.wordWrapWidth,n=i[r].split(" "),o=0;o<n.length;o++){var a=this.context.measureText(n[o]).width,h=a+this.context.measureText(" ").width;h>s?(o>0&&(e+="\n"),e+=n[o]+" ",s=this.style.wordWrapWidth-a):(s-=h,e+=n[o]+" ")}r<i.length-1&&(e+="\n")}return e},n.Text.prototype.destroy=function(t){t&&this.texture.destroy()},n.Text.heightCache={},n.BitmapText=function(t,e){n.DisplayObjectContainer.call(this),this._pool=[],this.setText(t),this.setStyle(e),this.updateText(),this.dirty=!1},n.BitmapText.prototype=Object.create(n.DisplayObjectContainer.prototype),n.BitmapText.prototype.constructor=n.BitmapText,n.BitmapText.prototype.setText=function(t){this.text=t||" ",this.dirty=!0},n.BitmapText.prototype.setStyle=function(t){t=t||{},t.align=t.align||"left",this.style=t;var e=t.font.split(" ");this.fontName=e[e.length-1],this.fontSize=e.length>=2?parseInt(e[e.length-2],10):n.BitmapText.fonts[this.fontName].size,this.dirty=!0,this.tint=t.tint},n.BitmapText.prototype.updateText=function(){for(var t=n.BitmapText.fonts[this.fontName],e=new n.Point,i=null,r=[],s=0,o=[],a=0,h=this.fontSize/t.size,l=0;l<this.text.length;l++){var u=this.text.charCodeAt(l);if(/(?:\r\n|\r|\n)/.test(this.text.charAt(l)))o.push(e.x),s=Math.max(s,e.x),a++,e.x=0,e.y+=t.lineHeight,i=null;else{var c=t.chars[u];c&&(i&&c[i]&&(e.x+=c.kerning[i]),r.push({texture:c.texture,line:a,charCode:u,position:new n.Point(e.x+c.xOffset,e.y+c.yOffset)}),e.x+=c.xAdvance,i=u)}}o.push(e.x),s=Math.max(s,e.x);var d=[];for(l=0;a>=l;l++){var p=0;"right"===this.style.align?p=s-o[l]:"center"===this.style.align&&(p=(s-o[l])/2),d.push(p)}var f=this.children.length,g=r.length,m=this.tint||16777215;for(l=0;g>l;l++){var v=f>l?this.children[l]:this._pool.pop();v?v.setTexture(r[l].texture):v=new n.Sprite(r[l].texture),v.position.x=(r[l].position.x+d[r[l].line])*h,v.position.y=r[l].position.y*h,v.scale.x=v.scale.y=h,v.tint=m,v.parent||this.addChild(v)}for(;this.children.length>g;){var x=this.getChildAt(this.children.length-1);this._pool.push(x),this.removeChild(x)}this.textWidth=s*h,this.textHeight=(e.y+t.lineHeight)*h},n.BitmapText.prototype.updateTransform=function(){this.dirty&&(this.updateText(),this.dirty=!1),n.DisplayObjectContainer.prototype.updateTransform.call(this)},n.BitmapText.fonts={},n.InteractionData=function(){this.global=new n.Point,this.local=new n.Point,this.target=null,this.originalEvent=null},n.InteractionData.prototype.getLocalPosition=function(t){var e=t.worldTransform,i=this.global,r=e.a,s=e.b,o=e.tx,a=e.c,h=e.d,l=e.ty,u=1/(r*h+s*-a);return new n.Point(h*u*i.x+-s*u*i.y+(l*s-o*h)*u,r*u*i.y+-a*u*i.x+(-l*r+o*a)*u)},n.InteractionData.prototype.constructor=n.InteractionData,n.InteractionManager=function(t){this.stage=t,this.mouse=new n.InteractionData,this.touchs={},this.tempPoint=new n.Point,this.mouseoverEnabled=!0,this.pool=[],this.interactiveItems=[],this.interactionDOMElement=null,this.onMouseMove=this.onMouseMove.bind(this),this.onMouseDown=this.onMouseDown.bind(this),this.onMouseOut=this.onMouseOut.bind(this),this.onMouseUp=this.onMouseUp.bind(this),this.onTouchStart=this.onTouchStart.bind(this),this.onTouchEnd=this.onTouchEnd.bind(this),this.onTouchMove=this.onTouchMove.bind(this),this.last=0,this.currentCursorStyle="inherit",this.mouseOut=!1},n.InteractionManager.prototype.constructor=n.InteractionManager,n.InteractionManager.prototype.collectInteractiveSprite=function(t,e){for(var i=t.children,r=i.length,s=r-1;s>=0;s--){var n=i[s];n.interactive?(e.interactiveChildren=!0,this.interactiveItems.push(n),n.children.length>0&&this.collectInteractiveSprite(n,n)):(n.__iParent=null,n.children.length>0&&this.collectInteractiveSprite(n,e))}},n.InteractionManager.prototype.setTarget=function(t){this.target=t,null===this.interactionDOMElement&&this.setTargetDomElement(t.view)},n.InteractionManager.prototype.setTargetDomElement=function(t){this.removeEvents(),window.navigator.msPointerEnabled&&(t.style["-ms-content-zooming"]="none",t.style["-ms-touch-action"]="none"),this.interactionDOMElement=t,t.addEventListener("mousemove",this.onMouseMove,!0),t.addEventListener("mousedown",this.onMouseDown,!0),t.addEventListener("mouseout",this.onMouseOut,!0),t.addEventListener("touchstart",this.onTouchStart,!0),t.addEventListener("touchend",this.onTouchEnd,!0),t.addEventListener("touchmove",this.onTouchMove,!0),document.body.addEventListener("mouseup",this.onMouseUp,!0)},n.InteractionManager.prototype.removeEvents=function(){this.interactionDOMElement&&(this.interactionDOMElement.style["-ms-content-zooming"]="",this.interactionDOMElement.style["-ms-touch-action"]="",this.interactionDOMElement.removeEventListener("mousemove",this.onMouseMove,!0),this.interactionDOMElement.removeEventListener("mousedown",this.onMouseDown,!0),this.interactionDOMElement.removeEventListener("mouseout",this.onMouseOut,!0),this.interactionDOMElement.removeEventListener("touchstart",this.onTouchStart,!0),this.interactionDOMElement.removeEventListener("touchend",this.onTouchEnd,!0),this.interactionDOMElement.removeEventListener("touchmove",this.onTouchMove,!0),this.interactionDOMElement=null,document.body.removeEventListener("mouseup",this.onMouseUp,!0))},n.InteractionManager.prototype.update=function(){if(this.target){var t=Date.now(),e=t-this.last;if(e=e*n.INTERACTION_FREQUENCY/1e3,!(1>e)){this.last=t;var i=0;if(this.dirty){this.dirty=!1;var r=this.interactiveItems.length;for(i=0;r>i;i++)this.interactiveItems[i].interactiveChildren=!1;this.interactiveItems=[],this.stage.interactive&&this.interactiveItems.push(this.stage),this.collectInteractiveSprite(this.stage,this.stage)}var s=this.interactiveItems.length,o="inherit",a=!1;for(i=0;s>i;i++){var h=this.interactiveItems[i];h.__hit=this.hitTest(h,this.mouse),this.mouse.target=h,h.__hit&&!a?(h.buttonMode&&(o=h.defaultCursor),h.interactiveChildren||(a=!0),h.__isOver||(h.mouseover&&h.mouseover(this.mouse),h.__isOver=!0)):h.__isOver&&(h.mouseout&&h.mouseout(this.mouse),h.__isOver=!1)}this.currentCursorStyle!==o&&(this.currentCursorStyle=o,this.interactionDOMElement.style.cursor=o)}}},n.InteractionManager.prototype.onMouseMove=function(t){this.mouse.originalEvent=t||window.event;var e=this.interactionDOMElement.getBoundingClientRect();this.mouse.global.x=(t.clientX-e.left)*(this.target.width/e.width),this.mouse.global.y=(t.clientY-e.top)*(this.target.height/e.height);for(var i=this.interactiveItems.length,r=0;i>r;r++){var s=this.interactiveItems[r];s.mousemove&&s.mousemove(this.mouse)}},n.InteractionManager.prototype.onMouseDown=function(t){this.mouse.originalEvent=t||window.event,n.AUTO_PREVENT_DEFAULT&&this.mouse.originalEvent.preventDefault();for(var e=this.interactiveItems.length,i=0;e>i;i++){var r=this.interactiveItems[i];if((r.mousedown||r.click)&&(r.__mouseIsDown=!0,r.__hit=this.hitTest(r,this.mouse),r.__hit&&(r.mousedown&&r.mousedown(this.mouse),r.__isDown=!0,!r.interactiveChildren)))break}},n.InteractionManager.prototype.onMouseOut=function(){var t=this.interactiveItems.length;this.interactionDOMElement.style.cursor="inherit";for(var e=0;t>e;e++){var i=this.interactiveItems[e];i.__isOver&&(this.mouse.target=i,i.mouseout&&i.mouseout(this.mouse),i.__isOver=!1)}this.mouseOut=!0,this.mouse.global.x=-1e4,this.mouse.global.y=-1e4},n.InteractionManager.prototype.onMouseUp=function(t){this.mouse.originalEvent=t||window.event;for(var e=this.interactiveItems.length,i=!1,r=0;e>r;r++){var s=this.interactiveItems[r];s.__hit=this.hitTest(s,this.mouse),s.__hit&&!i?(s.mouseup&&s.mouseup(this.mouse),s.__isDown&&s.click&&s.click(this.mouse),s.interactiveChildren||(i=!0)):s.__isDown&&s.mouseupoutside&&s.mouseupoutside(this.mouse),s.__isDown=!1}},n.InteractionManager.prototype.hitTest=function(t,e){var i=e.global;if(!t.worldVisible)return!1;var r=t instanceof n.Sprite,s=t.worldTransform,o=s.a,a=s.b,h=s.tx,l=s.c,u=s.d,c=s.ty,d=1/(o*u+a*-l),p=u*d*i.x+-a*d*i.y+(c*a-h*u)*d,f=o*d*i.y+-l*d*i.x+(-c*o+h*l)*d;if(e.target=t,t.hitArea&&t.hitArea.contains)return t.hitArea.contains(p,f)?(e.target=t,!0):!1;if(r){var g,m=t.texture.frame.width,v=t.texture.frame.height,x=-m*t.anchor.x;if(p>x&&x+m>p&&(g=-v*t.anchor.y,f>g&&g+v>f))return e.target=t,!0}for(var y=t.children.length,b=0;y>b;b++){var T=t.children[b],S=this.hitTest(T,e);if(S)return e.target=t,!0}return!1},n.InteractionManager.prototype.onTouchMove=function(t){var e,i=this.interactionDOMElement.getBoundingClientRect(),r=t.changedTouches,s=0;for(s=0;s<r.length;s++){var n=r[s];e=this.touchs[n.identifier],e.originalEvent=t||window.event,e.global.x=(n.clientX-i.left)*(this.target.width/i.width),e.global.y=(n.clientY-i.top)*(this.target.height/i.height),navigator.isCocoonJS&&(e.global.x=n.clientX,e.global.y=n.clientY)}var o=this.interactiveItems.length;for(s=0;o>s;s++){var a=this.interactiveItems[s];a.touchmove&&a.touchmove(e)}},n.InteractionManager.prototype.onTouchStart=function(t){var e=this.interactionDOMElement.getBoundingClientRect();n.AUTO_PREVENT_DEFAULT&&t.preventDefault();for(var i=t.changedTouches,r=0;r<i.length;r++){var s=i[r],o=this.pool.pop();o||(o=new n.InteractionData),o.originalEvent=t||window.event,this.touchs[s.identifier]=o,o.global.x=(s.clientX-e.left)*(this.target.width/e.width),o.global.y=(s.clientY-e.top)*(this.target.height/e.height),navigator.isCocoonJS&&(o.global.x=s.clientX,o.global.y=s.clientY);for(var a=this.interactiveItems.length,h=0;a>h;h++){var l=this.interactiveItems[h];if((l.touchstart||l.tap)&&(l.__hit=this.hitTest(l,o),l.__hit&&(l.touchstart&&l.touchstart(o),l.__isDown=!0,l.__touchData=o,!l.interactiveChildren)))break}}},n.InteractionManager.prototype.onTouchEnd=function(t){for(var e=this.interactionDOMElement.getBoundingClientRect(),i=t.changedTouches,r=0;r<i.length;r++){var s=i[r],n=this.touchs[s.identifier],o=!1;n.global.x=(s.clientX-e.left)*(this.target.width/e.width),n.global.y=(s.clientY-e.top)*(this.target.height/e.height),navigator.isCocoonJS&&(n.global.x=s.clientX,n.global.y=s.clientY);for(var a=this.interactiveItems.length,h=0;a>h;h++){var l=this.interactiveItems[h],u=l.__touchData;l.__hit=this.hitTest(l,n),u===n&&(n.originalEvent=t||window.event,(l.touchend||l.tap)&&(l.__hit&&!o?(l.touchend&&l.touchend(n),l.__isDown&&l.tap&&l.tap(n),l.interactiveChildren||(o=!0)):l.__isDown&&l.touchendoutside&&l.touchendoutside(n),l.__isDown=!1),l.__touchData=null)}this.pool.push(n),this.touchs[s.identifier]=null}},n.Stage=function(t){n.DisplayObjectContainer.call(this),this.worldTransform=new n.Matrix,this.interactive=!0,this.interactionManager=new n.InteractionManager(this),this.dirty=!0,this.stage=this,this.stage.hitArea=new n.Rectangle(0,0,1e5,1e5),this.setBackgroundColor(t)},n.Stage.prototype=Object.create(n.DisplayObjectContainer.prototype),n.Stage.prototype.constructor=n.Stage,n.Stage.prototype.setInteractionDelegate=function(t){this.interactionManager.setTargetDomElement(t)},n.Stage.prototype.updateTransform=function(){this.worldAlpha=1;for(var t=0,e=this.children.length;e>t;t++)this.children[t].updateTransform();this.dirty&&(this.dirty=!1,this.interactionManager.dirty=!0),this.interactive&&this.interactionManager.update()},n.Stage.prototype.setBackgroundColor=function(t){this.backgroundColor=t||0,this.backgroundColorSplit=n.hex2rgb(this.backgroundColor);var e=this.backgroundColor.toString(16);e="000000".substr(0,6-e.length)+e,this.backgroundColorString="#"+e},n.Stage.prototype.getMousePosition=function(){return this.interactionManager.mouse.global};for(var o=0,h=["ms","moz","webkit","o"],l=0;l<h.length&&!window.requestAnimationFrame;++l)window.requestAnimationFrame=window[h[l]+"RequestAnimationFrame"],window.cancelAnimationFrame=window[h[l]+"CancelAnimationFrame"]||window[h[l]+"CancelRequestAnimationFrame"];window.requestAnimationFrame||(window.requestAnimationFrame=function(t){var e=(new Date).getTime(),i=Math.max(0,16-(e-o)),r=window.setTimeout(function(){t(e+i)},i);return o=e+i,r}),window.cancelAnimationFrame||(window.cancelAnimationFrame=function(t){clearTimeout(t)}),window.requestAnimFrame=window.requestAnimationFrame,n.hex2rgb=function(t){return[(255&t>>16)/255,(255&t>>8)/255,(255&t)/255]},n.rgb2hex=function(t){return(255*t[0]<<16)+(255*t[1]<<8)+255*t[2]},"function"!=typeof Function.prototype.bind&&(Function.prototype.bind=function(){var t=Array.prototype.slice;
return function(e){function i(){var n=s.concat(t.call(arguments));r.apply(this instanceof i?this:e,n)}var r=this,s=t.call(arguments,1);if("function"!=typeof r)throw new TypeError;return i.prototype=function n(t){return t&&(n.prototype=t),this instanceof n?void 0:new n}(r.prototype),i}}()),n.AjaxRequest=function(){var t=["Msxml2.XMLHTTP.6.0","Msxml2.XMLHTTP.3.0","Microsoft.XMLHTTP"];if(!window.ActiveXObject)return window.XMLHttpRequest?new window.XMLHttpRequest:!1;for(var e=0;e<t.length;e++)try{return new window.ActiveXObject(t[e])}catch(i){}},n.canUseNewCanvasBlendModes=function(){var t=document.createElement("canvas");t.width=1,t.height=1;var e=t.getContext("2d");return e.fillStyle="#000",e.fillRect(0,0,1,1),e.globalCompositeOperation="multiply",e.fillStyle="#fff",e.fillRect(0,0,1,1),0===e.getImageData(0,0,1,1).data[0]},n.getNextPowerOfTwo=function(t){if(t>0&&0===(t&t-1))return t;for(var e=1;t>e;)e<<=1;return e},n.EventTarget=function(){var t={};this.addEventListener=this.on=function(e,i){void 0===t[e]&&(t[e]=[]),-1===t[e].indexOf(i)&&t[e].push(i)},this.dispatchEvent=this.emit=function(e){if(t[e.type]&&t[e.type].length)for(var i=0,r=t[e.type].length;r>i;i++)t[e.type][i](e)},this.removeEventListener=this.off=function(e,i){var r=t[e].indexOf(i);-1!==r&&t[e].splice(r,1)},this.removeAllEventListeners=function(e){var i=t[e];i&&(i.length=0)}},n.autoDetectRenderer=function(t,e,i,r,s){t||(t=800),e||(e=600);var o=function(){try{var t=document.createElement("canvas");return!!window.WebGLRenderingContext&&(t.getContext("webgl")||t.getContext("experimental-webgl"))}catch(e){return!1}}();return o?new n.WebGLRenderer(t,e,i,r,s):new n.CanvasRenderer(t,e,i,r)},n.PolyK={},n.PolyK.Triangulate=function(t){var e=!0,i=t.length>>1;if(3>i)return[];for(var r=[],s=[],o=0;i>o;o++)s.push(o);o=0;for(var a=i;a>3;){var h=s[(o+0)%a],l=s[(o+1)%a],u=s[(o+2)%a],c=t[2*h],d=t[2*h+1],p=t[2*l],f=t[2*l+1],g=t[2*u],m=t[2*u+1],v=!1;if(n.PolyK._convex(c,d,p,f,g,m,e)){v=!0;for(var x=0;a>x;x++){var y=s[x];if(y!==h&&y!==l&&y!==u&&n.PolyK._PointInTriangle(t[2*y],t[2*y+1],c,d,p,f,g,m)){v=!1;break}}}if(v)r.push(h,l,u),s.splice((o+1)%a,1),a--,o=0;else if(o++>3*a){if(!e)return window.console.log("PIXI Warning: shape too complex to fill"),[];for(r=[],s=[],o=0;i>o;o++)s.push(o);o=0,a=i,e=!1}}return r.push(s[0],s[1],s[2]),r},n.PolyK._PointInTriangle=function(t,e,i,r,s,n,o,a){var h=o-i,l=a-r,u=s-i,c=n-r,d=t-i,p=e-r,f=h*h+l*l,g=h*u+l*c,m=h*d+l*p,v=u*u+c*c,x=u*d+c*p,y=1/(f*v-g*g),b=(v*m-g*x)*y,T=(f*x-g*m)*y;return b>=0&&T>=0&&1>b+T},n.PolyK._convex=function(t,e,i,r,s,n,o){return(e-r)*(s-i)+(i-t)*(n-r)>=0===o},n.initDefaultShaders=function(){},n.CompileVertexShader=function(t,e){return n._CompileShader(t,e,t.VERTEX_SHADER)},n.CompileFragmentShader=function(t,e){return n._CompileShader(t,e,t.FRAGMENT_SHADER)},n._CompileShader=function(t,e,i){var r=e.join("\n"),s=t.createShader(i);return t.shaderSource(s,r),t.compileShader(s),t.getShaderParameter(s,t.COMPILE_STATUS)?s:(window.console.log(t.getShaderInfoLog(s)),null)},n.compileProgram=function(t,e,i){var r=n.CompileFragmentShader(t,i),s=n.CompileVertexShader(t,e),o=t.createProgram();return t.attachShader(o,s),t.attachShader(o,r),t.linkProgram(o),t.getProgramParameter(o,t.LINK_STATUS)||window.console.log("Could not initialise shaders"),o},n.PixiShader=function(t){this.gl=t,this.program=null,this.fragmentSrc=["precision lowp float;","varying vec2 vTextureCoord;","varying vec4 vColor;","uniform sampler2D uSampler;","void main(void) {","   gl_FragColor = texture2D(uSampler, vTextureCoord) * vColor ;","}"],this.textureCount=0,this.attributes=[],this.init()},n.PixiShader.prototype.init=function(){var t=this.gl,e=n.compileProgram(t,this.vertexSrc||n.PixiShader.defaultVertexSrc,this.fragmentSrc);t.useProgram(e),this.uSampler=t.getUniformLocation(e,"uSampler"),this.projectionVector=t.getUniformLocation(e,"projectionVector"),this.offsetVector=t.getUniformLocation(e,"offsetVector"),this.dimensions=t.getUniformLocation(e,"dimensions"),this.aVertexPosition=t.getAttribLocation(e,"aVertexPosition"),this.aTextureCoord=t.getAttribLocation(e,"aTextureCoord"),this.colorAttribute=t.getAttribLocation(e,"aColor"),-1===this.colorAttribute&&(this.colorAttribute=2),this.attributes=[this.aVertexPosition,this.aTextureCoord,this.colorAttribute];for(var i in this.uniforms)this.uniforms[i].uniformLocation=t.getUniformLocation(e,i);this.initUniforms(),this.program=e},n.PixiShader.prototype.initUniforms=function(){this.textureCount=1;var t,e=this.gl;for(var i in this.uniforms){t=this.uniforms[i];var r=t.type;"sampler2D"===r?(t._init=!1,null!==t.value&&this.initSampler2D(t)):"mat2"===r||"mat3"===r||"mat4"===r?(t.glMatrix=!0,t.glValueLength=1,"mat2"===r?t.glFunc=e.uniformMatrix2fv:"mat3"===r?t.glFunc=e.uniformMatrix3fv:"mat4"===r&&(t.glFunc=e.uniformMatrix4fv)):(t.glFunc=e["uniform"+r],t.glValueLength="2f"===r||"2i"===r?2:"3f"===r||"3i"===r?3:"4f"===r||"4i"===r?4:1)}},n.PixiShader.prototype.initSampler2D=function(t){if(t.value&&t.value.baseTexture&&t.value.baseTexture.hasLoaded){var e=this.gl;if(e.activeTexture(e["TEXTURE"+this.textureCount]),e.bindTexture(e.TEXTURE_2D,t.value.baseTexture._glTexture),t.textureData){var i=t.textureData,r=i.magFilter?i.magFilter:e.LINEAR,s=i.minFilter?i.minFilter:e.LINEAR,n=i.wrapS?i.wrapS:e.CLAMP_TO_EDGE,o=i.wrapT?i.wrapT:e.CLAMP_TO_EDGE,a=i.luminance?e.LUMINANCE:e.RGBA;if(i.repeat&&(n=e.REPEAT,o=e.REPEAT),e.pixelStorei(e.UNPACK_FLIP_Y_WEBGL,!!i.flipY),i.width){var h=i.width?i.width:512,l=i.height?i.height:2,u=i.border?i.border:0;e.texImage2D(e.TEXTURE_2D,0,a,h,l,u,a,e.UNSIGNED_BYTE,null)}else e.texImage2D(e.TEXTURE_2D,0,a,e.RGBA,e.UNSIGNED_BYTE,t.value.baseTexture.source);e.texParameteri(e.TEXTURE_2D,e.TEXTURE_MAG_FILTER,r),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_MIN_FILTER,s),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_WRAP_S,n),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_WRAP_T,o)}e.uniform1i(t.uniformLocation,this.textureCount),t._init=!0,this.textureCount++}},n.PixiShader.prototype.syncUniforms=function(){this.textureCount=1;var t,e=this.gl;for(var i in this.uniforms)t=this.uniforms[i],1===t.glValueLength?t.glMatrix===!0?t.glFunc.call(e,t.uniformLocation,t.transpose,t.value):t.glFunc.call(e,t.uniformLocation,t.value):2===t.glValueLength?t.glFunc.call(e,t.uniformLocation,t.value.x,t.value.y):3===t.glValueLength?t.glFunc.call(e,t.uniformLocation,t.value.x,t.value.y,t.value.z):4===t.glValueLength?t.glFunc.call(e,t.uniformLocation,t.value.x,t.value.y,t.value.z,t.value.w):"sampler2D"===t.type&&(t._init?(e.activeTexture(e["TEXTURE"+this.textureCount]),e.bindTexture(e.TEXTURE_2D,t.value.baseTexture._glTextures[e.id]||n.createWebGLTexture(t.value.baseTexture,e)),e.uniform1i(t.uniformLocation,this.textureCount),this.textureCount++):this.initSampler2D(t))},n.PixiShader.prototype.destroy=function(){this.gl.deleteProgram(this.program),this.uniforms=null,this.gl=null,this.attributes=null},n.PixiShader.defaultVertexSrc=["attribute vec2 aVertexPosition;","attribute vec2 aTextureCoord;","attribute vec2 aColor;","uniform vec2 projectionVector;","uniform vec2 offsetVector;","varying vec2 vTextureCoord;","varying vec4 vColor;","const vec2 center = vec2(-1.0, 1.0);","void main(void) {","   gl_Position = vec4( ((aVertexPosition + offsetVector) / projectionVector) + center , 0.0, 1.0);","   vTextureCoord = aTextureCoord;","   vec3 color = mod(vec3(aColor.y/65536.0, aColor.y/256.0, aColor.y), 256.0) / 256.0;","   vColor = vec4(color * aColor.x, aColor.x);","}"],n.PixiFastShader=function(t){this.gl=t,this.program=null,this.fragmentSrc=["precision lowp float;","varying vec2 vTextureCoord;","varying float vColor;","uniform sampler2D uSampler;","void main(void) {","   gl_FragColor = texture2D(uSampler, vTextureCoord) * vColor ;","}"],this.vertexSrc=["attribute vec2 aVertexPosition;","attribute vec2 aPositionCoord;","attribute vec2 aScale;","attribute float aRotation;","attribute vec2 aTextureCoord;","attribute float aColor;","uniform vec2 projectionVector;","uniform vec2 offsetVector;","uniform mat3 uMatrix;","varying vec2 vTextureCoord;","varying float vColor;","const vec2 center = vec2(-1.0, 1.0);","void main(void) {","   vec2 v;","   vec2 sv = aVertexPosition * aScale;","   v.x = (sv.x) * cos(aRotation) - (sv.y) * sin(aRotation);","   v.y = (sv.x) * sin(aRotation) + (sv.y) * cos(aRotation);","   v = ( uMatrix * vec3(v + aPositionCoord , 1.0) ).xy ;","   gl_Position = vec4( ( v / projectionVector) + center , 0.0, 1.0);","   vTextureCoord = aTextureCoord;","   vColor = aColor;","}"],this.textureCount=0,this.init()},n.PixiFastShader.prototype.init=function(){var t=this.gl,e=n.compileProgram(t,this.vertexSrc,this.fragmentSrc);t.useProgram(e),this.uSampler=t.getUniformLocation(e,"uSampler"),this.projectionVector=t.getUniformLocation(e,"projectionVector"),this.offsetVector=t.getUniformLocation(e,"offsetVector"),this.dimensions=t.getUniformLocation(e,"dimensions"),this.uMatrix=t.getUniformLocation(e,"uMatrix"),this.aVertexPosition=t.getAttribLocation(e,"aVertexPosition"),this.aPositionCoord=t.getAttribLocation(e,"aPositionCoord"),this.aScale=t.getAttribLocation(e,"aScale"),this.aRotation=t.getAttribLocation(e,"aRotation"),this.aTextureCoord=t.getAttribLocation(e,"aTextureCoord"),this.colorAttribute=t.getAttribLocation(e,"aColor"),-1===this.colorAttribute&&(this.colorAttribute=2),this.attributes=[this.aVertexPosition,this.aPositionCoord,this.aScale,this.aRotation,this.aTextureCoord,this.colorAttribute],this.program=e},n.PixiFastShader.prototype.destroy=function(){this.gl.deleteProgram(this.program),this.uniforms=null,this.gl=null,this.attributes=null},n.StripShader=function(){this.program=null,this.fragmentSrc=["precision mediump float;","varying vec2 vTextureCoord;","varying float vColor;","uniform float alpha;","uniform sampler2D uSampler;","void main(void) {","   gl_FragColor = texture2D(uSampler, vec2(vTextureCoord.x, vTextureCoord.y));","   gl_FragColor = gl_FragColor * alpha;","}"],this.vertexSrc=["attribute vec2 aVertexPosition;","attribute vec2 aTextureCoord;","attribute float aColor;","uniform mat3 translationMatrix;","uniform vec2 projectionVector;","varying vec2 vTextureCoord;","uniform vec2 offsetVector;","varying float vColor;","void main(void) {","   vec3 v = translationMatrix * vec3(aVertexPosition, 1.0);","   v -= offsetVector.xyx;","   gl_Position = vec4( v.x / projectionVector.x -1.0, v.y / projectionVector.y + 1.0 , 0.0, 1.0);","   vTextureCoord = aTextureCoord;","   vColor = aColor;","}"]},n.StripShader.prototype.init=function(){var t=n.gl,e=n.compileProgram(t,this.vertexSrc,this.fragmentSrc);t.useProgram(e),this.uSampler=t.getUniformLocation(e,"uSampler"),this.projectionVector=t.getUniformLocation(e,"projectionVector"),this.offsetVector=t.getUniformLocation(e,"offsetVector"),this.colorAttribute=t.getAttribLocation(e,"aColor"),this.aVertexPosition=t.getAttribLocation(e,"aVertexPosition"),this.aTextureCoord=t.getAttribLocation(e,"aTextureCoord"),this.translationMatrix=t.getUniformLocation(e,"translationMatrix"),this.alpha=t.getUniformLocation(e,"alpha"),this.program=e},n.PrimitiveShader=function(t){this.gl=t,this.program=null,this.fragmentSrc=["precision mediump float;","varying vec4 vColor;","void main(void) {","   gl_FragColor = vColor;","}"],this.vertexSrc=["attribute vec2 aVertexPosition;","attribute vec4 aColor;","uniform mat3 translationMatrix;","uniform vec2 projectionVector;","uniform vec2 offsetVector;","uniform float alpha;","uniform vec3 tint;","varying vec4 vColor;","void main(void) {","   vec3 v = translationMatrix * vec3(aVertexPosition , 1.0);","   v -= offsetVector.xyx;","   gl_Position = vec4( v.x / projectionVector.x -1.0, v.y / -projectionVector.y + 1.0 , 0.0, 1.0);","   vColor = aColor * vec4(tint * alpha, alpha);","}"],this.init()},n.PrimitiveShader.prototype.init=function(){var t=this.gl,e=n.compileProgram(t,this.vertexSrc,this.fragmentSrc);t.useProgram(e),this.projectionVector=t.getUniformLocation(e,"projectionVector"),this.offsetVector=t.getUniformLocation(e,"offsetVector"),this.tintColor=t.getUniformLocation(e,"tint"),this.aVertexPosition=t.getAttribLocation(e,"aVertexPosition"),this.colorAttribute=t.getAttribLocation(e,"aColor"),this.attributes=[this.aVertexPosition,this.colorAttribute],this.translationMatrix=t.getUniformLocation(e,"translationMatrix"),this.alpha=t.getUniformLocation(e,"alpha"),this.program=e},n.PrimitiveShader.prototype.destroy=function(){this.gl.deleteProgram(this.program),this.uniforms=null,this.gl=null,this.attribute=null},n.WebGLGraphics=function(){},n.WebGLGraphics.renderGraphics=function(t,e){var i=e.gl,r=e.projection,s=e.offset,o=e.shaderManager.primitiveShader;t._webGL[i.id]||(t._webGL[i.id]={points:[],indices:[],lastIndex:0,buffer:i.createBuffer(),indexBuffer:i.createBuffer()});var a=t._webGL[i.id];t.dirty&&(t.dirty=!1,t.clearDirty&&(t.clearDirty=!1,a.lastIndex=0,a.points=[],a.indices=[]),n.WebGLGraphics.updateGraphics(t,i)),e.shaderManager.activatePrimitiveShader(),i.blendFunc(i.ONE,i.ONE_MINUS_SRC_ALPHA),i.uniformMatrix3fv(o.translationMatrix,!1,t.worldTransform.toArray(!0)),i.uniform2f(o.projectionVector,r.x,-r.y),i.uniform2f(o.offsetVector,-s.x,-s.y),i.uniform3fv(o.tintColor,n.hex2rgb(t.tint)),i.uniform1f(o.alpha,t.worldAlpha),i.bindBuffer(i.ARRAY_BUFFER,a.buffer),i.vertexAttribPointer(o.aVertexPosition,2,i.FLOAT,!1,24,0),i.vertexAttribPointer(o.colorAttribute,4,i.FLOAT,!1,24,8),i.bindBuffer(i.ELEMENT_ARRAY_BUFFER,a.indexBuffer),i.drawElements(i.TRIANGLE_STRIP,a.indices.length,i.UNSIGNED_SHORT,0),e.shaderManager.deactivatePrimitiveShader()},n.WebGLGraphics.updateGraphics=function(t,e){for(var i=t._webGL[e.id],r=i.lastIndex;r<t.graphicsData.length;r++){var s=t.graphicsData[r];s.type===n.Graphics.POLY?(s.fill&&s.points.length>3&&n.WebGLGraphics.buildPoly(s,i),s.lineWidth>0&&n.WebGLGraphics.buildLine(s,i)):s.type===n.Graphics.RECT?n.WebGLGraphics.buildRectangle(s,i):(s.type===n.Graphics.CIRC||s.type===n.Graphics.ELIP)&&n.WebGLGraphics.buildCircle(s,i)}i.lastIndex=t.graphicsData.length,i.glPoints=new Float32Array(i.points),e.bindBuffer(e.ARRAY_BUFFER,i.buffer),e.bufferData(e.ARRAY_BUFFER,i.glPoints,e.STATIC_DRAW),i.glIndicies=new Uint16Array(i.indices),e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,i.indexBuffer),e.bufferData(e.ELEMENT_ARRAY_BUFFER,i.glIndicies,e.STATIC_DRAW)},n.WebGLGraphics.buildRectangle=function(t,e){var i=t.points,r=i[0],s=i[1],o=i[2],a=i[3];if(t.fill){var h=n.hex2rgb(t.fillColor),l=t.fillAlpha,u=h[0]*l,c=h[1]*l,d=h[2]*l,p=e.points,f=e.indices,g=p.length/6;p.push(r,s),p.push(u,c,d,l),p.push(r+o,s),p.push(u,c,d,l),p.push(r,s+a),p.push(u,c,d,l),p.push(r+o,s+a),p.push(u,c,d,l),f.push(g,g,g+1,g+2,g+3,g+3)}if(t.lineWidth){var m=t.points;t.points=[r,s,r+o,s,r+o,s+a,r,s+a,r,s],n.WebGLGraphics.buildLine(t,e),t.points=m}},n.WebGLGraphics.buildCircle=function(t,e){var i=t.points,r=i[0],s=i[1],o=i[2],a=i[3],h=40,l=2*Math.PI/h,u=0;if(t.fill){var c=n.hex2rgb(t.fillColor),d=t.fillAlpha,p=c[0]*d,f=c[1]*d,g=c[2]*d,m=e.points,v=e.indices,x=m.length/6;for(v.push(x),u=0;h+1>u;u++)m.push(r,s,p,f,g,d),m.push(r+Math.sin(l*u)*o,s+Math.cos(l*u)*a,p,f,g,d),v.push(x++,x++);v.push(x-1)}if(t.lineWidth){var y=t.points;for(t.points=[],u=0;h+1>u;u++)t.points.push(r+Math.sin(l*u)*o,s+Math.cos(l*u)*a);n.WebGLGraphics.buildLine(t,e),t.points=y}},n.WebGLGraphics.buildLine=function(t,e){var i=0,r=t.points;if(0!==r.length){if(t.lineWidth%2)for(i=0;i<r.length;i++)r[i]+=.5;var s=new n.Point(r[0],r[1]),o=new n.Point(r[r.length-2],r[r.length-1]);if(s.x===o.x&&s.y===o.y){r.pop(),r.pop(),o=new n.Point(r[r.length-2],r[r.length-1]);var a=o.x+.5*(s.x-o.x),h=o.y+.5*(s.y-o.y);r.unshift(a,h),r.push(a,h)}var l,u,c,d,p,f,g,m,v,x,y,b,T,S,C,w,A,E,M,_,R,L,F,B=e.points,D=e.indices,P=r.length/2,O=r.length,I=B.length/6,G=t.lineWidth/2,U=n.hex2rgb(t.lineColor),k=t.lineAlpha,W=U[0]*k,j=U[1]*k,N=U[2]*k;for(c=r[0],d=r[1],p=r[2],f=r[3],v=-(d-f),x=c-p,F=Math.sqrt(v*v+x*x),v/=F,x/=F,v*=G,x*=G,B.push(c-v,d-x,W,j,N,k),B.push(c+v,d+x,W,j,N,k),i=1;P-1>i;i++)c=r[2*(i-1)],d=r[2*(i-1)+1],p=r[2*i],f=r[2*i+1],g=r[2*(i+1)],m=r[2*(i+1)+1],v=-(d-f),x=c-p,F=Math.sqrt(v*v+x*x),v/=F,x/=F,v*=G,x*=G,y=-(f-m),b=p-g,F=Math.sqrt(y*y+b*b),y/=F,b/=F,y*=G,b*=G,C=-x+d-(-x+f),w=-v+p-(-v+c),A=(-v+c)*(-x+f)-(-v+p)*(-x+d),E=-b+m-(-b+f),M=-y+p-(-y+g),_=(-y+g)*(-b+f)-(-y+p)*(-b+m),R=C*M-E*w,Math.abs(R)<.1?(R+=10.1,B.push(p-v,f-x,W,j,N,k),B.push(p+v,f+x,W,j,N,k)):(l=(w*_-M*A)/R,u=(E*A-C*_)/R,L=(l-p)*(l-p)+(u-f)+(u-f),L>19600?(T=v-y,S=x-b,F=Math.sqrt(T*T+S*S),T/=F,S/=F,T*=G,S*=G,B.push(p-T,f-S),B.push(W,j,N,k),B.push(p+T,f+S),B.push(W,j,N,k),B.push(p-T,f-S),B.push(W,j,N,k),O++):(B.push(l,u),B.push(W,j,N,k),B.push(p-(l-p),f-(u-f)),B.push(W,j,N,k)));for(c=r[2*(P-2)],d=r[2*(P-2)+1],p=r[2*(P-1)],f=r[2*(P-1)+1],v=-(d-f),x=c-p,F=Math.sqrt(v*v+x*x),v/=F,x/=F,v*=G,x*=G,B.push(p-v,f-x),B.push(W,j,N,k),B.push(p+v,f+x),B.push(W,j,N,k),D.push(I),i=0;O>i;i++)D.push(I++);D.push(I-1)}},n.WebGLGraphics.buildPoly=function(t,e){var i=t.points;if(!(i.length<6)){var r=e.points,s=e.indices,o=i.length/2,a=n.hex2rgb(t.fillColor),h=t.fillAlpha,l=a[0]*h,u=a[1]*h,c=a[2]*h,d=n.PolyK.Triangulate(i),p=r.length/6,f=0;for(f=0;f<d.length;f+=3)s.push(d[f]+p),s.push(d[f]+p),s.push(d[f+1]+p),s.push(d[f+2]+p),s.push(d[f+2]+p);for(f=0;o>f;f++)r.push(i[2*f],i[2*f+1],l,u,c,h)}},n.glContexts=[],n.WebGLRenderer=function(t,e,i,r,s){n.defaultRenderer||(n.defaultRenderer=this),this.type=n.WEBGL_RENDERER,this.transparent=!!r,this.width=t||800,this.height=e||600,this.view=i||document.createElement("canvas"),this.view.width=this.width,this.view.height=this.height,this.contextLost=this.handleContextLost.bind(this),this.contextRestoredLost=this.handleContextRestored.bind(this),this.view.addEventListener("webglcontextlost",this.contextLost,!1),this.view.addEventListener("webglcontextrestored",this.contextRestoredLost,!1),this.options={alpha:this.transparent,antialias:!!s,premultipliedAlpha:!!r,stencil:!0};try{this.gl=this.view.getContext("experimental-webgl",this.options)}catch(o){try{this.gl=this.view.getContext("webgl",this.options)}catch(a){throw new Error(" This browser does not support webGL. Try using the canvas renderer"+this)}}var h=this.gl;this.glContextId=h.id=n.WebGLRenderer.glContextId++,n.glContexts[this.glContextId]=h,n.blendModesWebGL||(n.blendModesWebGL=[],n.blendModesWebGL[n.blendModes.NORMAL]=[h.ONE,h.ONE_MINUS_SRC_ALPHA],n.blendModesWebGL[n.blendModes.ADD]=[h.SRC_ALPHA,h.DST_ALPHA],n.blendModesWebGL[n.blendModes.MULTIPLY]=[h.DST_COLOR,h.ONE_MINUS_SRC_ALPHA],n.blendModesWebGL[n.blendModes.SCREEN]=[h.SRC_ALPHA,h.ONE],n.blendModesWebGL[n.blendModes.OVERLAY]=[h.ONE,h.ONE_MINUS_SRC_ALPHA],n.blendModesWebGL[n.blendModes.DARKEN]=[h.ONE,h.ONE_MINUS_SRC_ALPHA],n.blendModesWebGL[n.blendModes.LIGHTEN]=[h.ONE,h.ONE_MINUS_SRC_ALPHA],n.blendModesWebGL[n.blendModes.COLOR_DODGE]=[h.ONE,h.ONE_MINUS_SRC_ALPHA],n.blendModesWebGL[n.blendModes.COLOR_BURN]=[h.ONE,h.ONE_MINUS_SRC_ALPHA],n.blendModesWebGL[n.blendModes.HARD_LIGHT]=[h.ONE,h.ONE_MINUS_SRC_ALPHA],n.blendModesWebGL[n.blendModes.SOFT_LIGHT]=[h.ONE,h.ONE_MINUS_SRC_ALPHA],n.blendModesWebGL[n.blendModes.DIFFERENCE]=[h.ONE,h.ONE_MINUS_SRC_ALPHA],n.blendModesWebGL[n.blendModes.EXCLUSION]=[h.ONE,h.ONE_MINUS_SRC_ALPHA],n.blendModesWebGL[n.blendModes.HUE]=[h.ONE,h.ONE_MINUS_SRC_ALPHA],n.blendModesWebGL[n.blendModes.SATURATION]=[h.ONE,h.ONE_MINUS_SRC_ALPHA],n.blendModesWebGL[n.blendModes.COLOR]=[h.ONE,h.ONE_MINUS_SRC_ALPHA],n.blendModesWebGL[n.blendModes.LUMINOSITY]=[h.ONE,h.ONE_MINUS_SRC_ALPHA]),this.projection=new n.Point,this.projection.x=this.width/2,this.projection.y=-this.height/2,this.offset=new n.Point(0,0),this.resize(this.width,this.height),this.contextLost=!1,this.shaderManager=new n.WebGLShaderManager(h),this.spriteBatch=new n.WebGLSpriteBatch(h),this.maskManager=new n.WebGLMaskManager(h),this.filterManager=new n.WebGLFilterManager(h,this.transparent),this.renderSession={},this.renderSession.gl=this.gl,this.renderSession.drawCount=0,this.renderSession.shaderManager=this.shaderManager,this.renderSession.maskManager=this.maskManager,this.renderSession.filterManager=this.filterManager,this.renderSession.spriteBatch=this.spriteBatch,h.useProgram(this.shaderManager.defaultShader.program),h.disable(h.DEPTH_TEST),h.disable(h.CULL_FACE),h.enable(h.BLEND),h.colorMask(!0,!0,!0,this.transparent)},n.WebGLRenderer.prototype.constructor=n.WebGLRenderer,n.WebGLRenderer.prototype.render=function(t){if(!this.contextLost){this.__stage!==t&&(t.interactive&&t.interactionManager.removeEvents(),this.__stage=t),n.WebGLRenderer.updateTextures(),t.updateTransform();var e=this.gl;e.viewport(0,0,this.width,this.height),e.bindFramebuffer(e.FRAMEBUFFER,null),this.transparent?e.clearColor(0,0,0,0):e.clearColor(t.backgroundColorSplit[0],t.backgroundColorSplit[1],t.backgroundColorSplit[2],1),e.clear(e.COLOR_BUFFER_BIT),this.renderDisplayObject(t,this.projection),t.interactive?t._interactiveEventsAdded||(t._interactiveEventsAdded=!0,t.interactionManager.setTarget(this)):t._interactiveEventsAdded&&(t._interactiveEventsAdded=!1,t.interactionManager.setTarget(this))}},n.WebGLRenderer.prototype.renderDisplayObject=function(t,e,i){this.renderSession.drawCount=0,this.renderSession.currentBlendMode=9999,this.renderSession.projection=e,this.renderSession.offset=this.offset,this.spriteBatch.begin(this.renderSession),this.filterManager.begin(this.renderSession,i),t._renderWebGL(this.renderSession),this.spriteBatch.end()},n.WebGLRenderer.updateTextures=function(){var t=0;for(t=0;t<n.Texture.frameUpdates.length;t++)n.WebGLRenderer.updateTextureFrame(n.Texture.frameUpdates[t]);for(t=0;t<n.texturesToDestroy.length;t++)n.WebGLRenderer.destroyTexture(n.texturesToDestroy[t]);n.texturesToUpdate.length=0,n.texturesToDestroy.length=0,n.Texture.frameUpdates.length=0},n.WebGLRenderer.destroyTexture=function(t){for(var e=t._glTextures.length-1;e>=0;e--){var i=t._glTextures[e],r=n.glContexts[e];r&&i&&r.deleteTexture(i)}t._glTextures.length=0},n.WebGLRenderer.updateTextureFrame=function(t){t.updateFrame=!1,t._updateWebGLuvs()},n.WebGLRenderer.prototype.resize=function(t,e){this.width=t,this.height=e,this.view.width=t,this.view.height=e,this.gl.viewport(0,0,this.width,this.height),this.projection.x=this.width/2,this.projection.y=-this.height/2},n.createWebGLTexture=function(t,e){return t.hasLoaded&&(t._glTextures[e.id]=e.createTexture(),e.bindTexture(e.TEXTURE_2D,t._glTextures[e.id]),e.pixelStorei(e.UNPACK_PREMULTIPLY_ALPHA_WEBGL,!0),e.texImage2D(e.TEXTURE_2D,0,e.RGBA,e.RGBA,e.UNSIGNED_BYTE,t.source),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_MAG_FILTER,t.scaleMode===n.scaleModes.LINEAR?e.LINEAR:e.NEAREST),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_MIN_FILTER,t.scaleMode===n.scaleModes.LINEAR?e.LINEAR:e.NEAREST),t._powerOf2?(e.texParameteri(e.TEXTURE_2D,e.TEXTURE_WRAP_S,e.REPEAT),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_WRAP_T,e.REPEAT)):(e.texParameteri(e.TEXTURE_2D,e.TEXTURE_WRAP_S,e.CLAMP_TO_EDGE),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_WRAP_T,e.CLAMP_TO_EDGE)),e.bindTexture(e.TEXTURE_2D,null)),t._glTextures[e.id]},n.updateWebGLTexture=function(t,e){t._glTextures[e.id]&&(e.bindTexture(e.TEXTURE_2D,t._glTextures[e.id]),e.pixelStorei(e.UNPACK_PREMULTIPLY_ALPHA_WEBGL,!0),e.texImage2D(e.TEXTURE_2D,0,e.RGBA,e.RGBA,e.UNSIGNED_BYTE,t.source),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_MAG_FILTER,t.scaleMode===n.scaleModes.LINEAR?e.LINEAR:e.NEAREST),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_MIN_FILTER,t.scaleMode===n.scaleModes.LINEAR?e.LINEAR:e.NEAREST),t._powerOf2?(e.texParameteri(e.TEXTURE_2D,e.TEXTURE_WRAP_S,e.REPEAT),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_WRAP_T,e.REPEAT)):(e.texParameteri(e.TEXTURE_2D,e.TEXTURE_WRAP_S,e.CLAMP_TO_EDGE),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_WRAP_T,e.CLAMP_TO_EDGE)),e.bindTexture(e.TEXTURE_2D,null))},n.WebGLRenderer.prototype.handleContextLost=function(t){t.preventDefault(),this.contextLost=!0},n.WebGLRenderer.prototype.handleContextRestored=function(){try{this.gl=this.view.getContext("experimental-webgl",this.options)}catch(t){try{this.gl=this.view.getContext("webgl",this.options)}catch(e){throw new Error(" This browser does not support webGL. Try using the canvas renderer"+this)}}var i=this.gl;i.id=n.WebGLRenderer.glContextId++,this.shaderManager.setContext(i),this.spriteBatch.setContext(i),this.maskManager.setContext(i),this.filterManager.setContext(i),this.renderSession.gl=this.gl,i.disable(i.DEPTH_TEST),i.disable(i.CULL_FACE),i.enable(i.BLEND),i.colorMask(!0,!0,!0,this.transparent),this.gl.viewport(0,0,this.width,this.height);for(var r in n.TextureCache){var s=n.TextureCache[r].baseTexture;s._glTextures=[]}this.contextLost=!1},n.WebGLRenderer.prototype.destroy=function(){this.view.removeEventListener("webglcontextlost",this.contextLost),this.view.removeEventListener("webglcontextrestored",this.contextRestoredLost),n.glContexts[this.glContextId]=null,this.projection=null,this.offset=null,this.shaderManager.destroy(),this.spriteBatch.destroy(),this.maskManager.destroy(),this.filterManager.destroy(),this.shaderManager=null,this.spriteBatch=null,this.maskManager=null,this.filterManager=null,this.gl=null,this.renderSession=null},n.WebGLRenderer.glContextId=0,n.WebGLMaskManager=function(t){this.maskStack=[],this.maskPosition=0,this.setContext(t)},n.WebGLMaskManager.prototype.setContext=function(t){this.gl=t},n.WebGLMaskManager.prototype.pushMask=function(t,e){var i=this.gl;0===this.maskStack.length&&(i.enable(i.STENCIL_TEST),i.stencilFunc(i.ALWAYS,1,1)),this.maskStack.push(t),i.colorMask(!1,!1,!1,!0),i.stencilOp(i.KEEP,i.KEEP,i.INCR),n.WebGLGraphics.renderGraphics(t,e),i.colorMask(!0,!0,!0,!0),i.stencilFunc(i.NOTEQUAL,0,this.maskStack.length),i.stencilOp(i.KEEP,i.KEEP,i.KEEP)},n.WebGLMaskManager.prototype.popMask=function(t){var e=this.gl,i=this.maskStack.pop();i&&(e.colorMask(!1,!1,!1,!1),e.stencilOp(e.KEEP,e.KEEP,e.DECR),n.WebGLGraphics.renderGraphics(i,t),e.colorMask(!0,!0,!0,!0),e.stencilFunc(e.NOTEQUAL,0,this.maskStack.length),e.stencilOp(e.KEEP,e.KEEP,e.KEEP)),0===this.maskStack.length&&e.disable(e.STENCIL_TEST)},n.WebGLMaskManager.prototype.destroy=function(){this.maskStack=null,this.gl=null},n.WebGLShaderManager=function(t){this.maxAttibs=10,this.attribState=[],this.tempAttribState=[];for(var e=0;e<this.maxAttibs;e++)this.attribState[e]=!1;this.setContext(t)},n.WebGLShaderManager.prototype.setContext=function(t){this.gl=t,this.primitiveShader=new n.PrimitiveShader(t),this.defaultShader=new n.PixiShader(t),this.fastShader=new n.PixiFastShader(t),this.activateShader(this.defaultShader)},n.WebGLShaderManager.prototype.setAttribs=function(t){var e;for(e=0;e<this.tempAttribState.length;e++)this.tempAttribState[e]=!1;for(e=0;e<t.length;e++){var i=t[e];this.tempAttribState[i]=!0}var r=this.gl;for(e=0;e<this.attribState.length;e++)this.attribState[e]!==this.tempAttribState[e]&&(this.attribState[e]=this.tempAttribState[e],this.tempAttribState[e]?r.enableVertexAttribArray(e):r.disableVertexAttribArray(e))},n.WebGLShaderManager.prototype.activateShader=function(t){this.currentShader=t,this.gl.useProgram(t.program),this.setAttribs(t.attributes)},n.WebGLShaderManager.prototype.activatePrimitiveShader=function(){var t=this.gl;t.useProgram(this.primitiveShader.program),this.setAttribs(this.primitiveShader.attributes)},n.WebGLShaderManager.prototype.deactivatePrimitiveShader=function(){var t=this.gl;t.useProgram(this.defaultShader.program),this.setAttribs(this.defaultShader.attributes)},n.WebGLShaderManager.prototype.destroy=function(){this.attribState=null,this.tempAttribState=null,this.primitiveShader.destroy(),this.defaultShader.destroy(),this.fastShader.destroy(),this.gl=null},n.WebGLSpriteBatch=function(t){this.vertSize=6,this.size=1e4;var e=4*this.size*this.vertSize,i=6*this.size;this.vertices=new Float32Array(e),this.indices=new Uint16Array(i),this.lastIndexCount=0;for(var r=0,s=0;i>r;r+=6,s+=4)this.indices[r+0]=s+0,this.indices[r+1]=s+1,this.indices[r+2]=s+2,this.indices[r+3]=s+0,this.indices[r+4]=s+2,this.indices[r+5]=s+3;this.drawing=!1,this.currentBatchSize=0,this.currentBaseTexture=null,this.setContext(t)},n.WebGLSpriteBatch.prototype.setContext=function(t){this.gl=t,this.vertexBuffer=t.createBuffer(),this.indexBuffer=t.createBuffer(),t.bindBuffer(t.ELEMENT_ARRAY_BUFFER,this.indexBuffer),t.bufferData(t.ELEMENT_ARRAY_BUFFER,this.indices,t.STATIC_DRAW),t.bindBuffer(t.ARRAY_BUFFER,this.vertexBuffer),t.bufferData(t.ARRAY_BUFFER,this.vertices,t.DYNAMIC_DRAW),this.currentBlendMode=99999},n.WebGLSpriteBatch.prototype.begin=function(t){this.renderSession=t,this.shader=this.renderSession.shaderManager.defaultShader,this.start()},n.WebGLSpriteBatch.prototype.end=function(){this.flush()},n.WebGLSpriteBatch.prototype.render=function(t){(t.texture.baseTexture!==this.currentBaseTexture||this.currentBatchSize>=this.size)&&(this.flush(),this.currentBaseTexture=t.texture.baseTexture),t.blendMode!==this.currentBlendMode&&this.setBlendMode(t.blendMode);var e=t._uvs||t.texture._uvs;if(e){var i,r,s,n,o=t.worldAlpha,a=t.tint,h=this.vertices,l=t.texture.frame.width,u=t.texture.frame.height,c=t.anchor.x,d=t.anchor.y;if(t.texture.trim){var p=t.texture.trim;r=p.x-c*p.width,i=r+l,n=p.y-d*p.height,s=n+u}else i=l*(1-c),r=l*-c,s=u*(1-d),n=u*-d;var f=4*this.currentBatchSize*this.vertSize,g=t.worldTransform,m=g.a,v=g.c,x=g.b,y=g.d,b=g.tx,T=g.ty;h[f++]=m*r+x*n+b,h[f++]=y*n+v*r+T,h[f++]=e.x0,h[f++]=e.y0,h[f++]=o,h[f++]=a,h[f++]=m*i+x*n+b,h[f++]=y*n+v*i+T,h[f++]=e.x1,h[f++]=e.y1,h[f++]=o,h[f++]=a,h[f++]=m*i+x*s+b,h[f++]=y*s+v*i+T,h[f++]=e.x2,h[f++]=e.y2,h[f++]=o,h[f++]=a,h[f++]=m*r+x*s+b,h[f++]=y*s+v*r+T,h[f++]=e.x3,h[f++]=e.y3,h[f++]=o,h[f++]=a,this.currentBatchSize++}},n.WebGLSpriteBatch.prototype.renderTilingSprite=function(t){var e=t.tilingTexture;(e.baseTexture!==this.currentBaseTexture||this.currentBatchSize>=this.size)&&(this.flush(),this.currentBaseTexture=e.baseTexture),t.blendMode!==this.currentBlendMode&&this.setBlendMode(t.blendMode),t._uvs||(t._uvs=new n.TextureUvs);var i=t._uvs;t.tilePosition.x%=e.baseTexture.width,t.tilePosition.y%=e.baseTexture.height;var r=t.tilePosition.x/e.baseTexture.width,s=t.tilePosition.y/e.baseTexture.height,o=t.width/e.baseTexture.width/(t.tileScale.x*t.tileScaleOffset.x),a=t.height/e.baseTexture.height/(t.tileScale.y*t.tileScaleOffset.y);i.x0=0-r,i.y0=0-s,i.x1=1*o-r,i.y1=0-s,i.x2=1*o-r,i.y2=1*a-s,i.x3=0-r,i.y3=1*a-s;var h=t.worldAlpha,l=t.tint,u=this.vertices,c=t.width,d=t.height,p=t.anchor.x,f=t.anchor.y,g=c*(1-p),m=c*-p,v=d*(1-f),x=d*-f,y=4*this.currentBatchSize*this.vertSize,b=t.worldTransform,T=b.a,S=b.c,C=b.b,w=b.d,A=b.tx,E=b.ty;u[y++]=T*m+C*x+A,u[y++]=w*x+S*m+E,u[y++]=i.x0,u[y++]=i.y0,u[y++]=h,u[y++]=l,u[y++]=T*g+C*x+A,u[y++]=w*x+S*g+E,u[y++]=i.x1,u[y++]=i.y1,u[y++]=h,u[y++]=l,u[y++]=T*g+C*v+A,u[y++]=w*v+S*g+E,u[y++]=i.x2,u[y++]=i.y2,u[y++]=h,u[y++]=l,u[y++]=T*m+C*v+A,u[y++]=w*v+S*m+E,u[y++]=i.x3,u[y++]=i.y3,u[y++]=h,u[y++]=l,this.currentBatchSize++},n.WebGLSpriteBatch.prototype.flush=function(){if(0!==this.currentBatchSize){var t=this.gl;if(t.bindTexture(t.TEXTURE_2D,this.currentBaseTexture._glTextures[t.id]||n.createWebGLTexture(this.currentBaseTexture,t)),this.currentBatchSize>.5*this.size)t.bufferSubData(t.ARRAY_BUFFER,0,this.vertices);else{var e=this.vertices.subarray(0,4*this.currentBatchSize*this.vertSize);t.bufferSubData(t.ARRAY_BUFFER,0,e)}t.drawElements(t.TRIANGLES,6*this.currentBatchSize,t.UNSIGNED_SHORT,0),this.currentBatchSize=0,this.renderSession.drawCount++}},n.WebGLSpriteBatch.prototype.stop=function(){this.flush()},n.WebGLSpriteBatch.prototype.start=function(){var t=this.gl;t.activeTexture(t.TEXTURE0),t.bindBuffer(t.ARRAY_BUFFER,this.vertexBuffer),t.bindBuffer(t.ELEMENT_ARRAY_BUFFER,this.indexBuffer);var e=this.renderSession.projection;t.uniform2f(this.shader.projectionVector,e.x,e.y);var i=4*this.vertSize;t.vertexAttribPointer(this.shader.aVertexPosition,2,t.FLOAT,!1,i,0),t.vertexAttribPointer(this.shader.aTextureCoord,2,t.FLOAT,!1,i,8),t.vertexAttribPointer(this.shader.colorAttribute,2,t.FLOAT,!1,i,16),this.currentBlendMode!==n.blendModes.NORMAL&&this.setBlendMode(n.blendModes.NORMAL)},n.WebGLSpriteBatch.prototype.setBlendMode=function(t){this.flush(),this.currentBlendMode=t;
var e=n.blendModesWebGL[this.currentBlendMode];this.gl.blendFunc(e[0],e[1])},n.WebGLSpriteBatch.prototype.destroy=function(){this.vertices=null,this.indices=null,this.gl.deleteBuffer(this.vertexBuffer),this.gl.deleteBuffer(this.indexBuffer),this.currentBaseTexture=null,this.gl=null},n.WebGLFastSpriteBatch=function(t){this.vertSize=10,this.maxSize=6e3,this.size=this.maxSize;var e=4*this.size*this.vertSize,i=6*this.maxSize;this.vertices=new Float32Array(e),this.indices=new Uint16Array(i),this.vertexBuffer=null,this.indexBuffer=null,this.lastIndexCount=0;for(var r=0,s=0;i>r;r+=6,s+=4)this.indices[r+0]=s+0,this.indices[r+1]=s+1,this.indices[r+2]=s+2,this.indices[r+3]=s+0,this.indices[r+4]=s+2,this.indices[r+5]=s+3;this.drawing=!1,this.currentBatchSize=0,this.currentBaseTexture=null,this.currentBlendMode=0,this.renderSession=null,this.shader=null,this.matrix=null,this.setContext(t)},n.WebGLFastSpriteBatch.prototype.setContext=function(t){this.gl=t,this.vertexBuffer=t.createBuffer(),this.indexBuffer=t.createBuffer(),t.bindBuffer(t.ELEMENT_ARRAY_BUFFER,this.indexBuffer),t.bufferData(t.ELEMENT_ARRAY_BUFFER,this.indices,t.STATIC_DRAW),t.bindBuffer(t.ARRAY_BUFFER,this.vertexBuffer),t.bufferData(t.ARRAY_BUFFER,this.vertices,t.DYNAMIC_DRAW),this.currentBlendMode=99999},n.WebGLFastSpriteBatch.prototype.begin=function(t,e){this.renderSession=e,this.shader=this.renderSession.shaderManager.fastShader,this.matrix=t.worldTransform.toArray(!0),this.start()},n.WebGLFastSpriteBatch.prototype.end=function(){this.flush()},n.WebGLFastSpriteBatch.prototype.render=function(t){var e=t.children,i=e[0];if(i.texture._uvs){this.currentBaseTexture=i.texture.baseTexture,i.blendMode!==this.currentBlendMode&&this.setBlendMode(i.blendMode);for(var r=0,s=e.length;s>r;r++)this.renderSprite(e[r]);this.flush()}},n.WebGLFastSpriteBatch.prototype.renderSprite=function(t){if(t.texture.baseTexture===this.currentBaseTexture||(this.flush(),this.currentBaseTexture=t.texture.baseTexture,t.texture._uvs)){var e,i,r,s,n,o,a,h,l=this.vertices;if(e=t.texture._uvs,i=t.texture.frame.width,r=t.texture.frame.height,t.texture.trim){var u=t.texture.trim;n=u.x-t.anchor.x*u.width,s=n+t.texture.frame.width,a=u.y-t.anchor.y*u.height,o=a+t.texture.frame.height}else s=t.texture.frame.width*(1-t.anchor.x),n=t.texture.frame.width*-t.anchor.x,o=t.texture.frame.height*(1-t.anchor.y),a=t.texture.frame.height*-t.anchor.y;h=4*this.currentBatchSize*this.vertSize,l[h++]=n,l[h++]=a,l[h++]=t.position.x,l[h++]=t.position.y,l[h++]=t.scale.x,l[h++]=t.scale.y,l[h++]=t.rotation,l[h++]=e.x0,l[h++]=e.y1,l[h++]=t.alpha,l[h++]=s,l[h++]=a,l[h++]=t.position.x,l[h++]=t.position.y,l[h++]=t.scale.x,l[h++]=t.scale.y,l[h++]=t.rotation,l[h++]=e.x1,l[h++]=e.y1,l[h++]=t.alpha,l[h++]=s,l[h++]=o,l[h++]=t.position.x,l[h++]=t.position.y,l[h++]=t.scale.x,l[h++]=t.scale.y,l[h++]=t.rotation,l[h++]=e.x2,l[h++]=e.y2,l[h++]=t.alpha,l[h++]=n,l[h++]=o,l[h++]=t.position.x,l[h++]=t.position.y,l[h++]=t.scale.x,l[h++]=t.scale.y,l[h++]=t.rotation,l[h++]=e.x3,l[h++]=e.y3,l[h++]=t.alpha,this.currentBatchSize++,this.currentBatchSize>=this.size&&this.flush()}},n.WebGLFastSpriteBatch.prototype.flush=function(){if(0!==this.currentBatchSize){var t=this.gl;if(this.currentBaseTexture._glTextures[t.id]||n.createWebGLTexture(this.currentBaseTexture,t),t.bindTexture(t.TEXTURE_2D,this.currentBaseTexture._glTextures[t.id]),this.currentBatchSize>.5*this.size)t.bufferSubData(t.ARRAY_BUFFER,0,this.vertices);else{var e=this.vertices.subarray(0,4*this.currentBatchSize*this.vertSize);t.bufferSubData(t.ARRAY_BUFFER,0,e)}t.drawElements(t.TRIANGLES,6*this.currentBatchSize,t.UNSIGNED_SHORT,0),this.currentBatchSize=0,this.renderSession.drawCount++}},n.WebGLFastSpriteBatch.prototype.stop=function(){this.flush()},n.WebGLFastSpriteBatch.prototype.start=function(){var t=this.gl;t.activeTexture(t.TEXTURE0),t.bindBuffer(t.ARRAY_BUFFER,this.vertexBuffer),t.bindBuffer(t.ELEMENT_ARRAY_BUFFER,this.indexBuffer);var e=this.renderSession.projection;t.uniform2f(this.shader.projectionVector,e.x,e.y),t.uniformMatrix3fv(this.shader.uMatrix,!1,this.matrix);var i=4*this.vertSize;t.vertexAttribPointer(this.shader.aVertexPosition,2,t.FLOAT,!1,i,0),t.vertexAttribPointer(this.shader.aPositionCoord,2,t.FLOAT,!1,i,8),t.vertexAttribPointer(this.shader.aScale,2,t.FLOAT,!1,i,16),t.vertexAttribPointer(this.shader.aRotation,1,t.FLOAT,!1,i,24),t.vertexAttribPointer(this.shader.aTextureCoord,2,t.FLOAT,!1,i,28),t.vertexAttribPointer(this.shader.colorAttribute,1,t.FLOAT,!1,i,36),this.currentBlendMode!==n.blendModes.NORMAL&&this.setBlendMode(n.blendModes.NORMAL)},n.WebGLFastSpriteBatch.prototype.setBlendMode=function(t){this.flush(),this.currentBlendMode=t;var e=n.blendModesWebGL[this.currentBlendMode];this.gl.blendFunc(e[0],e[1])},n.WebGLFilterManager=function(t,e){this.transparent=e,this.filterStack=[],this.offsetX=0,this.offsetY=0,this.setContext(t)},n.WebGLFilterManager.prototype.setContext=function(t){this.gl=t,this.texturePool=[],this.initShaderBuffers()},n.WebGLFilterManager.prototype.begin=function(t,e){this.renderSession=t,this.defaultShader=t.shaderManager.defaultShader;var i=this.renderSession.projection;this.width=2*i.x,this.height=2*-i.y,this.buffer=e},n.WebGLFilterManager.prototype.pushFilter=function(t){var e=this.gl,i=this.renderSession.projection,r=this.renderSession.offset;this.filterStack.push(t);var s=t.filterPasses[0];this.offsetX+=t.target.filterArea.x,this.offsetY+=t.target.filterArea.y;var o=this.texturePool.pop();o?o.resize(this.width,this.height):o=new n.FilterTexture(this.gl,this.width,this.height),e.bindTexture(e.TEXTURE_2D,o.texture),t.target.filterArea=t.target.getBounds();var a=t.target.filterArea,h=s.padding;a.x-=h,a.y-=h,a.width+=2*h,a.height+=2*h,a.x<0&&(a.x=0),a.width>this.width&&(a.width=this.width),a.y<0&&(a.y=0),a.height>this.height&&(a.height=this.height),e.bindFramebuffer(e.FRAMEBUFFER,o.frameBuffer),e.viewport(0,0,a.width,a.height),i.x=a.width/2,i.y=-a.height/2,r.x=-a.x,r.y=-a.y,e.uniform2f(this.defaultShader.projectionVector,a.width/2,-a.height/2),e.uniform2f(this.defaultShader.offsetVector,-a.x,-a.y),e.colorMask(!0,!0,!0,!0),e.clearColor(0,0,0,0),e.clear(e.COLOR_BUFFER_BIT),t._glFilterTexture=o},n.WebGLFilterManager.prototype.popFilter=function(){var t=this.gl,e=this.filterStack.pop(),i=e.target.filterArea,r=e._glFilterTexture,s=this.renderSession.projection,o=this.renderSession.offset;if(e.filterPasses.length>1){t.viewport(0,0,i.width,i.height),t.bindBuffer(t.ARRAY_BUFFER,this.vertexBuffer),this.vertexArray[0]=0,this.vertexArray[1]=i.height,this.vertexArray[2]=i.width,this.vertexArray[3]=i.height,this.vertexArray[4]=0,this.vertexArray[5]=0,this.vertexArray[6]=i.width,this.vertexArray[7]=0,t.bufferSubData(t.ARRAY_BUFFER,0,this.vertexArray),t.bindBuffer(t.ARRAY_BUFFER,this.uvBuffer),this.uvArray[2]=i.width/this.width,this.uvArray[5]=i.height/this.height,this.uvArray[6]=i.width/this.width,this.uvArray[7]=i.height/this.height,t.bufferSubData(t.ARRAY_BUFFER,0,this.uvArray);var a=r,h=this.texturePool.pop();h||(h=new n.FilterTexture(this.gl,this.width,this.height)),t.bindFramebuffer(t.FRAMEBUFFER,h.frameBuffer),t.clear(t.COLOR_BUFFER_BIT),t.disable(t.BLEND);for(var l=0;l<e.filterPasses.length-1;l++){var u=e.filterPasses[l];t.bindFramebuffer(t.FRAMEBUFFER,h.frameBuffer),t.activeTexture(t.TEXTURE0),t.bindTexture(t.TEXTURE_2D,a.texture),this.applyFilterPass(u,i,i.width,i.height);var c=a;a=h,h=c}t.enable(t.BLEND),r=a,this.texturePool.push(h)}var d=e.filterPasses[e.filterPasses.length-1];this.offsetX-=i.x,this.offsetY-=i.y;var p=this.width,f=this.height,g=0,m=0,v=this.buffer;if(0===this.filterStack.length)t.colorMask(!0,!0,!0,this.transparent);else{var x=this.filterStack[this.filterStack.length-1];i=x.target.filterArea,p=i.width,f=i.height,g=i.x,m=i.y,v=x._glFilterTexture.frameBuffer}s.x=p/2,s.y=-f/2,o.x=g,o.y=m,i=e.target.filterArea;var y=i.x-g,b=i.y-m;t.bindBuffer(t.ARRAY_BUFFER,this.vertexBuffer),this.vertexArray[0]=y,this.vertexArray[1]=b+i.height,this.vertexArray[2]=y+i.width,this.vertexArray[3]=b+i.height,this.vertexArray[4]=y,this.vertexArray[5]=b,this.vertexArray[6]=y+i.width,this.vertexArray[7]=b,t.bufferSubData(t.ARRAY_BUFFER,0,this.vertexArray),t.bindBuffer(t.ARRAY_BUFFER,this.uvBuffer),this.uvArray[2]=i.width/this.width,this.uvArray[5]=i.height/this.height,this.uvArray[6]=i.width/this.width,this.uvArray[7]=i.height/this.height,t.bufferSubData(t.ARRAY_BUFFER,0,this.uvArray),t.viewport(0,0,p,f),t.bindFramebuffer(t.FRAMEBUFFER,v),t.activeTexture(t.TEXTURE0),t.bindTexture(t.TEXTURE_2D,r.texture),this.applyFilterPass(d,i,p,f),t.useProgram(this.defaultShader.program),t.uniform2f(this.defaultShader.projectionVector,p/2,-f/2),t.uniform2f(this.defaultShader.offsetVector,-g,-m),this.texturePool.push(r),e._glFilterTexture=null},n.WebGLFilterManager.prototype.applyFilterPass=function(t,e,i,r){var s=this.gl,o=t.shaders[s.id];o||(o=new n.PixiShader(s),o.fragmentSrc=t.fragmentSrc,o.uniforms=t.uniforms,o.init(),t.shaders[s.id]=o),s.useProgram(o.program),s.uniform2f(o.projectionVector,i/2,-r/2),s.uniform2f(o.offsetVector,0,0),t.uniforms.dimensions&&(t.uniforms.dimensions.value[0]=this.width,t.uniforms.dimensions.value[1]=this.height,t.uniforms.dimensions.value[2]=this.vertexArray[0],t.uniforms.dimensions.value[3]=this.vertexArray[5]),o.syncUniforms(),s.bindBuffer(s.ARRAY_BUFFER,this.vertexBuffer),s.vertexAttribPointer(o.aVertexPosition,2,s.FLOAT,!1,0,0),s.bindBuffer(s.ARRAY_BUFFER,this.uvBuffer),s.vertexAttribPointer(o.aTextureCoord,2,s.FLOAT,!1,0,0),s.bindBuffer(s.ARRAY_BUFFER,this.colorBuffer),s.vertexAttribPointer(o.colorAttribute,2,s.FLOAT,!1,0,0),s.bindBuffer(s.ELEMENT_ARRAY_BUFFER,this.indexBuffer),s.drawElements(s.TRIANGLES,6,s.UNSIGNED_SHORT,0),this.renderSession.drawCount++},n.WebGLFilterManager.prototype.initShaderBuffers=function(){var t=this.gl;this.vertexBuffer=t.createBuffer(),this.uvBuffer=t.createBuffer(),this.colorBuffer=t.createBuffer(),this.indexBuffer=t.createBuffer(),this.vertexArray=new Float32Array([0,0,1,0,0,1,1,1]),t.bindBuffer(t.ARRAY_BUFFER,this.vertexBuffer),t.bufferData(t.ARRAY_BUFFER,this.vertexArray,t.STATIC_DRAW),this.uvArray=new Float32Array([0,0,1,0,0,1,1,1]),t.bindBuffer(t.ARRAY_BUFFER,this.uvBuffer),t.bufferData(t.ARRAY_BUFFER,this.uvArray,t.STATIC_DRAW),this.colorArray=new Float32Array([1,16777215,1,16777215,1,16777215,1,16777215]),t.bindBuffer(t.ARRAY_BUFFER,this.colorBuffer),t.bufferData(t.ARRAY_BUFFER,this.colorArray,t.STATIC_DRAW),t.bindBuffer(t.ELEMENT_ARRAY_BUFFER,this.indexBuffer),t.bufferData(t.ELEMENT_ARRAY_BUFFER,new Uint16Array([0,1,2,1,3,2]),t.STATIC_DRAW)},n.WebGLFilterManager.prototype.destroy=function(){var t=this.gl;this.filterStack=null,this.offsetX=0,this.offsetY=0;for(var e=0;e<this.texturePool.length;e++)this.texturePool.destroy();this.texturePool=null,t.deleteBuffer(this.vertexBuffer),t.deleteBuffer(this.uvBuffer),t.deleteBuffer(this.colorBuffer),t.deleteBuffer(this.indexBuffer)},n.FilterTexture=function(t,e,i){this.gl=t,this.frameBuffer=t.createFramebuffer(),this.texture=t.createTexture(),t.bindTexture(t.TEXTURE_2D,this.texture),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_MAG_FILTER,t.LINEAR),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_MIN_FILTER,t.LINEAR),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_WRAP_S,t.CLAMP_TO_EDGE),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_WRAP_T,t.CLAMP_TO_EDGE),t.bindFramebuffer(t.FRAMEBUFFER,this.framebuffer),t.bindFramebuffer(t.FRAMEBUFFER,this.frameBuffer),t.framebufferTexture2D(t.FRAMEBUFFER,t.COLOR_ATTACHMENT0,t.TEXTURE_2D,this.texture,0),this.resize(e,i)},n.FilterTexture.prototype.clear=function(){var t=this.gl;t.clearColor(0,0,0,0),t.clear(t.COLOR_BUFFER_BIT)},n.FilterTexture.prototype.resize=function(t,e){if(this.width!==t||this.height!==e){this.width=t,this.height=e;var i=this.gl;i.bindTexture(i.TEXTURE_2D,this.texture),i.texImage2D(i.TEXTURE_2D,0,i.RGBA,t,e,0,i.RGBA,i.UNSIGNED_BYTE,null)}},n.FilterTexture.prototype.destroy=function(){var t=this.gl;t.deleteFramebuffer(this.frameBuffer),t.deleteTexture(this.texture),this.frameBuffer=null,this.texture=null},n.CanvasMaskManager=function(){},n.CanvasMaskManager.prototype.pushMask=function(t,e){e.save();var i=t.alpha,r=t.worldTransform;e.setTransform(r.a,r.c,r.b,r.d,r.tx,r.ty),n.CanvasGraphics.renderGraphicsMask(t,e),e.clip(),t.worldAlpha=i},n.CanvasMaskManager.prototype.popMask=function(t){t.restore()},n.CanvasTinter=function(){},n.CanvasTinter.getTintedTexture=function(t,e){var i=t.texture;e=n.CanvasTinter.roundColor(e);var r="#"+("00000"+(0|e).toString(16)).substr(-6);if(i.tintCache=i.tintCache||{},i.tintCache[r])return i.tintCache[r];var s=n.CanvasTinter.canvas||document.createElement("canvas");if(n.CanvasTinter.tintMethod(i,e,s),n.CanvasTinter.convertTintToImage){var o=new Image;o.src=s.toDataURL(),i.tintCache[r]=o}else i.tintCache[r]=s,n.CanvasTinter.canvas=null;return s},n.CanvasTinter.tintWithMultiply=function(t,e,i){var r=i.getContext("2d"),s=t.frame;i.width=s.width,i.height=s.height,r.fillStyle="#"+("00000"+(0|e).toString(16)).substr(-6),r.fillRect(0,0,s.width,s.height),r.globalCompositeOperation="multiply",r.drawImage(t.baseTexture.source,s.x,s.y,s.width,s.height,0,0,s.width,s.height),r.globalCompositeOperation="destination-atop",r.drawImage(t.baseTexture.source,s.x,s.y,s.width,s.height,0,0,s.width,s.height)},n.CanvasTinter.tintWithOverlay=function(t,e,i){var r=i.getContext("2d"),s=t.frame;i.width=s.width,i.height=s.height,r.globalCompositeOperation="copy",r.fillStyle="#"+("00000"+(0|e).toString(16)).substr(-6),r.fillRect(0,0,s.width,s.height),r.globalCompositeOperation="destination-atop",r.drawImage(t.baseTexture.source,s.x,s.y,s.width,s.height,0,0,s.width,s.height)},n.CanvasTinter.tintWithPerPixel=function(t,e,i){var r=i.getContext("2d"),s=t.frame;i.width=s.width,i.height=s.height,r.globalCompositeOperation="copy",r.drawImage(t.baseTexture.source,s.x,s.y,s.width,s.height,0,0,s.width,s.height);for(var o=n.hex2rgb(e),a=o[0],h=o[1],l=o[2],u=r.getImageData(0,0,s.width,s.height),c=u.data,d=0;d<c.length;d+=4)c[d+0]*=a,c[d+1]*=h,c[d+2]*=l;r.putImageData(u,0,0)},n.CanvasTinter.roundColor=function(t){var e=n.CanvasTinter.cacheStepsPerColorChannel,i=n.hex2rgb(t);return i[0]=Math.min(255,i[0]/e*e),i[1]=Math.min(255,i[1]/e*e),i[2]=Math.min(255,i[2]/e*e),n.rgb2hex(i)},n.CanvasTinter.cacheStepsPerColorChannel=8,n.CanvasTinter.convertTintToImage=!1,n.CanvasTinter.canUseMultiply=n.canUseNewCanvasBlendModes(),n.CanvasTinter.tintMethod=n.CanvasTinter.canUseMultiply?n.CanvasTinter.tintWithMultiply:n.CanvasTinter.tintWithPerPixel,n.CanvasRenderer=function(t,e,i,r){n.defaultRenderer=n.defaultRenderer||this,this.type=n.CANVAS_RENDERER,this.clearBeforeRender=!0,this.roundPixels=!1,this.transparent=!!r,n.blendModesCanvas||(n.blendModesCanvas=[],n.canUseNewCanvasBlendModes()?(n.blendModesCanvas[n.blendModes.NORMAL]="source-over",n.blendModesCanvas[n.blendModes.ADD]="lighter",n.blendModesCanvas[n.blendModes.MULTIPLY]="multiply",n.blendModesCanvas[n.blendModes.SCREEN]="screen",n.blendModesCanvas[n.blendModes.OVERLAY]="overlay",n.blendModesCanvas[n.blendModes.DARKEN]="darken",n.blendModesCanvas[n.blendModes.LIGHTEN]="lighten",n.blendModesCanvas[n.blendModes.COLOR_DODGE]="color-dodge",n.blendModesCanvas[n.blendModes.COLOR_BURN]="color-burn",n.blendModesCanvas[n.blendModes.HARD_LIGHT]="hard-light",n.blendModesCanvas[n.blendModes.SOFT_LIGHT]="soft-light",n.blendModesCanvas[n.blendModes.DIFFERENCE]="difference",n.blendModesCanvas[n.blendModes.EXCLUSION]="exclusion",n.blendModesCanvas[n.blendModes.HUE]="hue",n.blendModesCanvas[n.blendModes.SATURATION]="saturation",n.blendModesCanvas[n.blendModes.COLOR]="color",n.blendModesCanvas[n.blendModes.LUMINOSITY]="luminosity"):(n.blendModesCanvas[n.blendModes.NORMAL]="source-over",n.blendModesCanvas[n.blendModes.ADD]="lighter",n.blendModesCanvas[n.blendModes.MULTIPLY]="source-over",n.blendModesCanvas[n.blendModes.SCREEN]="source-over",n.blendModesCanvas[n.blendModes.OVERLAY]="source-over",n.blendModesCanvas[n.blendModes.DARKEN]="source-over",n.blendModesCanvas[n.blendModes.LIGHTEN]="source-over",n.blendModesCanvas[n.blendModes.COLOR_DODGE]="source-over",n.blendModesCanvas[n.blendModes.COLOR_BURN]="source-over",n.blendModesCanvas[n.blendModes.HARD_LIGHT]="source-over",n.blendModesCanvas[n.blendModes.SOFT_LIGHT]="source-over",n.blendModesCanvas[n.blendModes.DIFFERENCE]="source-over",n.blendModesCanvas[n.blendModes.EXCLUSION]="source-over",n.blendModesCanvas[n.blendModes.HUE]="source-over",n.blendModesCanvas[n.blendModes.SATURATION]="source-over",n.blendModesCanvas[n.blendModes.COLOR]="source-over",n.blendModesCanvas[n.blendModes.LUMINOSITY]="source-over")),this.width=t||800,this.height=e||600,this.view=i||document.createElement("canvas"),this.context=this.view.getContext("2d",{alpha:this.transparent}),this.refresh=!0,this.view.width=this.width,this.view.height=this.height,this.count=0,this.maskManager=new n.CanvasMaskManager,this.renderSession={context:this.context,maskManager:this.maskManager,scaleMode:null,smoothProperty:null},"imageSmoothingEnabled"in this.context?this.renderSession.smoothProperty="imageSmoothingEnabled":"webkitImageSmoothingEnabled"in this.context?this.renderSession.smoothProperty="webkitImageSmoothingEnabled":"mozImageSmoothingEnabled"in this.context?this.renderSession.smoothProperty="mozImageSmoothingEnabled":"oImageSmoothingEnabled"in this.context&&(this.renderSession.smoothProperty="oImageSmoothingEnabled")},n.CanvasRenderer.prototype.constructor=n.CanvasRenderer,n.CanvasRenderer.prototype.render=function(t){n.texturesToUpdate.length=0,n.texturesToDestroy.length=0,t.updateTransform(),this.context.setTransform(1,0,0,1,0,0),this.context.globalAlpha=1,!this.transparent&&this.clearBeforeRender?(this.context.fillStyle=t.backgroundColorString,this.context.fillRect(0,0,this.width,this.height)):this.transparent&&this.clearBeforeRender&&this.context.clearRect(0,0,this.width,this.height),this.renderDisplayObject(t),t.interactive&&(t._interactiveEventsAdded||(t._interactiveEventsAdded=!0,t.interactionManager.setTarget(this))),n.Texture.frameUpdates.length>0&&(n.Texture.frameUpdates.length=0)},n.CanvasRenderer.prototype.resize=function(t,e){this.width=t,this.height=e,this.view.width=t,this.view.height=e},n.CanvasRenderer.prototype.renderDisplayObject=function(t,e){this.renderSession.context=e||this.context,t._renderCanvas(this.renderSession)},n.CanvasRenderer.prototype.renderStripFlat=function(t){var e=this.context,i=t.verticies,r=i.length/2;this.count++,e.beginPath();for(var s=1;r-2>s;s++){var n=2*s,o=i[n],a=i[n+2],h=i[n+4],l=i[n+1],u=i[n+3],c=i[n+5];e.moveTo(o,l),e.lineTo(a,u),e.lineTo(h,c)}e.fillStyle="#FF0000",e.fill(),e.closePath()},n.CanvasRenderer.prototype.renderStrip=function(t){var e=this.context,i=t.verticies,r=t.uvs,s=i.length/2;this.count++;for(var n=1;s-2>n;n++){var o=2*n,a=i[o],h=i[o+2],l=i[o+4],u=i[o+1],c=i[o+3],d=i[o+5],p=r[o]*t.texture.width,f=r[o+2]*t.texture.width,g=r[o+4]*t.texture.width,m=r[o+1]*t.texture.height,v=r[o+3]*t.texture.height,x=r[o+5]*t.texture.height;e.save(),e.beginPath(),e.moveTo(a,u),e.lineTo(h,c),e.lineTo(l,d),e.closePath(),e.clip();var y=p*v+m*g+f*x-v*g-m*f-p*x,b=a*v+m*l+h*x-v*l-m*h-a*x,T=p*h+a*g+f*l-h*g-a*f-p*l,S=p*v*l+m*h*g+a*f*x-a*v*g-m*f*l-p*h*x,C=u*v+m*d+c*x-v*d-m*c-u*x,w=p*c+u*g+f*d-c*g-u*f-p*d,A=p*v*d+m*c*g+u*f*x-u*v*g-m*f*d-p*c*x;e.transform(b/y,C/y,T/y,w/y,S/y,A/y),e.drawImage(t.texture.baseTexture.source,0,0),e.restore()}},n.CanvasBuffer=function(t,e){this.width=t,this.height=e,this.canvas=document.createElement("canvas"),this.context=this.canvas.getContext("2d"),this.canvas.width=t,this.canvas.height=e},n.CanvasBuffer.prototype.clear=function(){this.context.clearRect(0,0,this.width,this.height)},n.CanvasBuffer.prototype.resize=function(t,e){this.width=this.canvas.width=t,this.height=this.canvas.height=e},n.CanvasGraphics=function(){},n.CanvasGraphics.renderGraphics=function(t,e){for(var i=t.worldAlpha,r="",s=0;s<t.graphicsData.length;s++){var o=t.graphicsData[s],a=o.points;if(e.strokeStyle=r="#"+("00000"+(0|o.lineColor).toString(16)).substr(-6),e.lineWidth=o.lineWidth,o.type===n.Graphics.POLY){e.beginPath(),e.moveTo(a[0],a[1]);for(var h=1;h<a.length/2;h++)e.lineTo(a[2*h],a[2*h+1]);a[0]===a[a.length-2]&&a[1]===a[a.length-1]&&e.closePath(),o.fill&&(e.globalAlpha=o.fillAlpha*i,e.fillStyle=r="#"+("00000"+(0|o.fillColor).toString(16)).substr(-6),e.fill()),o.lineWidth&&(e.globalAlpha=o.lineAlpha*i,e.stroke())}else if(o.type===n.Graphics.RECT)(o.fillColor||0===o.fillColor)&&(e.globalAlpha=o.fillAlpha*i,e.fillStyle=r="#"+("00000"+(0|o.fillColor).toString(16)).substr(-6),e.fillRect(a[0],a[1],a[2],a[3])),o.lineWidth&&(e.globalAlpha=o.lineAlpha*i,e.strokeRect(a[0],a[1],a[2],a[3]));else if(o.type===n.Graphics.CIRC)e.beginPath(),e.arc(a[0],a[1],a[2],0,2*Math.PI),e.closePath(),o.fill&&(e.globalAlpha=o.fillAlpha*i,e.fillStyle=r="#"+("00000"+(0|o.fillColor).toString(16)).substr(-6),e.fill()),o.lineWidth&&(e.globalAlpha=o.lineAlpha*i,e.stroke());else if(o.type===n.Graphics.ELIP){var l=o.points,u=2*l[2],c=2*l[3],d=l[0]-u/2,p=l[1]-c/2;e.beginPath();var f=.5522848,g=u/2*f,m=c/2*f,v=d+u,x=p+c,y=d+u/2,b=p+c/2;e.moveTo(d,b),e.bezierCurveTo(d,b-m,y-g,p,y,p),e.bezierCurveTo(y+g,p,v,b-m,v,b),e.bezierCurveTo(v,b+m,y+g,x,y,x),e.bezierCurveTo(y-g,x,d,b+m,d,b),e.closePath(),o.fill&&(e.globalAlpha=o.fillAlpha*i,e.fillStyle=r="#"+("00000"+(0|o.fillColor).toString(16)).substr(-6),e.fill()),o.lineWidth&&(e.globalAlpha=o.lineAlpha*i,e.stroke())}}},n.CanvasGraphics.renderGraphicsMask=function(t,e){var i=t.graphicsData.length;if(0!==i){i>1&&(i=1,window.console.log("Pixi.js warning: masks in canvas can only mask using the first path in the graphics object"));for(var r=0;1>r;r++){var s=t.graphicsData[r],o=s.points;if(s.type===n.Graphics.POLY){e.beginPath(),e.moveTo(o[0],o[1]);for(var a=1;a<o.length/2;a++)e.lineTo(o[2*a],o[2*a+1]);o[0]===o[o.length-2]&&o[1]===o[o.length-1]&&e.closePath()}else if(s.type===n.Graphics.RECT)e.beginPath(),e.rect(o[0],o[1],o[2],o[3]),e.closePath();else if(s.type===n.Graphics.CIRC)e.beginPath(),e.arc(o[0],o[1],o[2],0,2*Math.PI),e.closePath();else if(s.type===n.Graphics.ELIP){var h=s.points,l=2*h[2],u=2*h[3],c=h[0]-l/2,d=h[1]-u/2;e.beginPath();var p=.5522848,f=l/2*p,g=u/2*p,m=c+l,v=d+u,x=c+l/2,y=d+u/2;e.moveTo(c,y),e.bezierCurveTo(c,y-g,x-f,d,x,d),e.bezierCurveTo(x+f,d,m,y-g,m,y),e.bezierCurveTo(m,y+g,x+f,v,x,v),e.bezierCurveTo(x-f,v,c,y+g,c,y),e.closePath()}}}},n.Graphics=function(){n.DisplayObjectContainer.call(this),this.renderable=!0,this.fillAlpha=1,this.lineWidth=0,this.lineColor="black",this.graphicsData=[],this.tint=16777215,this.blendMode=n.blendModes.NORMAL,this.currentPath={points:[]},this._webGL=[],this.isMask=!1,this.bounds=null,this.boundsPadding=10},n.Graphics.prototype=Object.create(n.DisplayObjectContainer.prototype),n.Graphics.prototype.constructor=n.Graphics,Object.defineProperty(n.Graphics.prototype,"cacheAsBitmap",{get:function(){return this._cacheAsBitmap},set:function(t){this._cacheAsBitmap=t,this._cacheAsBitmap?this._generateCachedSprite():(this.destroyCachedSprite(),this.dirty=!0)}}),n.Graphics.prototype.lineStyle=function(t,e,i){return this.currentPath.points.length||this.graphicsData.pop(),this.lineWidth=t||0,this.lineColor=e||0,this.lineAlpha=arguments.length<3?1:i,this.currentPath={lineWidth:this.lineWidth,lineColor:this.lineColor,lineAlpha:this.lineAlpha,fillColor:this.fillColor,fillAlpha:this.fillAlpha,fill:this.filling,points:[],type:n.Graphics.POLY},this.graphicsData.push(this.currentPath),this},n.Graphics.prototype.moveTo=function(t,e){return this.currentPath.points.length||this.graphicsData.pop(),this.currentPath=this.currentPath={lineWidth:this.lineWidth,lineColor:this.lineColor,lineAlpha:this.lineAlpha,fillColor:this.fillColor,fillAlpha:this.fillAlpha,fill:this.filling,points:[],type:n.Graphics.POLY},this.currentPath.points.push(t,e),this.graphicsData.push(this.currentPath),this},n.Graphics.prototype.lineTo=function(t,e){return this.currentPath.points.push(t,e),this.dirty=!0,this},n.Graphics.prototype.beginFill=function(t,e){return this.filling=!0,this.fillColor=t||0,this.fillAlpha=arguments.length<2?1:e,this},n.Graphics.prototype.endFill=function(){return this.filling=!1,this.fillColor=null,this.fillAlpha=1,this},n.Graphics.prototype.drawRect=function(t,e,i,r){return this.currentPath.points.length||this.graphicsData.pop(),this.currentPath={lineWidth:this.lineWidth,lineColor:this.lineColor,lineAlpha:this.lineAlpha,fillColor:this.fillColor,fillAlpha:this.fillAlpha,fill:this.filling,points:[t,e,i,r],type:n.Graphics.RECT},this.graphicsData.push(this.currentPath),this.dirty=!0,this},n.Graphics.prototype.drawCircle=function(t,e,i){return this.currentPath.points.length||this.graphicsData.pop(),this.currentPath={lineWidth:this.lineWidth,lineColor:this.lineColor,lineAlpha:this.lineAlpha,fillColor:this.fillColor,fillAlpha:this.fillAlpha,fill:this.filling,points:[t,e,i,i],type:n.Graphics.CIRC},this.graphicsData.push(this.currentPath),this.dirty=!0,this},n.Graphics.prototype.drawEllipse=function(t,e,i,r){return this.currentPath.points.length||this.graphicsData.pop(),this.currentPath={lineWidth:this.lineWidth,lineColor:this.lineColor,lineAlpha:this.lineAlpha,fillColor:this.fillColor,fillAlpha:this.fillAlpha,fill:this.filling,points:[t,e,i,r],type:n.Graphics.ELIP},this.graphicsData.push(this.currentPath),this.dirty=!0,this},n.Graphics.prototype.clear=function(){return this.lineWidth=0,this.filling=!1,this.dirty=!0,this.clearDirty=!0,this.graphicsData=[],this.bounds=null,this},n.Graphics.prototype.generateTexture=function(){var t=this.getBounds(),e=new n.CanvasBuffer(t.width,t.height),i=n.Texture.fromCanvas(e.canvas);return e.context.translate(-t.x,-t.y),n.CanvasGraphics.renderGraphics(this,e.context),i},n.Graphics.prototype._renderWebGL=function(t){if(this.visible!==!1&&0!==this.alpha&&this.isMask!==!0){if(this._cacheAsBitmap)return this.dirty&&(this._generateCachedSprite(),n.updateWebGLTexture(this._cachedSprite.texture.baseTexture,t.gl),this.dirty=!1),n.Sprite.prototype._renderWebGL.call(this._cachedSprite,t),void 0;if(t.spriteBatch.stop(),this._mask&&t.maskManager.pushMask(this.mask,t),this._filters&&t.filterManager.pushFilter(this._filterBlock),this.blendMode!==t.spriteBatch.currentBlendMode){t.spriteBatch.currentBlendMode=this.blendMode;var e=n.blendModesWebGL[t.spriteBatch.currentBlendMode];t.spriteBatch.gl.blendFunc(e[0],e[1])}if(n.WebGLGraphics.renderGraphics(this,t),this.children.length){t.spriteBatch.start();for(var i=0,r=this.children.length;r>i;i++)this.children[i]._renderWebGL(t);t.spriteBatch.stop()}this._filters&&t.filterManager.popFilter(),this._mask&&t.maskManager.popMask(t),t.drawCount++,t.spriteBatch.start()}},n.Graphics.prototype._renderCanvas=function(t){if(this.visible!==!1&&0!==this.alpha&&this.isMask!==!0){var e=t.context,i=this.worldTransform;this.blendMode!==t.currentBlendMode&&(t.currentBlendMode=this.blendMode,e.globalCompositeOperation=n.blendModesCanvas[t.currentBlendMode]),e.setTransform(i.a,i.c,i.b,i.d,i.tx,i.ty),n.CanvasGraphics.renderGraphics(this,e);for(var r=0,s=this.children.length;s>r;r++)this.children[r]._renderCanvas(t)}},n.Graphics.prototype.getBounds=function(t){this.bounds||this.updateBounds();var e=this.bounds.x,i=this.bounds.width+this.bounds.x,r=this.bounds.y,s=this.bounds.height+this.bounds.y,n=t||this.worldTransform,o=n.a,a=n.c,h=n.b,l=n.d,u=n.tx,c=n.ty,d=o*i+h*s+u,p=l*s+a*i+c,f=o*e+h*s+u,g=l*s+a*e+c,m=o*e+h*r+u,v=l*r+a*e+c,x=o*i+h*r+u,y=l*r+a*i+c,b=-1/0,T=-1/0,S=1/0,C=1/0;S=S>d?d:S,S=S>f?f:S,S=S>m?m:S,S=S>x?x:S,C=C>p?p:C,C=C>g?g:C,C=C>v?v:C,C=C>y?y:C,b=d>b?d:b,b=f>b?f:b,b=m>b?m:b,b=x>b?x:b,T=p>T?p:T,T=g>T?g:T,T=v>T?v:T,T=y>T?y:T;var w=this._bounds;return w.x=S,w.width=b-S,w.y=C,w.height=T-C,w},n.Graphics.prototype.updateBounds=function(){for(var t,e,i,r,s,o=1/0,a=-1/0,h=1/0,l=-1/0,u=0;u<this.graphicsData.length;u++){var c=this.graphicsData[u],d=c.type,p=c.lineWidth;if(t=c.points,d===n.Graphics.RECT)e=t[0]-p/2,i=t[1]-p/2,r=t[2]+p,s=t[3]+p,o=o>e?e:o,a=e+r>a?e+r:a,h=h>i?e:h,l=i+s>l?i+s:l;else if(d===n.Graphics.CIRC||d===n.Graphics.ELIP)e=t[0],i=t[1],r=t[2]+p/2,s=t[3]+p/2,o=o>e-r?e-r:o,a=e+r>a?e+r:a,h=h>i-s?i-s:h,l=i+s>l?i+s:l;else for(var f=0;f<t.length;f+=2)e=t[f],i=t[f+1],o=o>e-p?e-p:o,a=e+p>a?e+p:a,h=h>i-p?i-p:h,l=i+p>l?i+p:l}var g=this.boundsPadding;this.bounds=new n.Rectangle(o-g,h-g,a-o+2*g,l-h+2*g)},n.Graphics.prototype._generateCachedSprite=function(){var t=this.getLocalBounds();if(this._cachedSprite)this._cachedSprite.buffer.resize(t.width,t.height);else{var e=new n.CanvasBuffer(t.width,t.height),i=n.Texture.fromCanvas(e.canvas);this._cachedSprite=new n.Sprite(i),this._cachedSprite.buffer=e,this._cachedSprite.worldTransform=this.worldTransform}this._cachedSprite.anchor.x=-(t.x/t.width),this._cachedSprite.anchor.y=-(t.y/t.height),this._cachedSprite.buffer.context.translate(-t.x,-t.y),n.CanvasGraphics.renderGraphics(this,this._cachedSprite.buffer.context)},n.Graphics.prototype.destroyCachedSprite=function(){this._cachedSprite.texture.destroy(!0),this._cachedSprite=null},n.Graphics.POLY=0,n.Graphics.RECT=1,n.Graphics.CIRC=2,n.Graphics.ELIP=3,n.Strip=function(t,e,i){n.DisplayObjectContainer.call(this),this.texture=t,this.blendMode=n.blendModes.NORMAL;try{this.uvs=new Float32Array([0,1,1,1,1,0,0,1]),this.verticies=new Float32Array([0,0,0,0,0,0,0,0,0]),this.colors=new Float32Array([1,1,1,1]),this.indices=new Uint16Array([0,1,2,3])}catch(r){this.uvs=[0,1,1,1,1,0,0,1],this.verticies=[0,0,0,0,0,0,0,0,0],this.colors=[1,1,1,1],this.indices=[0,1,2,3]}this.width=e,this.height=i,t.baseTexture.hasLoaded?(this.width=this.texture.frame.width,this.height=this.texture.frame.height,this.updateFrame=!0):(this.onTextureUpdateBind=this.onTextureUpdate.bind(this),this.texture.addEventListener("update",this.onTextureUpdateBind)),this.renderable=!0},n.Strip.prototype=Object.create(n.DisplayObjectContainer.prototype),n.Strip.prototype.constructor=n.Strip,n.Strip.prototype.setTexture=function(t){this.texture=t,this.width=t.frame.width,this.height=t.frame.height,this.updateFrame=!0},n.Strip.prototype.onTextureUpdate=function(){this.updateFrame=!0},n.Rope=function(t,e){n.Strip.call(this,t),this.points=e;try{this.verticies=new Float32Array(4*e.length),this.uvs=new Float32Array(4*e.length),this.colors=new Float32Array(2*e.length),this.indices=new Uint16Array(2*e.length)}catch(i){this.verticies=new Array(4*e.length),this.uvs=new Array(4*e.length),this.colors=new Array(2*e.length),this.indices=new Array(2*e.length)}this.refresh()},n.Rope.prototype=Object.create(n.Strip.prototype),n.Rope.prototype.constructor=n.Rope,n.Rope.prototype.refresh=function(){var t=this.points;if(!(t.length<1)){var e=this.uvs,i=t[0],r=this.indices,s=this.colors;this.count-=.2,e[0]=0,e[1]=1,e[2]=0,e[3]=1,s[0]=1,s[1]=1,r[0]=0,r[1]=1;for(var n,o,a,h=t.length,l=1;h>l;l++)n=t[l],o=4*l,a=l/(h-1),l%2?(e[o]=a,e[o+1]=0,e[o+2]=a,e[o+3]=1):(e[o]=a,e[o+1]=0,e[o+2]=a,e[o+3]=1),o=2*l,s[o]=1,s[o+1]=1,o=2*l,r[o]=o,r[o+1]=o+1,i=n}},n.Rope.prototype.updateTransform=function(){var t=this.points;if(!(t.length<1)){var e,i=t[0],r={x:0,y:0};this.count-=.2;var s=this.verticies;s[0]=i.x+r.x,s[1]=i.y+r.y,s[2]=i.x-r.x,s[3]=i.y-r.y;for(var o,a,h,l,u,c=t.length,d=1;c>d;d++)o=t[d],a=4*d,e=d<t.length-1?t[d+1]:o,r.y=-(e.x-i.x),r.x=e.y-i.y,h=10*(1-d/(c-1)),h>1&&(h=1),l=Math.sqrt(r.x*r.x+r.y*r.y),u=this.texture.height/2,r.x/=l,r.y/=l,r.x*=u,r.y*=u,s[a]=o.x+r.x,s[a+1]=o.y+r.y,s[a+2]=o.x-r.x,s[a+3]=o.y-r.y,i=o;n.DisplayObjectContainer.prototype.updateTransform.call(this)}},n.Rope.prototype.setTexture=function(t){this.texture=t,this.updateFrame=!0},n.TilingSprite=function(t,e,i){n.Sprite.call(this,t),this.width=e||100,this.height=i||100,this.tileScale=new n.Point(1,1),this.tileScaleOffset=new n.Point(1,1),this.tilePosition=new n.Point(0,0),this.renderable=!0,this.tint=16777215,this.blendMode=n.blendModes.NORMAL},n.TilingSprite.prototype=Object.create(n.Sprite.prototype),n.TilingSprite.prototype.constructor=n.TilingSprite,Object.defineProperty(n.TilingSprite.prototype,"width",{get:function(){return this._width},set:function(t){this._width=t}}),Object.defineProperty(n.TilingSprite.prototype,"height",{get:function(){return this._height
},set:function(t){this._height=t}}),n.TilingSprite.prototype.onTextureUpdate=function(){this.updateFrame=!0},n.TilingSprite.prototype._renderWebGL=function(t){if(this.visible!==!1&&0!==this.alpha){var e,i;if(this.mask||this.filters){for(this.mask&&(t.spriteBatch.stop(),t.maskManager.pushMask(this.mask,t),t.spriteBatch.start()),this.filters&&(t.spriteBatch.flush(),t.filterManager.pushFilter(this._filterBlock)),this.tilingTexture?t.spriteBatch.renderTilingSprite(this):this.generateTilingTexture(!0),e=0,i=this.children.length;i>e;e++)this.children[e]._renderWebGL(t);t.spriteBatch.stop(),this.filters&&t.filterManager.popFilter(),this.mask&&t.maskManager.popMask(t),t.spriteBatch.start()}else for(this.tilingTexture?t.spriteBatch.renderTilingSprite(this):this.generateTilingTexture(!0),e=0,i=this.children.length;i>e;e++)this.children[e]._renderWebGL(t)}},n.TilingSprite.prototype._renderCanvas=function(t){if(this.visible!==!1&&0!==this.alpha){var e=t.context;this._mask&&t.maskManager.pushMask(this._mask,e),e.globalAlpha=this.worldAlpha;var i=this.worldTransform;e.setTransform(i.a,i.c,i.b,i.d,i.tx,i.ty),this.__tilePattern||(this.generateTilingTexture(!1),this.tilingTexture&&(this.__tilePattern=e.createPattern(this.tilingTexture.baseTexture.source,"repeat"))),this.blendMode!==t.currentBlendMode&&(t.currentBlendMode=this.blendMode,e.globalCompositeOperation=n.blendModesCanvas[t.currentBlendMode]),e.beginPath();var r=this.tilePosition,s=this.tileScale;r.x%=this.tilingTexture.baseTexture.width,r.y%=this.tilingTexture.baseTexture.height,e.scale(s.x,s.y),e.translate(r.x,r.y),e.fillStyle=this.__tilePattern,e.fillRect(-r.x,-r.y,this.width/s.x,this.height/s.y),e.scale(1/s.x,1/s.y),e.translate(-r.x,-r.y),e.closePath(),this._mask&&t.maskManager.popMask(t.context)}},n.TilingSprite.prototype.getBounds=function(){var t=this._width,e=this._height,i=t*(1-this.anchor.x),r=t*-this.anchor.x,s=e*(1-this.anchor.y),n=e*-this.anchor.y,o=this.worldTransform,a=o.a,h=o.c,l=o.b,u=o.d,c=o.tx,d=o.ty,p=a*r+l*n+c,f=u*n+h*r+d,g=a*i+l*n+c,m=u*n+h*i+d,v=a*i+l*s+c,x=u*s+h*i+d,y=a*r+l*s+c,b=u*s+h*r+d,T=-1/0,S=-1/0,C=1/0,w=1/0;C=C>p?p:C,C=C>g?g:C,C=C>v?v:C,C=C>y?y:C,w=w>f?f:w,w=w>m?m:w,w=w>x?x:w,w=w>b?b:w,T=p>T?p:T,T=g>T?g:T,T=v>T?v:T,T=y>T?y:T,S=f>S?f:S,S=m>S?m:S,S=x>S?x:S,S=b>S?b:S;var A=this._bounds;return A.x=C,A.width=T-C,A.y=w,A.height=S-w,this._currentBounds=A,A},n.TilingSprite.prototype.generateTilingTexture=function(t){var e=this.texture;if(e.baseTexture.hasLoaded){var i,r,s=e.baseTexture,o=e.frame,a=o.width!==s.width||o.height!==s.height;this.tilingTexture=e;var h=!1;if(t?(i=n.getNextPowerOfTwo(e.frame.width),r=n.getNextPowerOfTwo(e.frame.height),o.width!==i&&o.height!==r&&(h=!0)):a&&(i=o.width,r=o.height,h=!0),h){var l=new n.CanvasBuffer(i,r);l.context.drawImage(e.baseTexture.source,o.x,o.y,o.width,o.height,0,0,i,r),this.tilingTexture=n.Texture.fromCanvas(l.canvas),this.tileScaleOffset.x=o.width/i,this.tileScaleOffset.y=o.height/r}this.tilingTexture.baseTexture._powerOf2=!0}};var u={};u.BoneData=function(t,e){this.name=t,this.parent=e},u.BoneData.prototype={length:0,x:0,y:0,rotation:0,scaleX:1,scaleY:1},u.SlotData=function(t,e){this.name=t,this.boneData=e},u.SlotData.prototype={r:1,g:1,b:1,a:1,attachmentName:null},u.Bone=function(t,e){this.data=t,this.parent=e,this.setToSetupPose()},u.Bone.yDown=!1,u.Bone.prototype={x:0,y:0,rotation:0,scaleX:1,scaleY:1,m00:0,m01:0,worldX:0,m10:0,m11:0,worldY:0,worldRotation:0,worldScaleX:1,worldScaleY:1,updateWorldTransform:function(t,e){var i=this.parent;null!=i?(this.worldX=this.x*i.m00+this.y*i.m01+i.worldX,this.worldY=this.x*i.m10+this.y*i.m11+i.worldY,this.worldScaleX=i.worldScaleX*this.scaleX,this.worldScaleY=i.worldScaleY*this.scaleY,this.worldRotation=i.worldRotation+this.rotation):(this.worldX=this.x,this.worldY=this.y,this.worldScaleX=this.scaleX,this.worldScaleY=this.scaleY,this.worldRotation=this.rotation);var r=this.worldRotation*Math.PI/180,s=Math.cos(r),n=Math.sin(r);this.m00=s*this.worldScaleX,this.m10=n*this.worldScaleX,this.m01=-n*this.worldScaleY,this.m11=s*this.worldScaleY,t&&(this.m00=-this.m00,this.m01=-this.m01),e&&(this.m10=-this.m10,this.m11=-this.m11),u.Bone.yDown&&(this.m10=-this.m10,this.m11=-this.m11)},setToSetupPose:function(){var t=this.data;this.x=t.x,this.y=t.y,this.rotation=t.rotation,this.scaleX=t.scaleX,this.scaleY=t.scaleY}},u.Slot=function(t,e,i){this.data=t,this.skeleton=e,this.bone=i,this.setToSetupPose()},u.Slot.prototype={r:1,g:1,b:1,a:1,_attachmentTime:0,attachment:null,setAttachment:function(t){this.attachment=t,this._attachmentTime=this.skeleton.time},setAttachmentTime:function(t){this._attachmentTime=this.skeleton.time-t},getAttachmentTime:function(){return this.skeleton.time-this._attachmentTime},setToSetupPose:function(){var t=this.data;this.r=t.r,this.g=t.g,this.b=t.b,this.a=t.a;for(var e=this.skeleton.data.slots,i=0,r=e.length;r>i;i++)if(e[i]==t){this.setAttachment(t.attachmentName?this.skeleton.getAttachmentBySlotIndex(i,t.attachmentName):null);break}}},u.Skin=function(t){this.name=t,this.attachments={}},u.Skin.prototype={addAttachment:function(t,e,i){this.attachments[t+":"+e]=i},getAttachment:function(t,e){return this.attachments[t+":"+e]},_attachAll:function(t,e){for(var i in e.attachments){var r=i.indexOf(":"),s=parseInt(i.substring(0,r),10),n=i.substring(r+1),o=t.slots[s];if(o.attachment&&o.attachment.name==n){var a=this.getAttachment(s,n);a&&o.setAttachment(a)}}}},u.Animation=function(t,e,i){this.name=t,this.timelines=e,this.duration=i},u.Animation.prototype={apply:function(t,e,i){i&&this.duration&&(e%=this.duration);for(var r=this.timelines,s=0,n=r.length;n>s;s++)r[s].apply(t,e,1)},mix:function(t,e,i,r){i&&this.duration&&(e%=this.duration);for(var s=this.timelines,n=0,o=s.length;o>n;n++)s[n].apply(t,e,r)}},u.binarySearch=function(t,e,i){var r=0,s=Math.floor(t.length/i)-2;if(!s)return i;for(var n=s>>>1;;){if(t[(n+1)*i]<=e?r=n+1:s=n,r==s)return(r+1)*i;n=r+s>>>1}},u.linearSearch=function(t,e,i){for(var r=0,s=t.length-i;s>=r;r+=i)if(t[r]>e)return r;return-1},u.Curves=function(t){this.curves=[],this.curves.length=6*(t-1)},u.Curves.prototype={setLinear:function(t){this.curves[6*t]=0},setStepped:function(t){this.curves[6*t]=-1},setCurve:function(t,e,i,r,s){var n=.1,o=n*n,a=o*n,h=3*n,l=3*o,u=6*o,c=6*a,d=2*-e+r,p=2*-i+s,f=3*(e-r)+1,g=3*(i-s)+1,m=6*t,v=this.curves;v[m]=e*h+d*l+f*a,v[m+1]=i*h+p*l+g*a,v[m+2]=d*u+f*c,v[m+3]=p*u+g*c,v[m+4]=f*c,v[m+5]=g*c},getCurvePercent:function(t,e){e=0>e?0:e>1?1:e;var i=6*t,r=this.curves,s=r[i];if(!s)return e;if(-1==s)return 0;for(var n=r[i+1],o=r[i+2],a=r[i+3],h=r[i+4],l=r[i+5],u=s,c=n,d=8;;){if(u>=e){var p=u-s,f=c-n;return f+(c-f)*(e-p)/(u-p)}if(!d)break;d--,s+=o,n+=a,o+=h,a+=l,u+=s,c+=n}return c+(1-c)*(e-u)/(1-u)}},u.RotateTimeline=function(t){this.curves=new u.Curves(t),this.frames=[],this.frames.length=2*t},u.RotateTimeline.prototype={boneIndex:0,getFrameCount:function(){return this.frames.length/2},setFrame:function(t,e,i){t*=2,this.frames[t]=e,this.frames[t+1]=i},apply:function(t,e,i){var r,s=this.frames;if(!(e<s[0])){var n=t.bones[this.boneIndex];if(e>=s[s.length-2]){for(r=n.data.rotation+s[s.length-1]-n.rotation;r>180;)r-=360;for(;-180>r;)r+=360;return n.rotation+=r*i,void 0}var o=u.binarySearch(s,e,2),a=s[o-1],h=s[o],l=1-(e-h)/(s[o-2]-h);for(l=this.curves.getCurvePercent(o/2-1,l),r=s[o+1]-a;r>180;)r-=360;for(;-180>r;)r+=360;for(r=n.data.rotation+(a+r*l)-n.rotation;r>180;)r-=360;for(;-180>r;)r+=360;n.rotation+=r*i}}},u.TranslateTimeline=function(t){this.curves=new u.Curves(t),this.frames=[],this.frames.length=3*t},u.TranslateTimeline.prototype={boneIndex:0,getFrameCount:function(){return this.frames.length/3},setFrame:function(t,e,i,r){t*=3,this.frames[t]=e,this.frames[t+1]=i,this.frames[t+2]=r},apply:function(t,e,i){var r=this.frames;if(!(e<r[0])){var s=t.bones[this.boneIndex];if(e>=r[r.length-3])return s.x+=(s.data.x+r[r.length-2]-s.x)*i,s.y+=(s.data.y+r[r.length-1]-s.y)*i,void 0;var n=u.binarySearch(r,e,3),o=r[n-2],a=r[n-1],h=r[n],l=1-(e-h)/(r[n+-3]-h);l=this.curves.getCurvePercent(n/3-1,l),s.x+=(s.data.x+o+(r[n+1]-o)*l-s.x)*i,s.y+=(s.data.y+a+(r[n+2]-a)*l-s.y)*i}}},u.ScaleTimeline=function(t){this.curves=new u.Curves(t),this.frames=[],this.frames.length=3*t},u.ScaleTimeline.prototype={boneIndex:0,getFrameCount:function(){return this.frames.length/3},setFrame:function(t,e,i,r){t*=3,this.frames[t]=e,this.frames[t+1]=i,this.frames[t+2]=r},apply:function(t,e,i){var r=this.frames;if(!(e<r[0])){var s=t.bones[this.boneIndex];if(e>=r[r.length-3])return s.scaleX+=(s.data.scaleX-1+r[r.length-2]-s.scaleX)*i,s.scaleY+=(s.data.scaleY-1+r[r.length-1]-s.scaleY)*i,void 0;var n=u.binarySearch(r,e,3),o=r[n-2],a=r[n-1],h=r[n],l=1-(e-h)/(r[n+-3]-h);l=this.curves.getCurvePercent(n/3-1,l),s.scaleX+=(s.data.scaleX-1+o+(r[n+1]-o)*l-s.scaleX)*i,s.scaleY+=(s.data.scaleY-1+a+(r[n+2]-a)*l-s.scaleY)*i}}},u.ColorTimeline=function(t){this.curves=new u.Curves(t),this.frames=[],this.frames.length=5*t},u.ColorTimeline.prototype={slotIndex:0,getFrameCount:function(){return this.frames.length/2},setFrame:function(t,e){t*=5,this.frames[t]=e,this.frames[t+1]=r,this.frames[t+2]=g,this.frames[t+3]=b,this.frames[t+4]=a},apply:function(t,e,i){var r=this.frames;if(!(e<r[0])){var s=t.slots[this.slotIndex];if(e>=r[r.length-5]){var n=r.length-1;return s.r=r[n-3],s.g=r[n-2],s.b=r[n-1],s.a=r[n],void 0}var o=u.binarySearch(r,e,5),a=r[o-4],h=r[o-3],l=r[o-2],c=r[o-1],d=r[o],p=1-(e-d)/(r[o-5]-d);p=this.curves.getCurvePercent(o/5-1,p);var f=a+(r[o+1]-a)*p,g=h+(r[o+2]-h)*p,m=l+(r[o+3]-l)*p,v=c+(r[o+4]-c)*p;1>i?(s.r+=(f-s.r)*i,s.g+=(g-s.g)*i,s.b+=(m-s.b)*i,s.a+=(v-s.a)*i):(s.r=f,s.g=g,s.b=m,s.a=v)}}},u.AttachmentTimeline=function(t){this.curves=new u.Curves(t),this.frames=[],this.frames.length=t,this.attachmentNames=[],this.attachmentNames.length=t},u.AttachmentTimeline.prototype={slotIndex:0,getFrameCount:function(){return this.frames.length},setFrame:function(t,e,i){this.frames[t]=e,this.attachmentNames[t]=i},apply:function(t,e){var i=this.frames;if(!(e<i[0])){var r;r=e>=i[i.length-1]?i.length-1:u.binarySearch(i,e,1)-1;var s=this.attachmentNames[r];t.slots[this.slotIndex].setAttachment(s?t.getAttachmentBySlotIndex(this.slotIndex,s):null)}}},u.SkeletonData=function(){this.bones=[],this.slots=[],this.skins=[],this.animations=[]},u.SkeletonData.prototype={defaultSkin:null,findBone:function(t){for(var e=this.bones,i=0,r=e.length;r>i;i++)if(e[i].name==t)return e[i];return null},findBoneIndex:function(t){for(var e=this.bones,i=0,r=e.length;r>i;i++)if(e[i].name==t)return i;return-1},findSlot:function(t){for(var e=this.slots,i=0,r=e.length;r>i;i++)if(e[i].name==t)return slot[i];return null},findSlotIndex:function(t){for(var e=this.slots,i=0,r=e.length;r>i;i++)if(e[i].name==t)return i;return-1},findSkin:function(t){for(var e=this.skins,i=0,r=e.length;r>i;i++)if(e[i].name==t)return e[i];return null},findAnimation:function(t){for(var e=this.animations,i=0,r=e.length;r>i;i++)if(e[i].name==t)return e[i];return null}},u.Skeleton=function(t){this.data=t,this.bones=[];for(var e=0,i=t.bones.length;i>e;e++){var r=t.bones[e],s=r.parent?this.bones[t.bones.indexOf(r.parent)]:null;this.bones.push(new u.Bone(r,s))}for(this.slots=[],this.drawOrder=[],e=0,i=t.slots.length;i>e;e++){var n=t.slots[e],o=this.bones[t.bones.indexOf(n.boneData)],a=new u.Slot(n,this,o);this.slots.push(a),this.drawOrder.push(a)}},u.Skeleton.prototype={x:0,y:0,skin:null,r:1,g:1,b:1,a:1,time:0,flipX:!1,flipY:!1,updateWorldTransform:function(){for(var t=this.flipX,e=this.flipY,i=this.bones,r=0,s=i.length;s>r;r++)i[r].updateWorldTransform(t,e)},setToSetupPose:function(){this.setBonesToSetupPose(),this.setSlotsToSetupPose()},setBonesToSetupPose:function(){for(var t=this.bones,e=0,i=t.length;i>e;e++)t[e].setToSetupPose()},setSlotsToSetupPose:function(){for(var t=this.slots,e=0,i=t.length;i>e;e++)t[e].setToSetupPose(e)},getRootBone:function(){return this.bones.length?this.bones[0]:null},findBone:function(t){for(var e=this.bones,i=0,r=e.length;r>i;i++)if(e[i].data.name==t)return e[i];return null},findBoneIndex:function(t){for(var e=this.bones,i=0,r=e.length;r>i;i++)if(e[i].data.name==t)return i;return-1},findSlot:function(t){for(var e=this.slots,i=0,r=e.length;r>i;i++)if(e[i].data.name==t)return e[i];return null},findSlotIndex:function(t){for(var e=this.slots,i=0,r=e.length;r>i;i++)if(e[i].data.name==t)return i;return-1},setSkinByName:function(t){var e=this.data.findSkin(t);if(!e)throw"Skin not found: "+t;this.setSkin(e)},setSkin:function(t){this.skin&&t&&t._attachAll(this,this.skin),this.skin=t},getAttachmentBySlotName:function(t,e){return this.getAttachmentBySlotIndex(this.data.findSlotIndex(t),e)},getAttachmentBySlotIndex:function(t,e){if(this.skin){var i=this.skin.getAttachment(t,e);if(i)return i}return this.data.defaultSkin?this.data.defaultSkin.getAttachment(t,e):null},setAttachment:function(t,e){for(var i=this.slots,r=0,s=i.size;s>r;r++){var n=i[r];if(n.data.name==t){var o=null;if(e&&(o=this.getAttachment(r,e),null==o))throw"Attachment not found: "+e+", for slot: "+t;return n.setAttachment(o),void 0}}throw"Slot not found: "+t},update:function(t){time+=t}},u.AttachmentType={region:0},u.RegionAttachment=function(){this.offset=[],this.offset.length=8,this.uvs=[],this.uvs.length=8},u.RegionAttachment.prototype={x:0,y:0,rotation:0,scaleX:1,scaleY:1,width:0,height:0,rendererObject:null,regionOffsetX:0,regionOffsetY:0,regionWidth:0,regionHeight:0,regionOriginalWidth:0,regionOriginalHeight:0,setUVs:function(t,e,i,r,s){var n=this.uvs;s?(n[2]=t,n[3]=r,n[4]=t,n[5]=e,n[6]=i,n[7]=e,n[0]=i,n[1]=r):(n[0]=t,n[1]=r,n[2]=t,n[3]=e,n[4]=i,n[5]=e,n[6]=i,n[7]=r)},updateOffset:function(){var t=this.width/this.regionOriginalWidth*this.scaleX,e=this.height/this.regionOriginalHeight*this.scaleY,i=-this.width/2*this.scaleX+this.regionOffsetX*t,r=-this.height/2*this.scaleY+this.regionOffsetY*e,s=i+this.regionWidth*t,n=r+this.regionHeight*e,o=this.rotation*Math.PI/180,a=Math.cos(o),h=Math.sin(o),l=i*a+this.x,u=i*h,c=r*a+this.y,d=r*h,p=s*a+this.x,f=s*h,g=n*a+this.y,m=n*h,v=this.offset;v[0]=l-d,v[1]=c+u,v[2]=l-m,v[3]=g+u,v[4]=p-m,v[5]=g+f,v[6]=p-d,v[7]=c+f},computeVertices:function(t,e,i,r){t+=i.worldX,e+=i.worldY;var s=i.m00,n=i.m01,o=i.m10,a=i.m11,h=this.offset;r[0]=h[0]*s+h[1]*n+t,r[1]=h[0]*o+h[1]*a+e,r[2]=h[2]*s+h[3]*n+t,r[3]=h[2]*o+h[3]*a+e,r[4]=h[4]*s+h[5]*n+t,r[5]=h[4]*o+h[5]*a+e,r[6]=h[6]*s+h[7]*n+t,r[7]=h[6]*o+h[7]*a+e}},u.AnimationStateData=function(t){this.skeletonData=t,this.animationToMixTime={}},u.AnimationStateData.prototype={defaultMix:0,setMixByName:function(t,e,i){var r=this.skeletonData.findAnimation(t);if(!r)throw"Animation not found: "+t;var s=this.skeletonData.findAnimation(e);if(!s)throw"Animation not found: "+e;this.setMix(r,s,i)},setMix:function(t,e,i){this.animationToMixTime[t.name+":"+e.name]=i},getMix:function(t,e){var i=this.animationToMixTime[t.name+":"+e.name];return i?i:this.defaultMix}},u.AnimationState=function(t){this.data=t,this.queue=[]},u.AnimationState.prototype={current:null,previous:null,currentTime:0,previousTime:0,currentLoop:!1,previousLoop:!1,mixTime:0,mixDuration:0,update:function(t){if(this.currentTime+=t,this.previousTime+=t,this.mixTime+=t,this.queue.length>0){var e=this.queue[0];this.currentTime>=e.delay&&(this._setAnimation(e.animation,e.loop),this.queue.shift())}},apply:function(t){if(this.current)if(this.previous){this.previous.apply(t,this.previousTime,this.previousLoop);var e=this.mixTime/this.mixDuration;e>=1&&(e=1,this.previous=null),this.current.mix(t,this.currentTime,this.currentLoop,e)}else this.current.apply(t,this.currentTime,this.currentLoop)},clearAnimation:function(){this.previous=null,this.current=null,this.queue.length=0},_setAnimation:function(t,e){this.previous=null,t&&this.current&&(this.mixDuration=this.data.getMix(this.current,t),this.mixDuration>0&&(this.mixTime=0,this.previous=this.current,this.previousTime=this.currentTime,this.previousLoop=this.currentLoop)),this.current=t,this.currentLoop=e,this.currentTime=0},setAnimationByName:function(t,e){var i=this.data.skeletonData.findAnimation(t);if(!i)throw"Animation not found: "+t;this.setAnimation(i,e)},setAnimation:function(t,e){this.queue.length=0,this._setAnimation(t,e)},addAnimationByName:function(t,e,i){var r=this.data.skeletonData.findAnimation(t);if(!r)throw"Animation not found: "+t;this.addAnimation(r,e,i)},addAnimation:function(t,e,i){var r={};if(r.animation=t,r.loop=e,!i||0>=i){var s=this.queue.length?this.queue[this.queue.length-1].animation:this.current;i=null!=s?s.duration-this.data.getMix(s,t)+(i||0):0}r.delay=i,this.queue.push(r)},isComplete:function(){return!this.current||this.currentTime>=this.current.duration}},u.SkeletonJson=function(t){this.attachmentLoader=t},u.SkeletonJson.prototype={scale:1,readSkeletonData:function(t){for(var e,i=new u.SkeletonData,r=t.bones,s=0,n=r.length;n>s;s++){var o=r[s],a=null;if(o.parent&&(a=i.findBone(o.parent),!a))throw"Parent bone not found: "+o.parent;e=new u.BoneData(o.name,a),e.length=(o.length||0)*this.scale,e.x=(o.x||0)*this.scale,e.y=(o.y||0)*this.scale,e.rotation=o.rotation||0,e.scaleX=o.scaleX||1,e.scaleY=o.scaleY||1,i.bones.push(e)}var h=t.slots;for(s=0,n=h.length;n>s;s++){var l=h[s];if(e=i.findBone(l.bone),!e)throw"Slot bone not found: "+l.bone;var c=new u.SlotData(l.name,e),d=l.color;d&&(c.r=u.SkeletonJson.toColor(d,0),c.g=u.SkeletonJson.toColor(d,1),c.b=u.SkeletonJson.toColor(d,2),c.a=u.SkeletonJson.toColor(d,3)),c.attachmentName=l.attachment,i.slots.push(c)}var p=t.skins;for(var f in p)if(p.hasOwnProperty(f)){var g=p[f],m=new u.Skin(f);for(var v in g)if(g.hasOwnProperty(v)){var x=i.findSlotIndex(v),y=g[v];for(var b in y)if(y.hasOwnProperty(b)){var T=this.readAttachment(m,b,y[b]);null!=T&&m.addAttachment(x,b,T)}}i.skins.push(m),"default"==m.name&&(i.defaultSkin=m)}var S=t.animations;for(var C in S)S.hasOwnProperty(C)&&this.readAnimation(C,S[C],i);return i},readAttachment:function(t,e,i){e=i.name||e;var r=u.AttachmentType[i.type||"region"];if(r==u.AttachmentType.region){var s=new u.RegionAttachment;return s.x=(i.x||0)*this.scale,s.y=(i.y||0)*this.scale,s.scaleX=i.scaleX||1,s.scaleY=i.scaleY||1,s.rotation=i.rotation||0,s.width=(i.width||32)*this.scale,s.height=(i.height||32)*this.scale,s.updateOffset(),s.rendererObject={},s.rendererObject.name=e,s.rendererObject.scale={},s.rendererObject.scale.x=s.scaleX,s.rendererObject.scale.y=s.scaleY,s.rendererObject.rotation=-s.rotation*Math.PI/180,s}throw"Unknown attachment type: "+r},readAnimation:function(t,e,i){var r,s,n,o,a,h,l,c=[],d=0,p=e.bones;for(var f in p)if(p.hasOwnProperty(f)){var g=i.findBoneIndex(f);if(-1==g)throw"Bone not found: "+f;var m=p[f];for(n in m)if(m.hasOwnProperty(n))if(a=m[n],"rotate"==n){for(s=new u.RotateTimeline(a.length),s.boneIndex=g,r=0,h=0,l=a.length;l>h;h++)o=a[h],s.setFrame(r,o.time,o.angle),u.SkeletonJson.readCurve(s,r,o),r++;c.push(s),d=Math.max(d,s.frames[2*s.getFrameCount()-2])}else{if("translate"!=n&&"scale"!=n)throw"Invalid timeline type for a bone: "+n+" ("+f+")";var v=1;for("scale"==n?s=new u.ScaleTimeline(a.length):(s=new u.TranslateTimeline(a.length),v=this.scale),s.boneIndex=g,r=0,h=0,l=a.length;l>h;h++){o=a[h];var x=(o.x||0)*v,y=(o.y||0)*v;s.setFrame(r,o.time,x,y),u.SkeletonJson.readCurve(s,r,o),r++}c.push(s),d=Math.max(d,s.frames[3*s.getFrameCount()-3])}}var b=e.slots;for(var T in b)if(b.hasOwnProperty(T)){var S=b[T],C=i.findSlotIndex(T);for(n in S)if(S.hasOwnProperty(n))if(a=S[n],"color"==n){for(s=new u.ColorTimeline(a.length),s.slotIndex=C,r=0,h=0,l=a.length;l>h;h++){o=a[h];var w=o.color,A=u.SkeletonJson.toColor(w,0),E=u.SkeletonJson.toColor(w,1),M=u.SkeletonJson.toColor(w,2),_=u.SkeletonJson.toColor(w,3);s.setFrame(r,o.time,A,E,M,_),u.SkeletonJson.readCurve(s,r,o),r++}c.push(s),d=Math.max(d,s.frames[5*s.getFrameCount()-5])}else{if("attachment"!=n)throw"Invalid timeline type for a slot: "+n+" ("+T+")";for(s=new u.AttachmentTimeline(a.length),s.slotIndex=C,r=0,h=0,l=a.length;l>h;h++)o=a[h],s.setFrame(r++,o.time,o.name);c.push(s),d=Math.max(d,s.frames[s.getFrameCount()-1])}}i.animations.push(new u.Animation(t,c,d))}},u.SkeletonJson.readCurve=function(t,e,i){var r=i.curve;r&&("stepped"==r?t.curves.setStepped(e):r instanceof Array&&t.curves.setCurve(e,r[0],r[1],r[2],r[3]))},u.SkeletonJson.toColor=function(t,e){if(8!=t.length)throw"Color hexidecimal length must be 8, recieved: "+t;return parseInt(t.substring(2*e,2),16)/255},u.Atlas=function(t,e){this.textureLoader=e,this.pages=[],this.regions=[];var i=new u.AtlasReader(t),r=[];r.length=4;for(var s=null;;){var n=i.readLine();if(null==n)break;if(n=i.trim(n),n.length)if(s){var o=new u.AtlasRegion;o.name=n,o.page=s,o.rotate="true"==i.readValue(),i.readTuple(r);var a=parseInt(r[0],10),h=parseInt(r[1],10);i.readTuple(r);var l=parseInt(r[0],10),c=parseInt(r[1],10);o.u=a/s.width,o.v=h/s.height,o.rotate?(o.u2=(a+c)/s.width,o.v2=(h+l)/s.height):(o.u2=(a+l)/s.width,o.v2=(h+c)/s.height),o.x=a,o.y=h,o.width=Math.abs(l),o.height=Math.abs(c),4==i.readTuple(r)&&(o.splits=[parseInt(r[0],10),parseInt(r[1],10),parseInt(r[2],10),parseInt(r[3],10)],4==i.readTuple(r)&&(o.pads=[parseInt(r[0],10),parseInt(r[1],10),parseInt(r[2],10),parseInt(r[3],10)],i.readTuple(r))),o.originalWidth=parseInt(r[0],10),o.originalHeight=parseInt(r[1],10),i.readTuple(r),o.offsetX=parseInt(r[0],10),o.offsetY=parseInt(r[1],10),o.index=parseInt(i.readValue(),10),this.regions.push(o)}else{s=new u.AtlasPage,s.name=n,s.format=u.Atlas.Format[i.readValue()],i.readTuple(r),s.minFilter=u.Atlas.TextureFilter[r[0]],s.magFilter=u.Atlas.TextureFilter[r[1]];var d=i.readValue();s.uWrap=u.Atlas.TextureWrap.clampToEdge,s.vWrap=u.Atlas.TextureWrap.clampToEdge,"x"==d?s.uWrap=u.Atlas.TextureWrap.repeat:"y"==d?s.vWrap=u.Atlas.TextureWrap.repeat:"xy"==d&&(s.uWrap=s.vWrap=u.Atlas.TextureWrap.repeat),e.load(s,n),this.pages.push(s)}else s=null}},u.Atlas.prototype={findRegion:function(t){for(var e=this.regions,i=0,r=e.length;r>i;i++)if(e[i].name==t)return e[i];return null},dispose:function(){for(var t=this.pages,e=0,i=t.length;i>e;e++)this.textureLoader.unload(t[e].rendererObject)},updateUVs:function(t){for(var e=this.regions,i=0,r=e.length;r>i;i++){var s=e[i];s.page==t&&(s.u=s.x/t.width,s.v=s.y/t.height,s.rotate?(s.u2=(s.x+s.height)/t.width,s.v2=(s.y+s.width)/t.height):(s.u2=(s.x+s.width)/t.width,s.v2=(s.y+s.height)/t.height))}}},u.Atlas.Format={alpha:0,intensity:1,luminanceAlpha:2,rgb565:3,rgba4444:4,rgb888:5,rgba8888:6},u.Atlas.TextureFilter={nearest:0,linear:1,mipMap:2,mipMapNearestNearest:3,mipMapLinearNearest:4,mipMapNearestLinear:5,mipMapLinearLinear:6},u.Atlas.TextureWrap={mirroredRepeat:0,clampToEdge:1,repeat:2},u.AtlasPage=function(){},u.AtlasPage.prototype={name:null,format:null,minFilter:null,magFilter:null,uWrap:null,vWrap:null,rendererObject:null,width:0,height:0},u.AtlasRegion=function(){},u.AtlasRegion.prototype={page:null,name:null,x:0,y:0,width:0,height:0,u:0,v:0,u2:0,v2:0,offsetX:0,offsetY:0,originalWidth:0,originalHeight:0,index:0,rotate:!1,splits:null,pads:null},u.AtlasReader=function(t){this.lines=t.split(/\r\n|\r|\n/)},u.AtlasReader.prototype={index:0,trim:function(t){return t.replace(/^\s+|\s+$/g,"")},readLine:function(){return this.index>=this.lines.length?null:this.lines[this.index++]},readValue:function(){var t=this.readLine(),e=t.indexOf(":");if(-1==e)throw"Invalid line: "+t;return this.trim(t.substring(e+1))},readTuple:function(t){var e=this.readLine(),i=e.indexOf(":");if(-1==i)throw"Invalid line: "+e;for(var r=0,s=i+1;3>r;r++){var n=e.indexOf(",",s);if(-1==n){if(!r)throw"Invalid line: "+e;break}t[r]=this.trim(e.substr(s,n-s)),s=n+1}return t[r]=this.trim(e.substring(s)),r+1}},u.AtlasAttachmentLoader=function(t){this.atlas=t},u.AtlasAttachmentLoader.prototype={newAttachment:function(t,e,i){switch(e){case u.AttachmentType.region:var r=this.atlas.findRegion(i);if(!r)throw"Region not found in atlas: "+i+" ("+e+")";var s=new u.RegionAttachment(i);return s.rendererObject=r,s.setUVs(r.u,r.v,r.u2,r.v2,r.rotate),s.regionOffsetX=r.offsetX,s.regionOffsetY=r.offsetY,s.regionWidth=r.width,s.regionHeight=r.height,s.regionOriginalWidth=r.originalWidth,s.regionOriginalHeight=r.originalHeight,s}throw"Unknown attachment type: "+e}},u.Bone.yDown=!0,n.AnimCache={},n.Spine=function(t){if(n.DisplayObjectContainer.call(this),this.spineData=n.AnimCache[t],!this.spineData)throw new Error("Spine data must be preloaded using PIXI.SpineLoader or PIXI.AssetLoader: "+t);this.skeleton=new u.Skeleton(this.spineData),this.skeleton.updateWorldTransform(),this.stateData=new u.AnimationStateData(this.spineData),this.state=new u.AnimationState(this.stateData),this.slotContainers=[];for(var e=0,i=this.skeleton.drawOrder.length;i>e;e++){var r=this.skeleton.drawOrder[e],s=r.attachment,o=new n.DisplayObjectContainer;if(this.slotContainers.push(o),this.addChild(o),s instanceof u.RegionAttachment){var a=s.rendererObject.name,h=this.createSprite(r,s.rendererObject);r.currentSprite=h,r.currentSpriteName=a,o.addChild(h)}}},n.Spine.prototype=Object.create(n.DisplayObjectContainer.prototype),n.Spine.prototype.constructor=n.Spine,n.Spine.prototype.updateTransform=function(){this.lastTime=this.lastTime||Date.now();var t=.001*(Date.now()-this.lastTime);this.lastTime=Date.now(),this.state.update(t),this.state.apply(this.skeleton),this.skeleton.updateWorldTransform();for(var e=this.skeleton.drawOrder,i=0,r=e.length;r>i;i++){var s=e[i],o=s.attachment,a=this.slotContainers[i];if(o instanceof u.RegionAttachment){if(o.rendererObject&&(!s.currentSpriteName||s.currentSpriteName!=o.name)){var h=o.rendererObject.name;if(void 0!==s.currentSprite&&(s.currentSprite.visible=!1),s.sprites=s.sprites||{},void 0!==s.sprites[h])s.sprites[h].visible=!0;else{var l=this.createSprite(s,o.rendererObject);a.addChild(l)}s.currentSprite=s.sprites[h],s.currentSpriteName=h}a.visible=!0;var c=s.bone;a.position.x=c.worldX+o.x*c.m00+o.y*c.m01,a.position.y=c.worldY+o.x*c.m10+o.y*c.m11,a.scale.x=c.worldScaleX,a.scale.y=c.worldScaleY,a.rotation=-(s.bone.worldRotation*Math.PI/180)}else a.visible=!1}n.DisplayObjectContainer.prototype.updateTransform.call(this)},n.Spine.prototype.createSprite=function(t,e){var i=n.TextureCache[e.name]?e.name:e.name+".png",r=new n.Sprite(n.Texture.fromFrame(i));return r.scale=e.scale,r.rotation=e.rotation,r.anchor.x=r.anchor.y=.5,t.sprites=t.sprites||{},t.sprites[e.name]=r,r},n.BaseTextureCache={},n.texturesToUpdate=[],n.texturesToDestroy=[],n.BaseTextureCacheIdGenerator=0,n.BaseTexture=function(t,e){if(n.EventTarget.call(this),this.width=100,this.height=100,this.scaleMode=e||n.scaleModes.DEFAULT,this.hasLoaded=!1,this.source=t,t){if(this.source.complete||this.source.getContext)this.hasLoaded=!0,this.width=this.source.width,this.height=this.source.height,n.texturesToUpdate.push(this);else{var i=this;this.source.onload=function(){i.hasLoaded=!0,i.width=i.source.width,i.height=i.source.height,n.texturesToUpdate.push(i),i.dispatchEvent({type:"loaded",content:i})}}this.imageUrl=null,this._powerOf2=!1,this.id=n.BaseTextureCacheIdGenerator++,this._glTextures=[]}},n.BaseTexture.prototype.constructor=n.BaseTexture,n.BaseTexture.prototype.destroy=function(){this.imageUrl&&(delete n.BaseTextureCache[this.imageUrl],this.imageUrl=null,this.source.src=null),this.source=null,n.texturesToDestroy.push(this)},n.BaseTexture.prototype.updateSourceImage=function(t){this.hasLoaded=!1,this.source.src=null,this.source.src=t},n.BaseTexture.fromImage=function(t,e,i){var r=n.BaseTextureCache[t];if(e=!e,!r){var s=new Image;e&&(s.crossOrigin=""),s.src=t,r=new n.BaseTexture(s,i),r.imageUrl=t,n.BaseTextureCache[t]=r}return r},n.BaseTexture.fromCanvas=function(t,e){t._pixiId||(t._pixiId="canvas_"+n.TextureCacheIdGenerator++);var i=n.BaseTextureCache[t._pixiId];return i||(i=new n.BaseTexture(t,e),n.BaseTextureCache[t._pixiId]=i),i},n.TextureCache={},n.FrameCache={},n.TextureCacheIdGenerator=0,n.Texture=function(t,e){if(n.EventTarget.call(this),e||(this.noFrame=!0,e=new n.Rectangle(0,0,1,1)),t instanceof n.Texture&&(t=t.baseTexture),this.baseTexture=t,this.frame=e,this.trim=null,this.scope=this,t.hasLoaded)this.noFrame&&(e=new n.Rectangle(0,0,t.width,t.height)),this.setFrame(e);else{var i=this;t.addEventListener("loaded",function(){i.onBaseTextureLoaded()})}},n.Texture.prototype.constructor=n.Texture,n.Texture.prototype.onBaseTextureLoaded=function(){var t=this.baseTexture;t.removeEventListener("loaded",this.onLoaded),this.noFrame&&(this.frame=new n.Rectangle(0,0,t.width,t.height)),this.setFrame(this.frame),this.scope.dispatchEvent({type:"update",content:this})},n.Texture.prototype.destroy=function(t){t&&this.baseTexture.destroy()},n.Texture.prototype.setFrame=function(t){if(this.frame=t,this.width=t.width,this.height=t.height,t.x+t.width>this.baseTexture.width||t.y+t.height>this.baseTexture.height)throw new Error("Texture Error: frame does not fit inside the base Texture dimensions "+this);this.updateFrame=!0,n.Texture.frameUpdates.push(this)},n.Texture.prototype._updateWebGLuvs=function(){this._uvs||(this._uvs=new n.TextureUvs);var t=this.frame,e=this.baseTexture.width,i=this.baseTexture.height;this._uvs.x0=t.x/e,this._uvs.y0=t.y/i,this._uvs.x1=(t.x+t.width)/e,this._uvs.y1=t.y/i,this._uvs.x2=(t.x+t.width)/e,this._uvs.y2=(t.y+t.height)/i,this._uvs.x3=t.x/e,this._uvs.y3=(t.y+t.height)/i},n.Texture.fromImage=function(t,e,i){var r=n.TextureCache[t];return r||(r=new n.Texture(n.BaseTexture.fromImage(t,e,i)),n.TextureCache[t]=r),r},n.Texture.fromFrame=function(t){var e=n.TextureCache[t];if(!e)throw new Error('The frameId "'+t+'" does not exist in the texture cache ');return e},n.Texture.fromCanvas=function(t,e){var i=n.BaseTexture.fromCanvas(t,e);return new n.Texture(i)},n.Texture.addTextureToCache=function(t,e){n.TextureCache[e]=t},n.Texture.removeTextureFromCache=function(t){var e=n.TextureCache[t];return n.TextureCache[t]=null,e},n.Texture.frameUpdates=[],n.TextureUvs=function(){this.x0=0,this.y0=0,this.x1=0,this.y1=0,this.x2=0,this.y2=0,this.x3=0,this.y4=0},n.RenderTexture=function(t,e,i){if(n.EventTarget.call(this),this.width=t||100,this.height=e||100,this.frame=new n.Rectangle(0,0,this.width,this.height),this.baseTexture=new n.BaseTexture,this.baseTexture.width=this.width,this.baseTexture.height=this.height,this.baseTexture._glTextures=[],this.baseTexture.hasLoaded=!0,this.renderer=i||n.defaultRenderer,this.renderer.type===n.WEBGL_RENDERER){var r=this.renderer.gl;this.textureBuffer=new n.FilterTexture(r,this.width,this.height),this.baseTexture._glTextures[r.id]=this.textureBuffer.texture,this.render=this.renderWebGL,this.projection=new n.Point(this.width/2,-this.height/2)}else this.render=this.renderCanvas,this.textureBuffer=new n.CanvasBuffer(this.width,this.height),this.baseTexture.source=this.textureBuffer.canvas;n.Texture.frameUpdates.push(this)},n.RenderTexture.prototype=Object.create(n.Texture.prototype),n.RenderTexture.prototype.constructor=n.RenderTexture,n.RenderTexture.prototype.resize=function(t,e){if(this.width=t,this.height=e,this.frame.width=this.width,this.frame.height=this.height,this.renderer.type===n.WEBGL_RENDERER){this.projection.x=this.width/2,this.projection.y=-this.height/2;var i=this.renderer.gl;i.bindTexture(i.TEXTURE_2D,this.baseTexture._glTextures[i.id]),i.texImage2D(i.TEXTURE_2D,0,i.RGBA,this.width,this.height,0,i.RGBA,i.UNSIGNED_BYTE,null)}else this.textureBuffer.resize(this.width,this.height);n.Texture.frameUpdates.push(this)},n.RenderTexture.prototype.renderWebGL=function(t,e,i){var r=this.renderer.gl;r.colorMask(!0,!0,!0,!0),r.viewport(0,0,this.width,this.height),r.bindFramebuffer(r.FRAMEBUFFER,this.textureBuffer.frameBuffer),i&&this.textureBuffer.clear();var s=t.children,o=t.worldTransform;t.worldTransform=n.RenderTexture.tempMatrix,t.worldTransform.d=-1,t.worldTransform.ty=-2*this.projection.y,e&&(t.worldTransform.tx=e.x,t.worldTransform.ty-=e.y);for(var a=0,h=s.length;h>a;a++)s[a].updateTransform();n.WebGLRenderer.updateTextures(),this.renderer.renderDisplayObject(t,this.projection,this.textureBuffer.frameBuffer),t.worldTransform=o},n.RenderTexture.prototype.renderCanvas=function(t,e,i){var r=t.children;
t.worldTransform=n.RenderTexture.tempMatrix,e&&(t.worldTransform.tx=e.x,t.worldTransform.ty=e.y);for(var s=0,o=r.length;o>s;s++)r[s].updateTransform();i&&this.textureBuffer.clear();var a=this.textureBuffer.context;this.renderer.renderDisplayObject(t,a),a.setTransform(1,0,0,1,0,0)},n.RenderTexture.tempMatrix=new n.Matrix,n.AssetLoader=function(t,e){n.EventTarget.call(this),this.assetURLs=t,this.crossorigin=e,this.loadersByType={jpg:n.ImageLoader,jpeg:n.ImageLoader,png:n.ImageLoader,gif:n.ImageLoader,json:n.JsonLoader,atlas:n.AtlasLoader,anim:n.SpineLoader,xml:n.BitmapFontLoader,fnt:n.BitmapFontLoader}},n.AssetLoader.prototype.constructor=n.AssetLoader,n.AssetLoader.prototype._getDataType=function(t){var e="data:",i=t.slice(0,e.length).toLowerCase();if(i===e){var r=t.slice(e.length),s=r.indexOf(",");if(-1===s)return null;var n=r.slice(0,s).split(";")[0];return n&&"text/plain"!==n.toLowerCase()?n.split("/").pop().toLowerCase():"txt"}return null},n.AssetLoader.prototype.load=function(){function t(t){e.onAssetLoaded(t.loader)}var e=this;this.loadCount=this.assetURLs.length;for(var i=0;i<this.assetURLs.length;i++){var r=this.assetURLs[i],s=this._getDataType(r);s||(s=r.split("?").shift().split(".").pop().toLowerCase());var n=this.loadersByType[s];if(!n)throw new Error(s+" is an unsupported file type");var o=new n(r,this.crossorigin);o.addEventListener("loaded",t),o.load()}},n.AssetLoader.prototype.onAssetLoaded=function(t){this.loadCount--,this.dispatchEvent({type:"onProgress",content:this,loader:t}),this.onProgress&&this.onProgress(t),this.loadCount||(this.dispatchEvent({type:"onComplete",content:this}),this.onComplete&&this.onComplete())},n.JsonLoader=function(t,e){n.EventTarget.call(this),this.url=t,this.crossorigin=e,this.baseUrl=t.replace(/[^\/]*$/,""),this.loaded=!1},n.JsonLoader.prototype.constructor=n.JsonLoader,n.JsonLoader.prototype.load=function(){this.ajaxRequest=new n.AjaxRequest(this.crossorigin);var t=this;this.ajaxRequest.onreadystatechange=function(){t.onJSONLoaded()},this.ajaxRequest.open("GET",this.url,!0),this.ajaxRequest.overrideMimeType&&this.ajaxRequest.overrideMimeType("application/json"),this.ajaxRequest.send(null)},n.JsonLoader.prototype.onJSONLoaded=function(){if(4===this.ajaxRequest.readyState)if(200===this.ajaxRequest.status||-1===window.location.protocol.indexOf("http"))if(this.json=JSON.parse(this.ajaxRequest.responseText),this.json.frames){var t=this,e=this.baseUrl+this.json.meta.image,i=new n.ImageLoader(e,this.crossorigin),r=this.json.frames;this.texture=i.texture.baseTexture,i.addEventListener("loaded",function(){t.onLoaded()});for(var s in r){var o=r[s].frame;if(o&&(n.TextureCache[s]=new n.Texture(this.texture,{x:o.x,y:o.y,width:o.w,height:o.h}),r[s].trimmed)){var a=n.TextureCache[s],h=r[s].sourceSize,l=r[s].spriteSourceSize;a.trim=new n.Rectangle(l.x,l.y,h.w,h.h)}}i.load()}else if(this.json.bones){var c=new u.SkeletonJson,d=c.readSkeletonData(this.json);n.AnimCache[this.url]=d,this.onLoaded()}else this.onLoaded();else this.onError()},n.JsonLoader.prototype.onLoaded=function(){this.loaded=!0,this.dispatchEvent({type:"loaded",content:this})},n.JsonLoader.prototype.onError=function(){this.dispatchEvent({type:"error",content:this})},n.AtlasLoader=function(t,e){n.EventTarget.call(this),this.url=t,this.baseUrl=t.replace(/[^\/]*$/,""),this.crossorigin=e,this.loaded=!1},n.AtlasLoader.constructor=n.AtlasLoader,n.AtlasLoader.prototype.load=function(){this.ajaxRequest=new n.AjaxRequest,this.ajaxRequest.onreadystatechange=this.onAtlasLoaded.bind(this),this.ajaxRequest.open("GET",this.url,!0),this.ajaxRequest.overrideMimeType&&this.ajaxRequest.overrideMimeType("application/json"),this.ajaxRequest.send(null)},n.AtlasLoader.prototype.onAtlasLoaded=function(){if(4===this.ajaxRequest.readyState)if(200===this.ajaxRequest.status||-1===window.location.href.indexOf("http")){this.atlas={meta:{image:[]},frames:[]};var t=this.ajaxRequest.responseText.split(/\r?\n/),e=-3,i=0,r=null,s=!1,o=0,a=0,h=this.onLoaded.bind(this);for(o=0;o<t.length;o++)if(t[o]=t[o].replace(/^\s+|\s+$/g,""),""===t[o]&&(s=o+1),t[o].length>0){if(s===o)this.atlas.meta.image.push(t[o]),i=this.atlas.meta.image.length-1,this.atlas.frames.push({}),e=-3;else if(e>0)if(1===e%7)null!=r&&(this.atlas.frames[i][r.name]=r),r={name:t[o],frame:{}};else{var l=t[o].split(" ");if(3===e%7)r.frame.x=Number(l[1].replace(",","")),r.frame.y=Number(l[2]);else if(4===e%7)r.frame.w=Number(l[1].replace(",","")),r.frame.h=Number(l[2]);else if(5===e%7){var u={x:0,y:0,w:Number(l[1].replace(",","")),h:Number(l[2])};u.w>r.frame.w||u.h>r.frame.h?(r.trimmed=!0,r.realSize=u):r.trimmed=!1}}e++}if(null!=r&&(this.atlas.frames[i][r.name]=r),this.atlas.meta.image.length>0){for(this.images=[],a=0;a<this.atlas.meta.image.length;a++){var c=this.baseUrl+this.atlas.meta.image[a],d=this.atlas.frames[a];this.images.push(new n.ImageLoader(c,this.crossorigin));for(o in d){var p=d[o].frame;p&&(n.TextureCache[o]=new n.Texture(this.images[a].texture.baseTexture,{x:p.x,y:p.y,width:p.w,height:p.h}),d[o].trimmed&&(n.TextureCache[o].realSize=d[o].realSize,n.TextureCache[o].trim.x=0,n.TextureCache[o].trim.y=0))}}for(this.currentImageId=0,a=0;a<this.images.length;a++)this.images[a].addEventListener("loaded",h);this.images[this.currentImageId].load()}else this.onLoaded()}else this.onError()},n.AtlasLoader.prototype.onLoaded=function(){this.images.length-1>this.currentImageId?(this.currentImageId++,this.images[this.currentImageId].load()):(this.loaded=!0,this.dispatchEvent({type:"loaded",content:this}))},n.AtlasLoader.prototype.onError=function(){this.dispatchEvent({type:"error",content:this})},n.SpriteSheetLoader=function(t,e){n.EventTarget.call(this),this.url=t,this.crossorigin=e,this.baseUrl=t.replace(/[^\/]*$/,""),this.texture=null,this.frames={}},n.SpriteSheetLoader.prototype.constructor=n.SpriteSheetLoader,n.SpriteSheetLoader.prototype.load=function(){var t=this,e=new n.JsonLoader(this.url,this.crossorigin);e.addEventListener("loaded",function(e){t.json=e.content.json,t.onLoaded()}),e.load()},n.SpriteSheetLoader.prototype.onLoaded=function(){this.dispatchEvent({type:"loaded",content:this})},n.ImageLoader=function(t,e){n.EventTarget.call(this),this.texture=n.Texture.fromImage(t,e),this.frames=[]},n.ImageLoader.prototype.constructor=n.ImageLoader,n.ImageLoader.prototype.load=function(){if(this.texture.baseTexture.hasLoaded)this.onLoaded();else{var t=this;this.texture.baseTexture.addEventListener("loaded",function(){t.onLoaded()})}},n.ImageLoader.prototype.onLoaded=function(){this.dispatchEvent({type:"loaded",content:this})},n.ImageLoader.prototype.loadFramedSpriteSheet=function(t,e,i){this.frames=[];for(var r=Math.floor(this.texture.width/t),s=Math.floor(this.texture.height/e),o=0,a=0;s>a;a++)for(var h=0;r>h;h++,o++){var l=new n.Texture(this.texture,{x:h*t,y:a*e,width:t,height:e});this.frames.push(l),i&&(n.TextureCache[i+"-"+o]=l)}if(this.texture.baseTexture.hasLoaded)this.onLoaded();else{var u=this;this.texture.baseTexture.addEventListener("loaded",function(){u.onLoaded()})}},n.BitmapFontLoader=function(t,e){n.EventTarget.call(this),this.url=t,this.crossorigin=e,this.baseUrl=t.replace(/[^\/]*$/,""),this.texture=null},n.BitmapFontLoader.prototype.constructor=n.BitmapFontLoader,n.BitmapFontLoader.prototype.load=function(){this.ajaxRequest=new n.AjaxRequest;var t=this;this.ajaxRequest.onreadystatechange=function(){t.onXMLLoaded()},this.ajaxRequest.open("GET",this.url,!0),this.ajaxRequest.overrideMimeType&&this.ajaxRequest.overrideMimeType("application/xml"),this.ajaxRequest.send(null)},n.BitmapFontLoader.prototype.onXMLLoaded=function(){if(4===this.ajaxRequest.readyState&&(200===this.ajaxRequest.status||-1===window.location.protocol.indexOf("http"))){var t=this.ajaxRequest.responseXML;if(!t||/MSIE 9/i.test(navigator.userAgent)||navigator.isCocoonJS)if("function"==typeof window.DOMParser){var e=new DOMParser;t=e.parseFromString(this.ajaxRequest.responseText,"text/xml")}else{var i=document.createElement("div");i.innerHTML=this.ajaxRequest.responseText,t=i}var r=this.baseUrl+t.getElementsByTagName("page")[0].getAttribute("file"),s=new n.ImageLoader(r,this.crossorigin);this.texture=s.texture.baseTexture;var o={},a=t.getElementsByTagName("info")[0],h=t.getElementsByTagName("common")[0];o.font=a.getAttribute("face"),o.size=parseInt(a.getAttribute("size"),10),o.lineHeight=parseInt(h.getAttribute("lineHeight"),10),o.chars={};for(var l=t.getElementsByTagName("char"),u=0;u<l.length;u++){var c=parseInt(l[u].getAttribute("id"),10),d=new n.Rectangle(parseInt(l[u].getAttribute("x"),10),parseInt(l[u].getAttribute("y"),10),parseInt(l[u].getAttribute("width"),10),parseInt(l[u].getAttribute("height"),10));o.chars[c]={xOffset:parseInt(l[u].getAttribute("xoffset"),10),yOffset:parseInt(l[u].getAttribute("yoffset"),10),xAdvance:parseInt(l[u].getAttribute("xadvance"),10),kerning:{},texture:n.TextureCache[c]=new n.Texture(this.texture,d)}}var p=t.getElementsByTagName("kerning");for(u=0;u<p.length;u++){var f=parseInt(p[u].getAttribute("first"),10),g=parseInt(p[u].getAttribute("second"),10),m=parseInt(p[u].getAttribute("amount"),10);o.chars[g].kerning[f]=m}n.BitmapText.fonts[o.font]=o;var v=this;s.addEventListener("loaded",function(){v.onLoaded()}),s.load()}},n.BitmapFontLoader.prototype.onLoaded=function(){this.dispatchEvent({type:"loaded",content:this})},n.SpineLoader=function(t,e){n.EventTarget.call(this),this.url=t,this.crossorigin=e,this.loaded=!1},n.SpineLoader.prototype.constructor=n.SpineLoader,n.SpineLoader.prototype.load=function(){var t=this,e=new n.JsonLoader(this.url,this.crossorigin);e.addEventListener("loaded",function(e){t.json=e.content.json,t.onLoaded()}),e.load()},n.SpineLoader.prototype.onLoaded=function(){this.loaded=!0,this.dispatchEvent({type:"loaded",content:this})},n.AbstractFilter=function(t,e){this.passes=[this],this.shaders=[],this.dirty=!0,this.padding=0,this.uniforms=e||{},this.fragmentSrc=t||[]},n.AlphaMaskFilter=function(t){n.AbstractFilter.call(this),this.passes=[this],t.baseTexture._powerOf2=!0,this.uniforms={mask:{type:"sampler2D",value:t},mapDimensions:{type:"2f",value:{x:1,y:5112}},dimensions:{type:"4fv",value:[0,0,0,0]}},t.baseTexture.hasLoaded?(this.uniforms.mask.value.x=t.width,this.uniforms.mask.value.y=t.height):(this.boundLoadedFunction=this.onTextureLoaded.bind(this),t.baseTexture.on("loaded",this.boundLoadedFunction)),this.fragmentSrc=["precision mediump float;","varying vec2 vTextureCoord;","varying vec4 vColor;","uniform sampler2D mask;","uniform sampler2D uSampler;","uniform vec2 offset;","uniform vec4 dimensions;","uniform vec2 mapDimensions;","void main(void) {","   vec2 mapCords = vTextureCoord.xy;","   mapCords += (dimensions.zw + offset)/ dimensions.xy ;","   mapCords.y *= -1.0;","   mapCords.y += 1.0;","   mapCords *= dimensions.xy / mapDimensions;","   vec4 original =  texture2D(uSampler, vTextureCoord);","   float maskAlpha =  texture2D(mask, mapCords).r;","   original *= maskAlpha;","   gl_FragColor =  original;","}"]},n.AlphaMaskFilter.prototype=Object.create(n.AbstractFilter.prototype),n.AlphaMaskFilter.prototype.constructor=n.AlphaMaskFilter,n.AlphaMaskFilter.prototype.onTextureLoaded=function(){this.uniforms.mapDimensions.value.x=this.uniforms.mask.value.width,this.uniforms.mapDimensions.value.y=this.uniforms.mask.value.height,this.uniforms.mask.value.baseTexture.off("loaded",this.boundLoadedFunction)},Object.defineProperty(n.AlphaMaskFilter.prototype,"map",{get:function(){return this.uniforms.mask.value},set:function(t){this.uniforms.mask.value=t}}),n.ColorMatrixFilter=function(){n.AbstractFilter.call(this),this.passes=[this],this.uniforms={matrix:{type:"mat4",value:[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1]}},this.fragmentSrc=["precision mediump float;","varying vec2 vTextureCoord;","varying vec4 vColor;","uniform float invert;","uniform mat4 matrix;","uniform sampler2D uSampler;","void main(void) {","   gl_FragColor = texture2D(uSampler, vTextureCoord) * matrix;","}"]},n.ColorMatrixFilter.prototype=Object.create(n.AbstractFilter.prototype),n.ColorMatrixFilter.prototype.constructor=n.ColorMatrixFilter,Object.defineProperty(n.ColorMatrixFilter.prototype,"matrix",{get:function(){return this.uniforms.matrix.value},set:function(t){this.uniforms.matrix.value=t}}),n.GrayFilter=function(){n.AbstractFilter.call(this),this.passes=[this],this.uniforms={gray:{type:"1f",value:1}},this.fragmentSrc=["precision mediump float;","varying vec2 vTextureCoord;","varying vec4 vColor;","uniform sampler2D uSampler;","uniform float gray;","void main(void) {","   gl_FragColor = texture2D(uSampler, vTextureCoord);","   gl_FragColor.rgb = mix(gl_FragColor.rgb, vec3(0.2126*gl_FragColor.r + 0.7152*gl_FragColor.g + 0.0722*gl_FragColor.b), gray);","}"]},n.GrayFilter.prototype=Object.create(n.AbstractFilter.prototype),n.GrayFilter.prototype.constructor=n.GrayFilter,Object.defineProperty(n.GrayFilter.prototype,"gray",{get:function(){return this.uniforms.gray.value},set:function(t){this.uniforms.gray.value=t}}),n.DisplacementFilter=function(t){n.AbstractFilter.call(this),this.passes=[this],t.baseTexture._powerOf2=!0,this.uniforms={displacementMap:{type:"sampler2D",value:t},scale:{type:"2f",value:{x:30,y:30}},offset:{type:"2f",value:{x:0,y:0}},mapDimensions:{type:"2f",value:{x:1,y:5112}},dimensions:{type:"4fv",value:[0,0,0,0]}},t.baseTexture.hasLoaded?(this.uniforms.mapDimensions.value.x=t.width,this.uniforms.mapDimensions.value.y=t.height):(this.boundLoadedFunction=this.onTextureLoaded.bind(this),t.baseTexture.on("loaded",this.boundLoadedFunction)),this.fragmentSrc=["precision mediump float;","varying vec2 vTextureCoord;","varying vec4 vColor;","uniform sampler2D displacementMap;","uniform sampler2D uSampler;","uniform vec2 scale;","uniform vec2 offset;","uniform vec4 dimensions;","uniform vec2 mapDimensions;","void main(void) {","   vec2 mapCords = vTextureCoord.xy;","   mapCords += (dimensions.zw + offset)/ dimensions.xy ;","   mapCords.y *= -1.0;","   mapCords.y += 1.0;","   vec2 matSample = texture2D(displacementMap, mapCords).xy;","   matSample -= 0.5;","   matSample *= scale;","   matSample /= mapDimensions;","   gl_FragColor = texture2D(uSampler, vec2(vTextureCoord.x + matSample.x, vTextureCoord.y + matSample.y));","   gl_FragColor.rgb = mix( gl_FragColor.rgb, gl_FragColor.rgb, 1.0);","   vec2 cord = vTextureCoord;","}"]},n.DisplacementFilter.prototype=Object.create(n.AbstractFilter.prototype),n.DisplacementFilter.prototype.constructor=n.DisplacementFilter,n.DisplacementFilter.prototype.onTextureLoaded=function(){this.uniforms.mapDimensions.value.x=this.uniforms.displacementMap.value.width,this.uniforms.mapDimensions.value.y=this.uniforms.displacementMap.value.height,this.uniforms.displacementMap.value.baseTexture.off("loaded",this.boundLoadedFunction)},Object.defineProperty(n.DisplacementFilter.prototype,"map",{get:function(){return this.uniforms.displacementMap.value},set:function(t){this.uniforms.displacementMap.value=t}}),Object.defineProperty(n.DisplacementFilter.prototype,"scale",{get:function(){return this.uniforms.scale.value},set:function(t){this.uniforms.scale.value=t}}),Object.defineProperty(n.DisplacementFilter.prototype,"offset",{get:function(){return this.uniforms.offset.value},set:function(t){this.uniforms.offset.value=t}}),n.PixelateFilter=function(){n.AbstractFilter.call(this),this.passes=[this],this.uniforms={invert:{type:"1f",value:0},dimensions:{type:"4fv",value:new Float32Array([1e4,100,10,10])},pixelSize:{type:"2f",value:{x:10,y:10}}},this.fragmentSrc=["precision mediump float;","varying vec2 vTextureCoord;","varying vec4 vColor;","uniform vec2 testDim;","uniform vec4 dimensions;","uniform vec2 pixelSize;","uniform sampler2D uSampler;","void main(void) {","   vec2 coord = vTextureCoord;","   vec2 size = dimensions.xy/pixelSize;","   vec2 color = floor( ( vTextureCoord * size ) ) / size + pixelSize/dimensions.xy * 0.5;","   gl_FragColor = texture2D(uSampler, color);","}"]},n.PixelateFilter.prototype=Object.create(n.AbstractFilter.prototype),n.PixelateFilter.prototype.constructor=n.PixelateFilter,Object.defineProperty(n.PixelateFilter.prototype,"size",{get:function(){return this.uniforms.pixelSize.value},set:function(t){this.dirty=!0,this.uniforms.pixelSize.value=t}}),n.BlurXFilter=function(){n.AbstractFilter.call(this),this.passes=[this],this.uniforms={blur:{type:"1f",value:1/512}},this.fragmentSrc=["precision mediump float;","varying vec2 vTextureCoord;","varying vec4 vColor;","uniform float blur;","uniform sampler2D uSampler;","void main(void) {","   vec4 sum = vec4(0.0);","   sum += texture2D(uSampler, vec2(vTextureCoord.x - 4.0*blur, vTextureCoord.y)) * 0.05;","   sum += texture2D(uSampler, vec2(vTextureCoord.x - 3.0*blur, vTextureCoord.y)) * 0.09;","   sum += texture2D(uSampler, vec2(vTextureCoord.x - 2.0*blur, vTextureCoord.y)) * 0.12;","   sum += texture2D(uSampler, vec2(vTextureCoord.x - blur, vTextureCoord.y)) * 0.15;","   sum += texture2D(uSampler, vec2(vTextureCoord.x, vTextureCoord.y)) * 0.16;","   sum += texture2D(uSampler, vec2(vTextureCoord.x + blur, vTextureCoord.y)) * 0.15;","   sum += texture2D(uSampler, vec2(vTextureCoord.x + 2.0*blur, vTextureCoord.y)) * 0.12;","   sum += texture2D(uSampler, vec2(vTextureCoord.x + 3.0*blur, vTextureCoord.y)) * 0.09;","   sum += texture2D(uSampler, vec2(vTextureCoord.x + 4.0*blur, vTextureCoord.y)) * 0.05;","   gl_FragColor = sum;","}"]},n.BlurXFilter.prototype=Object.create(n.AbstractFilter.prototype),n.BlurXFilter.prototype.constructor=n.BlurXFilter,Object.defineProperty(n.BlurXFilter.prototype,"blur",{get:function(){return this.uniforms.blur.value/(1/7e3)},set:function(t){this.dirty=!0,this.uniforms.blur.value=1/7e3*t}}),n.BlurYFilter=function(){n.AbstractFilter.call(this),this.passes=[this],this.uniforms={blur:{type:"1f",value:1/512}},this.fragmentSrc=["precision mediump float;","varying vec2 vTextureCoord;","varying vec4 vColor;","uniform float blur;","uniform sampler2D uSampler;","void main(void) {","   vec4 sum = vec4(0.0);","   sum += texture2D(uSampler, vec2(vTextureCoord.x, vTextureCoord.y - 4.0*blur)) * 0.05;","   sum += texture2D(uSampler, vec2(vTextureCoord.x, vTextureCoord.y - 3.0*blur)) * 0.09;","   sum += texture2D(uSampler, vec2(vTextureCoord.x, vTextureCoord.y - 2.0*blur)) * 0.12;","   sum += texture2D(uSampler, vec2(vTextureCoord.x, vTextureCoord.y - blur)) * 0.15;","   sum += texture2D(uSampler, vec2(vTextureCoord.x, vTextureCoord.y)) * 0.16;","   sum += texture2D(uSampler, vec2(vTextureCoord.x, vTextureCoord.y + blur)) * 0.15;","   sum += texture2D(uSampler, vec2(vTextureCoord.x, vTextureCoord.y + 2.0*blur)) * 0.12;","   sum += texture2D(uSampler, vec2(vTextureCoord.x, vTextureCoord.y + 3.0*blur)) * 0.09;","   sum += texture2D(uSampler, vec2(vTextureCoord.x, vTextureCoord.y + 4.0*blur)) * 0.05;","   gl_FragColor = sum;","}"]},n.BlurYFilter.prototype=Object.create(n.AbstractFilter.prototype),n.BlurYFilter.prototype.constructor=n.BlurYFilter,Object.defineProperty(n.BlurYFilter.prototype,"blur",{get:function(){return this.uniforms.blur.value/(1/7e3)},set:function(t){this.uniforms.blur.value=1/7e3*t}}),n.BlurFilter=function(){this.blurXFilter=new n.BlurXFilter,this.blurYFilter=new n.BlurYFilter,this.passes=[this.blurXFilter,this.blurYFilter]},Object.defineProperty(n.BlurFilter.prototype,"blur",{get:function(){return this.blurXFilter.blur},set:function(t){this.blurXFilter.blur=this.blurYFilter.blur=t}}),Object.defineProperty(n.BlurFilter.prototype,"blurX",{get:function(){return this.blurXFilter.blur},set:function(t){this.blurXFilter.blur=t}}),Object.defineProperty(n.BlurFilter.prototype,"blurY",{get:function(){return this.blurYFilter.blur},set:function(t){this.blurYFilter.blur=t}}),n.InvertFilter=function(){n.AbstractFilter.call(this),this.passes=[this],this.uniforms={invert:{type:"1f",value:1}},this.fragmentSrc=["precision mediump float;","varying vec2 vTextureCoord;","varying vec4 vColor;","uniform float invert;","uniform sampler2D uSampler;","void main(void) {","   gl_FragColor = texture2D(uSampler, vTextureCoord);","   gl_FragColor.rgb = mix( (vec3(1)-gl_FragColor.rgb) * gl_FragColor.a, gl_FragColor.rgb, 1.0 - invert);","}"]},n.InvertFilter.prototype=Object.create(n.AbstractFilter.prototype),n.InvertFilter.prototype.constructor=n.InvertFilter,Object.defineProperty(n.InvertFilter.prototype,"invert",{get:function(){return this.uniforms.invert.value},set:function(t){this.uniforms.invert.value=t}}),n.SepiaFilter=function(){n.AbstractFilter.call(this),this.passes=[this],this.uniforms={sepia:{type:"1f",value:1}},this.fragmentSrc=["precision mediump float;","varying vec2 vTextureCoord;","varying vec4 vColor;","uniform float sepia;","uniform sampler2D uSampler;","const mat3 sepiaMatrix = mat3(0.3588, 0.7044, 0.1368, 0.2990, 0.5870, 0.1140, 0.2392, 0.4696, 0.0912);","void main(void) {","   gl_FragColor = texture2D(uSampler, vTextureCoord);","   gl_FragColor.rgb = mix( gl_FragColor.rgb, gl_FragColor.rgb * sepiaMatrix, sepia);","}"]},n.SepiaFilter.prototype=Object.create(n.AbstractFilter.prototype),n.SepiaFilter.prototype.constructor=n.SepiaFilter,Object.defineProperty(n.SepiaFilter.prototype,"sepia",{get:function(){return this.uniforms.sepia.value},set:function(t){this.uniforms.sepia.value=t}}),n.TwistFilter=function(){n.AbstractFilter.call(this),this.passes=[this],this.uniforms={radius:{type:"1f",value:.5},angle:{type:"1f",value:5},offset:{type:"2f",value:{x:.5,y:.5}}},this.fragmentSrc=["precision mediump float;","varying vec2 vTextureCoord;","varying vec4 vColor;","uniform vec4 dimensions;","uniform sampler2D uSampler;","uniform float radius;","uniform float angle;","uniform vec2 offset;","void main(void) {","   vec2 coord = vTextureCoord - offset;","   float distance = length(coord);","   if (distance < radius) {","       float ratio = (radius - distance) / radius;","       float angleMod = ratio * ratio * angle;","       float s = sin(angleMod);","       float c = cos(angleMod);","       coord = vec2(coord.x * c - coord.y * s, coord.x * s + coord.y * c);","   }","   gl_FragColor = texture2D(uSampler, coord+offset);","}"]},n.TwistFilter.prototype=Object.create(n.AbstractFilter.prototype),n.TwistFilter.prototype.constructor=n.TwistFilter,Object.defineProperty(n.TwistFilter.prototype,"offset",{get:function(){return this.uniforms.offset.value},set:function(t){this.dirty=!0,this.uniforms.offset.value=t}}),Object.defineProperty(n.TwistFilter.prototype,"radius",{get:function(){return this.uniforms.radius.value},set:function(t){this.dirty=!0,this.uniforms.radius.value=t}}),Object.defineProperty(n.TwistFilter.prototype,"angle",{get:function(){return this.uniforms.angle.value},set:function(t){this.dirty=!0,this.uniforms.angle.value=t}}),n.ColorStepFilter=function(){n.AbstractFilter.call(this),this.passes=[this],this.uniforms={step:{type:"1f",value:5}},this.fragmentSrc=["precision mediump float;","varying vec2 vTextureCoord;","varying vec4 vColor;","uniform sampler2D uSampler;","uniform float step;","void main(void) {","   vec4 color = texture2D(uSampler, vTextureCoord);","   color = floor(color * step) / step;","   gl_FragColor = color;","}"]},n.ColorStepFilter.prototype=Object.create(n.AbstractFilter.prototype),n.ColorStepFilter.prototype.constructor=n.ColorStepFilter,Object.defineProperty(n.ColorStepFilter.prototype,"step",{get:function(){return this.uniforms.step.value},set:function(t){this.uniforms.step.value=t}}),n.DotScreenFilter=function(){n.AbstractFilter.call(this),this.passes=[this],this.uniforms={scale:{type:"1f",value:1},angle:{type:"1f",value:5},dimensions:{type:"4fv",value:[0,0,0,0]}},this.fragmentSrc=["precision mediump float;","varying vec2 vTextureCoord;","varying vec4 vColor;","uniform vec4 dimensions;","uniform sampler2D uSampler;","uniform float angle;","uniform float scale;","float pattern() {","   float s = sin(angle), c = cos(angle);","   vec2 tex = vTextureCoord * dimensions.xy;","   vec2 point = vec2(","       c * tex.x - s * tex.y,","       s * tex.x + c * tex.y","   ) * scale;","   return (sin(point.x) * sin(point.y)) * 4.0;","}","void main() {","   vec4 color = texture2D(uSampler, vTextureCoord);","   float average = (color.r + color.g + color.b) / 3.0;","   gl_FragColor = vec4(vec3(average * 10.0 - 5.0 + pattern()), color.a);","}"]},n.DotScreenFilter.prototype=Object.create(n.DotScreenFilter.prototype),n.DotScreenFilter.prototype.constructor=n.DotScreenFilter,Object.defineProperty(n.DotScreenFilter.prototype,"scale",{get:function(){return this.uniforms.scale.value},set:function(t){this.dirty=!0,this.uniforms.scale.value=t}}),Object.defineProperty(n.DotScreenFilter.prototype,"angle",{get:function(){return this.uniforms.angle.value},set:function(t){this.dirty=!0,this.uniforms.angle.value=t}}),n.CrossHatchFilter=function(){n.AbstractFilter.call(this),this.passes=[this],this.uniforms={blur:{type:"1f",value:1/512}},this.fragmentSrc=["precision mediump float;","varying vec2 vTextureCoord;","varying vec4 vColor;","uniform float blur;","uniform sampler2D uSampler;","void main(void) {","    float lum = length(texture2D(uSampler, vTextureCoord.xy).rgb);","    gl_FragColor = vec4(1.0, 1.0, 1.0, 1.0);","    if (lum < 1.00) {","        if (mod(gl_FragCoord.x + gl_FragCoord.y, 10.0) == 0.0) {","            gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);","        }","    }","    if (lum < 0.75) {","        if (mod(gl_FragCoord.x - gl_FragCoord.y, 10.0) == 0.0) {","            gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);","        }","    }","    if (lum < 0.50) {","        if (mod(gl_FragCoord.x + gl_FragCoord.y - 5.0, 10.0) == 0.0) {","            gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);","        }","    }","    if (lum < 0.3) {","        if (mod(gl_FragCoord.x - gl_FragCoord.y - 5.0, 10.0) == 0.0) {","            gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);","        }","    }","}"]},n.CrossHatchFilter.prototype=Object.create(n.AbstractFilter.prototype),n.CrossHatchFilter.prototype.constructor=n.BlurYFilter,Object.defineProperty(n.CrossHatchFilter.prototype,"blur",{get:function(){return this.uniforms.blur.value/(1/7e3)},set:function(t){this.uniforms.blur.value=1/7e3*t}}),n.RGBSplitFilter=function(){n.AbstractFilter.call(this),this.passes=[this],this.uniforms={red:{type:"2f",value:{x:20,y:20}},green:{type:"2f",value:{x:-20,y:20}},blue:{type:"2f",value:{x:20,y:-20}},dimensions:{type:"4fv",value:[0,0,0,0]}},this.fragmentSrc=["precision mediump float;","varying vec2 vTextureCoord;","varying vec4 vColor;","uniform vec2 red;","uniform vec2 green;","uniform vec2 blue;","uniform vec4 dimensions;","uniform sampler2D uSampler;","void main(void) {","   gl_FragColor.r = texture2D(uSampler, vTextureCoord + red/dimensions.xy).r;","   gl_FragColor.g = texture2D(uSampler, vTextureCoord + green/dimensions.xy).g;","   gl_FragColor.b = texture2D(uSampler, vTextureCoord + blue/dimensions.xy).b;","   gl_FragColor.a = texture2D(uSampler, vTextureCoord).a;","}"]},n.RGBSplitFilter.prototype=Object.create(n.AbstractFilter.prototype),n.RGBSplitFilter.prototype.constructor=n.RGBSplitFilter,Object.defineProperty(n.RGBSplitFilter.prototype,"angle",{get:function(){return this.uniforms.blur.value/(1/7e3)},set:function(t){this.uniforms.blur.value=1/7e3*t}}),"undefined"!=typeof e?("undefined"!=typeof t&&t.exports&&(e=t.exports=n),e.PIXI=n):"undefined"!=typeof s&&s.amd?s(n):i.PIXI=n}.call(this),n("undefined"!=typeof PIXI?PIXI:window.PIXI)}.call(t,void 0,void 0,void 0,void 0,function(t){module.exports=t})}.call(this,"undefined"!=typeof self?self:"undefined"!=typeof window?window:{});
},{}],18:[function(require,module,exports){
"use strict";function mixin(t,e){is.Function(e)?object.extend(t,e.prototype):object.extend(t,e)}function applyMixins(t){var e=t.__mixin__;is.Array(e)||(e=[e]);for(var n={},o=0,i=e.length;i>o;o++)mixin(n,e[o]);return delete t.__mixin__,object.extend(n,t)}function inheritFrom(t,e,n,o){return null==e&&(e=function(){t.apply(this,arguments)}),n.constructor=e,t!==Concur&&(object.inherits(e,t),e.__super__=t.prototype),object.extend(e.prototype,n),object.extend(e,o),e}var is=require("isomorph/is"),object=require("isomorph/object"),Concur=module.exports=function(){};Concur.__mro__=[],Concur.extend=function(t,e){t=t||{},e=e||{},"undefined"!=typeof this.prototype.__meta__&&this.prototype.__meta__(t,e);var n=object.get(t,"constructor",null);return object.hasOwn(t,"__mixin__")&&(t=applyMixins(t)),object.hasOwn(e,"__mixin__")&&(e=applyMixins(e)),n=inheritFrom(this,n,t,e),n.extend=this.extend,n.__mro__=[n].concat(this.__mro__),n};
},{"isomorph/is":19,"isomorph/object":20}],19:[function(require,module,exports){
"use strict";function isArray(t){return"[object Array]"==toString.call(t)}function isBoolean(t){return"[object Boolean]"==toString.call(t)}function isDate(t){return"[object Date]"==toString.call(t)}function isError(t){return"[object Error]"==toString.call(t)}function isFunction(t){return"[object Function]"==toString.call(t)}function isNumber(t){return"[object Number]"==toString.call(t)}function isObject(t){return"[object Object]"==toString.call(t)}function isRegExp(t){return"[object RegExp]"==toString.call(t)}function isString(t){return"[object String]"==toString.call(t)}function isEmpty(t){for(var r in t)return!1;return!0}var toString=Object.prototype.toString;module.exports={Array:isArray,Boolean:isBoolean,Date:isDate,Empty:isEmpty,Error:isError,Function:isFunction,NaN:isNaN,Number:isNumber,Object:isObject,RegExp:isRegExp,String:isString};
},{}],20:[function(require,module,exports){
"use strict";function extend(t){for(var r,n=1,e=arguments.length;e>n;n++)if(r=arguments[n])for(var o in r)hasOwn(r,o)&&(t[o]=r[o]);return t}function inherits(t,r){var n=function(){};return n.prototype=r.prototype,t.prototype=new n,t.prototype.constructor=t,t}function items(t){var r=[];for(var n in t)hasOwn(t,n)&&r.push([n,t[n]]);return r}function fromItems(t){for(var r,n={},e=0,o=t.length;o>e;e++)r=t[e],n[r[0]]=r[1];return n}function lookup(t){for(var r={},n=0,e=t.length;e>n;n++)r[""+t[n]]=!0;return r}function get(t,r,n){return hasOwn(t,r)?t[r]:n}function pop(t,r,n){if(null==t)throw new Error("popProp was given "+t);if(hasOwn(t,r)){var e=t[r];return delete t[r],e}if(2==arguments.length)throw new Error("popProp was given an object which didn't have an own '"+r+"' property, without a default value to return");return n}function setDefault(t,r,n){if(null==t)throw new Error("setDefault was given "+t);return n=n||null,hasOwn(t,r)?t[r]:(t[r]=n,n)}var hasOwn=function(){var t=Object.prototype.hasOwnProperty;return function(r,n){return t.call(r,n)}}();module.exports={hasOwn:hasOwn,extend:extend,inherits:inherits,items:items,fromItems:fromItems,lookup:lookup,get:get,pop:pop,setDefault:setDefault};
},{}],21:[function(require,module,exports){
!function(n){!function(){function r(n,r,t){for(var e=(t||0)-1,u=n?n.length:0;++e<u;)if(n[e]===r)return e;return-1}function t(n,t){var e=typeof t;if(n=n.cache,"boolean"==e||null==t)return n[t]?0:-1;"number"!=e&&"string"!=e&&(e="object");var u="number"==e?t:d+t;return n=(n=n[e])&&n[u],"object"==e?n&&r(n,t)>-1?0:-1:n?0:-1}function e(n){var r=this.cache,t=typeof n;if("boolean"==t||null==n)r[n]=!0;else{"number"!=t&&"string"!=t&&(t="object");var e="number"==t?n:d+n,u=r[t]||(r[t]={});"object"==t?(u[e]||(u[e]=[])).push(n):u[e]=!0}}function u(n){return n.charCodeAt(0)}function o(n,r){for(var t=n.criteria,e=r.criteria,u=-1,o=t.length;++u<o;){var a=t[u],i=e[u];if(a!==i){if(a>i||"undefined"==typeof a)return 1;if(i>a||"undefined"==typeof i)return-1}}return n.index-r.index}function a(n){var r=-1,t=n.length,u=n[0],o=n[0|t/2],a=n[t-1];if(u&&"object"==typeof u&&o&&"object"==typeof o&&a&&"object"==typeof a)return!1;var i=l();i["false"]=i["null"]=i["true"]=i.undefined=!1;var f=l();for(f.array=n,f.cache=i,f.push=e;++r<t;)f.push(n[r]);return f}function i(n){return"\\"+H[n]}function f(){return g.pop()||[]}function l(){return y.pop()||{array:null,cache:null,criteria:null,"false":!1,index:0,"null":!1,number:null,object:null,push:null,string:null,"true":!1,undefined:!1,value:null}}function c(n){n.length=0,g.length<_&&g.push(n)}function p(n){var r=n.cache;r&&p(r),n.array=n.cache=n.criteria=n.object=n.number=n.string=n.value=null,y.length<_&&y.push(n)}function s(n,r,t){r||(r=0),"undefined"==typeof t&&(t=n?n.length:0);for(var e=-1,u=t-r||0,o=Array(0>u?0:u);++e<u;)o[e]=n[r+e];return o}function v(n){function e(n){return n&&"object"==typeof n&&!Xe(n)&&De.call(n,"__wrapped__")?n:new g(n)}function g(n,r){this.__chain__=!!r,this.__wrapped__=n}function y(n){function r(){if(e){var n=s(e);Te.apply(n,arguments)}if(this instanceof r){var o=H(t.prototype),a=t.apply(o,n||arguments);return Ir(a)?a:o}return t.apply(u,n||arguments)}var t=n[0],e=n[2],u=n[4];return Qe(r,n),r}function _(n,r,t,e,u){if(t){var o=t(n);if("undefined"!=typeof o)return o}var a=Ir(n);if(!a)return n;var i=Oe.call(n);if(!U[i])return n;var l=He[i];switch(i){case B:case W:return new l(+n);case z:case K:return new l(n);case P:return o=l(n.source,O.exec(n)),o.lastIndex=n.lastIndex,o}var p=Xe(n);if(r){var v=!e;e||(e=f()),u||(u=f());for(var h=e.length;h--;)if(e[h]==n)return u[h];o=p?l(n.length):{}}else o=p?s(n):uu({},n);return p&&(De.call(n,"index")&&(o.index=n.index),De.call(n,"input")&&(o.input=n.input)),r?(e.push(n),u.push(o),(p?Qr:iu)(n,function(n,a){o[a]=_(n,r,t,e,u)}),v&&(c(e),c(u)),o):o}function H(n){return Ir(n)?qe(n):{}}function Q(n,r,t){if("function"!=typeof n)return Xt;if("undefined"==typeof r||!("prototype"in n))return n;var e=n.__bindData__;if("undefined"==typeof e&&(Je.funcNames&&(e=!n.name),e=e||!Je.funcDecomp,!e)){var u=Se.call(n);Je.funcNames||(e=!N.test(u)),e||(e=S.test(u),Qe(n,e))}if(e===!1||e!==!0&&1&e[1])return n;switch(t){case 1:return function(t){return n.call(r,t)};case 2:return function(t,e){return n.call(r,t,e)};case 3:return function(t,e,u){return n.call(r,t,e,u)};case 4:return function(t,e,u,o){return n.call(r,t,e,u,o)}}return Tt(n,r)}function X(n){function r(){var n=f?a:this;if(u){var h=s(u);Te.apply(h,arguments)}if((o||c)&&(h||(h=s(arguments)),o&&Te.apply(h,o),c&&h.length<i))return e|=16,X([t,p?e:-4&e,h,null,a,i]);if(h||(h=arguments),l&&(t=n[v]),this instanceof r){n=H(t.prototype);var g=t.apply(n,h);return Ir(g)?g:n}return t.apply(n,h)}var t=n[0],e=n[1],u=n[2],o=n[3],a=n[4],i=n[5],f=1&e,l=2&e,c=4&e,p=8&e,v=t;return Qe(r,n),r}function Y(n,e){var u=-1,o=fr(),i=n?n.length:0,f=i>=b&&o===r,l=[];if(f){var c=a(e);c?(o=t,e=c):f=!1}for(;++u<i;){var s=n[u];o(e,s)<0&&l.push(s)}return f&&p(e),l}function Z(n,r,t,e){for(var u=(e||0)-1,o=n?n.length:0,a=[];++u<o;){var i=n[u];if(i&&"object"==typeof i&&"number"==typeof i.length&&(Xe(i)||sr(i))){r||(i=Z(i,r,t));var f=-1,l=i.length,c=a.length;for(a.length+=l;++f<l;)a[c++]=i[f]}else t||a.push(i)}return a}function rr(n,r,t,e,u,o){if(t){var a=t(n,r);if("undefined"!=typeof a)return!!a}if(n===r)return 0!==n||1/n==1/r;var i=typeof n,l=typeof r;if(!(n!==n||n&&G[i]||r&&G[l]))return!1;if(null==n||null==r)return n===r;var p=Oe.call(n),s=Oe.call(r);if(p==$&&(p=L),s==$&&(s=L),p!=s)return!1;switch(p){case B:case W:return+n==+r;case z:return n!=+n?r!=+r:0==n?1/n==1/r:n==+r;case P:case K:return n==we(r)}var v=p==F;if(!v){var h=De.call(n,"__wrapped__"),g=De.call(r,"__wrapped__");if(h||g)return rr(h?n.__wrapped__:n,g?r.__wrapped__:r,t,e,u,o);if(p!=L)return!1;var y=n.constructor,m=r.constructor;if(y!=m&&!(Er(y)&&y instanceof y&&Er(m)&&m instanceof m)&&"constructor"in n&&"constructor"in r)return!1}var d=!u;u||(u=f()),o||(o=f());for(var b=u.length;b--;)if(u[b]==n)return o[b]==r;var _=0;if(a=!0,u.push(n),o.push(r),v){if(b=n.length,_=r.length,a=_==b,a||e)for(;_--;){var w=b,j=r[_];if(e)for(;w--&&!(a=rr(n[w],j,t,e,u,o)););else if(!(a=rr(n[_],j,t,e,u,o)))break}}else au(r,function(r,i,f){return De.call(f,i)?(_++,a=De.call(n,i)&&rr(n[i],r,t,e,u,o)):void 0}),a&&!e&&au(n,function(n,r,t){return De.call(t,r)?a=--_>-1:void 0});return u.pop(),o.pop(),d&&(c(u),c(o)),a}function tr(n,r,t,e,u){(Xe(r)?Qr:iu)(r,function(r,o){var a,i,f=r,l=n[o];if(r&&((i=Xe(r))||fu(r))){for(var c=e.length;c--;)if(a=e[c]==r){l=u[c];break}if(!a){var p;t&&(f=t(l,r),(p="undefined"!=typeof f)&&(l=f)),p||(l=i?Xe(l)?l:[]:fu(l)?l:{}),e.push(r),u.push(l),p||tr(l,r,t,e,u)}}else t&&(f=t(l,r),"undefined"==typeof f&&(f=r)),"undefined"!=typeof f&&(l=f);n[o]=l})}function er(n,r){return n+Ie(Ge()*(r-n+1))}function ur(n,e,u){var o=-1,i=fr(),l=n?n.length:0,s=[],v=!e&&l>=b&&i===r,h=u||v?f():s;if(v){var g=a(h);i=t,h=g}for(;++o<l;){var y=n[o],m=u?u(y,o,n):y;(e?!o||h[h.length-1]!==m:i(h,m)<0)&&((u||v)&&h.push(m),s.push(y))}return v?(c(h.array),p(h)):u&&c(h),s}function or(n){return function(r,t,u){var o={};t=e.createCallback(t,u,3);var a=-1,i=r?r.length:0;if("number"==typeof i)for(;++a<i;){var f=r[a];n(o,f,t(f,a,r),r)}else iu(r,function(r,e,u){n(o,r,t(r,e,u),u)});return o}}function ar(n,r,t,e,u,o){var a=1&r,i=2&r,f=4&r,l=16&r,c=32&r;if(!i&&!Er(n))throw new je;l&&!t.length&&(r&=-17,l=t=!1),c&&!e.length&&(r&=-33,c=e=!1);var p=n&&n.__bindData__;if(p&&p!==!0)return p=s(p),p[2]&&(p[2]=s(p[2])),p[3]&&(p[3]=s(p[3])),!a||1&p[1]||(p[4]=u),!a&&1&p[1]&&(r|=8),!f||4&p[1]||(p[5]=o),l&&Te.apply(p[2]||(p[2]=[]),t),c&&Be.apply(p[3]||(p[3]=[]),e),p[1]|=r,ar.apply(null,p);var v=1==r||17===r?y:X;return v([n,r,t,e,u,o])}function ir(n){return nu[n]}function fr(){var n=(n=e.indexOf)===mt?r:n;return n}function lr(n){return"function"==typeof n&&Ne.test(n)}function cr(n){var r,t;return n&&Oe.call(n)==L&&(r=n.constructor,!Er(r)||r instanceof r)?(au(n,function(n,r){t=r}),"undefined"==typeof t||De.call(n,t)):!1}function pr(n){return ru[n]}function sr(n){return n&&"object"==typeof n&&"number"==typeof n.length&&Oe.call(n)==$||!1}function vr(n,r,t,e){return"boolean"!=typeof r&&null!=r&&(e=t,t=r,r=!1),_(n,r,"function"==typeof t&&Q(t,e,1))}function hr(n,r,t){return _(n,!0,"function"==typeof r&&Q(r,t,1))}function gr(n,r){var t=H(n);return r?uu(t,r):t}function yr(n,r,t){var u;return r=e.createCallback(r,t,3),iu(n,function(n,t,e){return r(n,t,e)?(u=t,!1):void 0}),u}function mr(n,r,t){var u;return r=e.createCallback(r,t,3),br(n,function(n,t,e){return r(n,t,e)?(u=t,!1):void 0}),u}function dr(n,r,t){var e=[];au(n,function(n,r){e.push(r,n)});var u=e.length;for(r=Q(r,t,3);u--&&r(e[u--],e[u],n)!==!1;);return n}function br(n,r,t){var e=Ze(n),u=e.length;for(r=Q(r,t,3);u--;){var o=e[u];if(r(n[o],o,n)===!1)break}return n}function _r(n){var r=[];return au(n,function(n,t){Er(n)&&r.push(t)}),r.sort()}function wr(n,r){return n?De.call(n,r):!1}function jr(n){for(var r=-1,t=Ze(n),e=t.length,u={};++r<e;){var o=t[r];u[n[o]]=o}return u}function kr(n){return n===!0||n===!1||n&&"object"==typeof n&&Oe.call(n)==B||!1}function xr(n){return n&&"object"==typeof n&&Oe.call(n)==W||!1}function Cr(n){return n&&1===n.nodeType||!1}function Or(n){var r=!0;if(!n)return r;var t=Oe.call(n),e=n.length;return t==F||t==K||t==$||t==L&&"number"==typeof e&&Er(n.splice)?!e:(iu(n,function(){return r=!1}),r)}function Nr(n,r,t,e){return rr(n,r,"function"==typeof t&&Q(t,e,2))}function Rr(n){return Le(n)&&!Pe(parseFloat(n))}function Er(n){return"function"==typeof n}function Ir(n){return!(!n||!G[typeof n])}function Sr(n){return Dr(n)&&n!=+n}function Ar(n){return null===n}function Dr(n){return"number"==typeof n||n&&"object"==typeof n&&Oe.call(n)==z||!1}function Tr(n){return n&&"object"==typeof n&&Oe.call(n)==P||!1}function $r(n){return"string"==typeof n||n&&"object"==typeof n&&Oe.call(n)==K||!1}function Fr(n){return"undefined"==typeof n}function Br(n,r,t){var u={};return r=e.createCallback(r,t,3),iu(n,function(n,t,e){u[t]=r(n,t,e)}),u}function Wr(n){var r=arguments,t=2;if(!Ir(n))return n;if("number"!=typeof r[2]&&(t=r.length),t>3&&"function"==typeof r[t-2])var e=Q(r[--t-1],r[t--],2);else t>2&&"function"==typeof r[t-1]&&(e=r[--t]);for(var u=s(arguments,1,t),o=-1,a=f(),i=f();++o<t;)tr(n,u[o],e,a,i);return c(a),c(i),n}function qr(n,r,t){var u={};if("function"!=typeof r){var o=[];au(n,function(n,r){o.push(r)}),o=Y(o,Z(arguments,!0,!1,1));for(var a=-1,i=o.length;++a<i;){var f=o[a];u[f]=n[f]}}else r=e.createCallback(r,t,3),au(n,function(n,t,e){r(n,t,e)||(u[t]=n)});return u}function zr(n){for(var r=-1,t=Ze(n),e=t.length,u=ve(e);++r<e;){var o=t[r];u[r]=[o,n[o]]}return u}function Lr(n,r,t){var u={};if("function"!=typeof r)for(var o=-1,a=Z(arguments,!0,!1,1),i=Ir(n)?a.length:0;++o<i;){var f=a[o];f in n&&(u[f]=n[f])}else r=e.createCallback(r,t,3),au(n,function(n,t,e){r(n,t,e)&&(u[t]=n)});return u}function Pr(n,r,t,u){var o=Xe(n);if(null==t)if(o)t=[];else{var a=n&&n.constructor,i=a&&a.prototype;t=H(i)}return r&&(r=e.createCallback(r,u,4),(o?Qr:iu)(n,function(n,e,u){return r(t,n,e,u)})),t}function Kr(n){for(var r=-1,t=Ze(n),e=t.length,u=ve(e);++r<e;)u[r]=n[t[r]];return u}function Ur(n){for(var r=arguments,t=-1,e=Z(r,!0,!1,1),u=r[2]&&r[2][r[1]]===n?1:e.length,o=ve(u);++t<u;)o[t]=n[e[t]];return o}function Mr(n,r,t){var e=-1,u=fr(),o=n?n.length:0,a=!1;return t=(0>t?Ue(0,o+t):t)||0,Xe(n)?a=u(n,r,t)>-1:"number"==typeof o?a=($r(n)?n.indexOf(r,t):u(n,r,t))>-1:iu(n,function(n){return++e>=t?!(a=n===r):void 0}),a}function Vr(n,r,t){var u=!0;r=e.createCallback(r,t,3);var o=-1,a=n?n.length:0;if("number"==typeof a)for(;++o<a&&(u=!!r(n[o],o,n)););else iu(n,function(n,t,e){return u=!!r(n,t,e)});return u}function Gr(n,r,t){var u=[];r=e.createCallback(r,t,3);var o=-1,a=n?n.length:0;if("number"==typeof a)for(;++o<a;){var i=n[o];r(i,o,n)&&u.push(i)}else iu(n,function(n,t,e){r(n,t,e)&&u.push(n)});return u}function Hr(n,r,t){r=e.createCallback(r,t,3);var u=-1,o=n?n.length:0;if("number"!=typeof o){var a;return iu(n,function(n,t,e){return r(n,t,e)?(a=n,!1):void 0}),a}for(;++u<o;){var i=n[u];if(r(i,u,n))return i}}function Jr(n,r,t){var u;return r=e.createCallback(r,t,3),Xr(n,function(n,t,e){return r(n,t,e)?(u=n,!1):void 0}),u}function Qr(n,r,t){var e=-1,u=n?n.length:0;if(r=r&&"undefined"==typeof t?r:Q(r,t,3),"number"==typeof u)for(;++e<u&&r(n[e],e,n)!==!1;);else iu(n,r);return n}function Xr(n,r,t){var e=n?n.length:0;if(r=r&&"undefined"==typeof t?r:Q(r,t,3),"number"==typeof e)for(;e--&&r(n[e],e,n)!==!1;);else{var u=Ze(n);e=u.length,iu(n,function(n,t,o){return t=u?u[--e]:--e,r(o[t],t,o)})}return n}function Yr(n,r){var t=s(arguments,2),e=-1,u="function"==typeof r,o=n?n.length:0,a=ve("number"==typeof o?o:0);return Qr(n,function(n){a[++e]=(u?r:n[r]).apply(n,t)}),a}function Zr(n,r,t){var u=-1,o=n?n.length:0;if(r=e.createCallback(r,t,3),"number"==typeof o)for(var a=ve(o);++u<o;)a[u]=r(n[u],u,n);else a=[],iu(n,function(n,t,e){a[++u]=r(n,t,e)});return a}function nt(n,r,t){var o=-1/0,a=o;if("function"!=typeof r&&t&&t[r]===n&&(r=null),null==r&&Xe(n))for(var i=-1,f=n.length;++i<f;){var l=n[i];l>a&&(a=l)}else r=null==r&&$r(n)?u:e.createCallback(r,t,3),Qr(n,function(n,t,e){var u=r(n,t,e);u>o&&(o=u,a=n)});return a}function rt(n,r,t){var o=1/0,a=o;if("function"!=typeof r&&t&&t[r]===n&&(r=null),null==r&&Xe(n))for(var i=-1,f=n.length;++i<f;){var l=n[i];a>l&&(a=l)}else r=null==r&&$r(n)?u:e.createCallback(r,t,3),Qr(n,function(n,t,e){var u=r(n,t,e);o>u&&(o=u,a=n)});return a}function tt(n,r,t,u){if(!n)return t;var o=arguments.length<3;r=e.createCallback(r,u,4);var a=-1,i=n.length;if("number"==typeof i)for(o&&(t=n[++a]);++a<i;)t=r(t,n[a],a,n);else iu(n,function(n,e,u){t=o?(o=!1,n):r(t,n,e,u)});return t}function et(n,r,t,u){var o=arguments.length<3;return r=e.createCallback(r,u,4),Xr(n,function(n,e,u){t=o?(o=!1,n):r(t,n,e,u)}),t}function ut(n,r,t){return r=e.createCallback(r,t,3),Gr(n,function(n,t,e){return!r(n,t,e)})}function ot(n,r,t){if(n&&"number"!=typeof n.length&&(n=Kr(n)),null==r||t)return n?n[er(0,n.length-1)]:h;var e=at(n);return e.length=Me(Ue(0,r),e.length),e}function at(n){var r=-1,t=n?n.length:0,e=ve("number"==typeof t?t:0);return Qr(n,function(n){var t=er(0,++r);e[r]=e[t],e[t]=n}),e}function it(n){var r=n?n.length:0;return"number"==typeof r?r:Ze(n).length}function ft(n,r,t){var u;r=e.createCallback(r,t,3);var o=-1,a=n?n.length:0;if("number"==typeof a)for(;++o<a&&!(u=r(n[o],o,n)););else iu(n,function(n,t,e){return!(u=r(n,t,e))});return!!u}function lt(n,r,t){var u=-1,a=Xe(r),i=n?n.length:0,s=ve("number"==typeof i?i:0);for(a||(r=e.createCallback(r,t,3)),Qr(n,function(n,t,e){var o=s[++u]=l();a?o.criteria=Zr(r,function(r){return n[r]}):(o.criteria=f())[0]=r(n,t,e),o.index=u,o.value=n}),i=s.length,s.sort(o);i--;){var v=s[i];s[i]=v.value,a||c(v.criteria),p(v)}return s}function ct(n){return n&&"number"==typeof n.length?s(n):Kr(n)}function pt(n){for(var r=-1,t=n?n.length:0,e=[];++r<t;){var u=n[r];u&&e.push(u)}return e}function st(n){return Y(n,Z(arguments,!0,!0,1))}function vt(n,r,t){var u=-1,o=n?n.length:0;for(r=e.createCallback(r,t,3);++u<o;)if(r(n[u],u,n))return u;return-1}function ht(n,r,t){var u=n?n.length:0;for(r=e.createCallback(r,t,3);u--;)if(r(n[u],u,n))return u;return-1}function gt(n,r,t){var u=0,o=n?n.length:0;if("number"!=typeof r&&null!=r){var a=-1;for(r=e.createCallback(r,t,3);++a<o&&r(n[a],a,n);)u++}else if(u=r,null==u||t)return n?n[0]:h;return s(n,0,Me(Ue(0,u),o))}function yt(n,r,t,e){return"boolean"!=typeof r&&null!=r&&(e=t,t="function"!=typeof r&&e&&e[r]===n?null:r,r=!1),null!=t&&(n=Zr(n,t,e)),Z(n,r)}function mt(n,t,e){if("number"==typeof e){var u=n?n.length:0;e=0>e?Ue(0,u+e):e||0}else if(e){var o=Ot(n,t);return n[o]===t?o:-1}return r(n,t,e)}function dt(n,r,t){var u=0,o=n?n.length:0;if("number"!=typeof r&&null!=r){var a=o;for(r=e.createCallback(r,t,3);a--&&r(n[a],a,n);)u++}else u=null==r||t?1:r||u;return s(n,0,Me(Ue(0,o-u),o))}function bt(){for(var n=[],e=-1,u=arguments.length,o=f(),i=fr(),l=i===r,s=f();++e<u;){var v=arguments[e];(Xe(v)||sr(v))&&(n.push(v),o.push(l&&v.length>=b&&a(e?n[e]:s)))}var h=n[0],g=-1,y=h?h.length:0,m=[];n:for(;++g<y;){var d=o[0];if(v=h[g],(d?t(d,v):i(s,v))<0){for(e=u,(d||s).push(v);--e;)if(d=o[e],(d?t(d,v):i(n[e],v))<0)continue n;m.push(v)}}for(;u--;)d=o[u],d&&p(d);return c(o),c(s),m}function _t(n,r,t){var u=0,o=n?n.length:0;if("number"!=typeof r&&null!=r){var a=o;for(r=e.createCallback(r,t,3);a--&&r(n[a],a,n);)u++}else if(u=r,null==u||t)return n?n[o-1]:h;return s(n,Ue(0,o-u))}function wt(n,r,t){var e=n?n.length:0;for("number"==typeof t&&(e=(0>t?Ue(0,e+t):Me(t,e-1))+1);e--;)if(n[e]===r)return e;return-1}function jt(n){for(var r=arguments,t=0,e=r.length,u=n?n.length:0;++t<e;)for(var o=-1,a=r[t];++o<u;)n[o]===a&&(Fe.call(n,o--,1),u--);return n}function kt(n,r,t){n=+n||0,t="number"==typeof t?t:+t||1,null==r&&(r=n,n=0);for(var e=-1,u=Ue(0,Re((r-n)/(t||1))),o=ve(u);++e<u;)o[e]=n,n+=t;return o}function xt(n,r,t){var u=-1,o=n?n.length:0,a=[];for(r=e.createCallback(r,t,3);++u<o;){var i=n[u];r(i,u,n)&&(a.push(i),Fe.call(n,u--,1),o--)}return a}function Ct(n,r,t){if("number"!=typeof r&&null!=r){var u=0,o=-1,a=n?n.length:0;for(r=e.createCallback(r,t,3);++o<a&&r(n[o],o,n);)u++}else u=null==r||t?1:Ue(0,r);return s(n,u)}function Ot(n,r,t,u){var o=0,a=n?n.length:o;for(t=t?e.createCallback(t,u,1):Xt,r=t(r);a>o;){var i=o+a>>>1;t(n[i])<r?o=i+1:a=i}return o}function Nt(){return ur(Z(arguments,!0,!0))}function Rt(n,r,t,u){return"boolean"!=typeof r&&null!=r&&(u=t,t="function"!=typeof r&&u&&u[r]===n?null:r,r=!1),null!=t&&(t=e.createCallback(t,u,3)),ur(n,r,t)}function Et(n){return Y(n,s(arguments,1))}function It(){for(var n=-1,r=arguments.length;++n<r;){var t=arguments[n];if(Xe(t)||sr(t))var e=e?ur(Y(e,t).concat(Y(t,e))):t}return e||[]}function St(){for(var n=arguments.length>1?arguments:arguments[0],r=-1,t=n?nt(su(n,"length")):0,e=ve(0>t?0:t);++r<t;)e[r]=su(n,r);return e}function At(n,r){var t=-1,e=n?n.length:0,u={};for(r||!e||Xe(n[0])||(r=[]);++t<e;){var o=n[t];r?u[o]=r[t]:o&&(u[o[0]]=o[1])}return u}function Dt(n,r){if(!Er(r))throw new je;return function(){return--n<1?r.apply(this,arguments):void 0}}function Tt(n,r){return arguments.length>2?ar(n,17,s(arguments,2),null,r):ar(n,1,null,null,r)}function $t(n){for(var r=arguments.length>1?Z(arguments,!0,!1,1):_r(n),t=-1,e=r.length;++t<e;){var u=r[t];n[u]=ar(n[u],1,null,null,n)}return n}function Ft(n,r){return arguments.length>2?ar(r,19,s(arguments,2),null,n):ar(r,3,null,null,n)}function Bt(){for(var n=arguments,r=n.length;r--;)if(!Er(n[r]))throw new je;return function(){for(var r=arguments,t=n.length;t--;)r=[n[t].apply(this,r)];return r[0]}}function Wt(n,r){return r="number"==typeof r?r:+r||n.length,ar(n,4,null,null,null,r)}function qt(n,r,t){var e,u,o,a,i,f,l,c=0,p=!1,s=!0;if(!Er(n))throw new je;if(r=Ue(0,r)||0,t===!0){var v=!0;s=!1}else Ir(t)&&(v=t.leading,p="maxWait"in t&&(Ue(r,t.maxWait)||0),s="trailing"in t?t.trailing:s);var g=function(){var t=r-(hu()-a);if(0>=t){u&&Ee(u);var p=l;u=f=l=h,p&&(c=hu(),o=n.apply(i,e),f||u||(e=i=null))}else f=$e(g,t)},y=function(){f&&Ee(f),u=f=l=h,(s||p!==r)&&(c=hu(),o=n.apply(i,e),f||u||(e=i=null))};return function(){if(e=arguments,a=hu(),i=this,l=s&&(f||!v),p===!1)var t=v&&!f;else{u||v||(c=a);var h=p-(a-c),m=0>=h;m?(u&&(u=Ee(u)),c=a,o=n.apply(i,e)):u||(u=$e(y,h))}return m&&f?f=Ee(f):f||r===p||(f=$e(g,r)),t&&(m=!0,o=n.apply(i,e)),!m||f||u||(e=i=null),o}}function zt(n){if(!Er(n))throw new je;var r=s(arguments,1);return $e(function(){n.apply(h,r)},1)}function Lt(n,r){if(!Er(n))throw new je;var t=s(arguments,2);return $e(function(){n.apply(h,t)},r)}function Pt(n,r){if(!Er(n))throw new je;var t=function(){var e=t.cache,u=r?r.apply(this,arguments):d+arguments[0];return De.call(e,u)?e[u]:e[u]=n.apply(this,arguments)};return t.cache={},t}function Kt(n){var r,t;if(!Er(n))throw new je;return function(){return r?t:(r=!0,t=n.apply(this,arguments),n=null,t)}}function Ut(n){return ar(n,16,s(arguments,1))}function Mt(n){return ar(n,32,null,s(arguments,1))}function Vt(n,r,t){var e=!0,u=!0;if(!Er(n))throw new je;return t===!1?e=!1:Ir(t)&&(e="leading"in t?t.leading:e,u="trailing"in t?t.trailing:u),M.leading=e,M.maxWait=r,M.trailing=u,qt(n,r,M)}function Gt(n,r){return ar(r,16,[n])}function Ht(n){return function(){return n}}function Jt(n,r,t){var e=typeof n;if(null==n||"function"==e)return Q(n,r,t);if("object"!=e)return re(n);var u=Ze(n),o=u[0],a=n[o];return 1!=u.length||a!==a||Ir(a)?function(r){for(var t=u.length,e=!1;t--&&(e=rr(r[u[t]],n[u[t]],null,!0)););return e}:function(n){var r=n[o];return a===r&&(0!==a||1/a==1/r)}}function Qt(n){return null==n?"":we(n).replace(eu,ir)}function Xt(n){return n}function Yt(n,r,t){var u=!0,o=r&&_r(r);r&&(t||o.length)||(null==t&&(t=r),a=g,r=n,n=e,o=_r(r)),t===!1?u=!1:Ir(t)&&"chain"in t&&(u=t.chain);var a=n,i=Er(a);Qr(o,function(t){var e=n[t]=r[t];i&&(a.prototype[t]=function(){var r=this.__chain__,t=this.__wrapped__,o=[t];Te.apply(o,arguments);var i=e.apply(n,o);if(u||r){if(t===i&&Ir(i))return this;i=new a(i),i.__chain__=r}return i})})}function Zt(){return n._=Ce,this}function ne(){}function re(n){return function(r){return r[n]}}function te(n,r,t){var e=null==n,u=null==r;if(null==t&&("boolean"==typeof n&&u?(t=n,n=1):u||"boolean"!=typeof r||(t=r,u=!0)),e&&u&&(r=1),n=+n||0,u?(r=n,n=0):r=+r||0,t||n%1||r%1){var o=Ge();return Me(n+o*(r-n+parseFloat("1e-"+((o+"").length-1))),r)}return er(n,r)}function ee(n,r){if(n){var t=n[r];return Er(t)?n[r]():t}}function ue(n,r,t){var u=e.templateSettings;n=we(n||""),t=ou({},t,u);var o,a=ou({},t.imports,u.imports),f=Ze(a),l=Kr(a),c=0,p=t.interpolate||I,s="__p += '",v=_e((t.escape||I).source+"|"+p.source+"|"+(p===R?C:I).source+"|"+(t.evaluate||I).source+"|$","g");n.replace(v,function(r,t,e,u,a,f){return e||(e=u),s+=n.slice(c,f).replace(A,i),t&&(s+="' +\n__e("+t+") +\n'"),a&&(o=!0,s+="';\n"+a+";\n__p += '"),e&&(s+="' +\n((__t = ("+e+")) == null ? '' : __t) +\n'"),c=f+r.length,r}),s+="';\n";var g=t.variable,y=g;y||(g="obj",s="with ("+g+") {\n"+s+"\n}\n"),s=(o?s.replace(j,""):s).replace(k,"$1").replace(x,"$1;"),s="function("+g+") {\n"+(y?"":g+" || ("+g+" = {});\n")+"var __t, __p = '', __e = _.escape"+(o?", __j = Array.prototype.join;\nfunction print() { __p += __j.call(arguments, '') }\n":";\n")+s+"return __p\n}";var m="\n/*\n//# sourceURL="+(t.sourceURL||"/lodash/template/source["+T++ +"]")+"\n*/";try{var d=ye(f,"return "+s+m).apply(h,l)}catch(b){throw b.source=s,b}return r?d(r):(d.source=s,d)}function oe(n,r,t){n=(n=+n)>-1?n:0;var e=-1,u=ve(n);for(r=Q(r,t,1);++e<n;)u[e]=r(e);return u}function ae(n){return null==n?"":we(n).replace(tu,pr)}function ie(n){var r=++m;return we(null==n?"":n)+r}function fe(n){return n=new g(n),n.__chain__=!0,n}function le(n,r){return r(n),n}function ce(){return this.__chain__=!0,this}function pe(){return we(this.__wrapped__)}function se(){return this.__wrapped__}n=n?nr.defaults(J.Object(),n,nr.pick(J,D)):J;var ve=n.Array,he=n.Boolean,ge=n.Date,ye=n.Function,me=n.Math,de=n.Number,be=n.Object,_e=n.RegExp,we=n.String,je=n.TypeError,ke=[],xe=be.prototype,Ce=n._,Oe=xe.toString,Ne=_e("^"+we(Oe).replace(/[.*+?^${}()|[\]\\]/g,"\\$&").replace(/toString| for [^\]]+/g,".*?")+"$"),Re=me.ceil,Ee=n.clearTimeout,Ie=me.floor,Se=ye.prototype.toString,Ae=lr(Ae=be.getPrototypeOf)&&Ae,De=xe.hasOwnProperty,Te=ke.push,$e=n.setTimeout,Fe=ke.splice,Be=ke.unshift,We=function(){try{var n={},r=lr(r=be.defineProperty)&&r,t=r(n,n,n)&&r}catch(e){}return t}(),qe=lr(qe=be.create)&&qe,ze=lr(ze=ve.isArray)&&ze,Le=n.isFinite,Pe=n.isNaN,Ke=lr(Ke=be.keys)&&Ke,Ue=me.max,Me=me.min,Ve=n.parseInt,Ge=me.random,He={};He[F]=ve,He[B]=he,He[W]=ge,He[q]=ye,He[L]=be,He[z]=de,He[P]=_e,He[K]=we,g.prototype=e.prototype;var Je=e.support={};Je.funcDecomp=!lr(n.WinRTError)&&S.test(v),Je.funcNames="string"==typeof ye.name,e.templateSettings={escape:/<%-([\s\S]+?)%>/g,evaluate:/<%([\s\S]+?)%>/g,interpolate:R,variable:"",imports:{_:e}},qe||(H=function(){function r(){}return function(t){if(Ir(t)){r.prototype=t;var e=new r;r.prototype=null}return e||n.Object()}}());var Qe=We?function(n,r){V.value=r,We(n,"__bindData__",V)}:ne,Xe=ze||function(n){return n&&"object"==typeof n&&"number"==typeof n.length&&Oe.call(n)==F||!1},Ye=function(n){var r,t=n,e=[];if(!t)return e;if(!G[typeof n])return e;for(r in t)De.call(t,r)&&e.push(r);return e},Ze=Ke?function(n){return Ir(n)?Ke(n):[]}:Ye,nu={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;"},ru=jr(nu),tu=_e("("+Ze(ru).join("|")+")","g"),eu=_e("["+Ze(nu).join("")+"]","g"),uu=function(n,r,t){var e,u=n,o=u;if(!u)return o;var a=arguments,i=0,f="number"==typeof t?2:a.length;if(f>3&&"function"==typeof a[f-2])var l=Q(a[--f-1],a[f--],2);else f>2&&"function"==typeof a[f-1]&&(l=a[--f]);for(;++i<f;)if(u=a[i],u&&G[typeof u])for(var c=-1,p=G[typeof u]&&Ze(u),s=p?p.length:0;++c<s;)e=p[c],o[e]=l?l(o[e],u[e]):u[e];return o},ou=function(n,r,t){var e,u=n,o=u;if(!u)return o;for(var a=arguments,i=0,f="number"==typeof t?2:a.length;++i<f;)if(u=a[i],u&&G[typeof u])for(var l=-1,c=G[typeof u]&&Ze(u),p=c?c.length:0;++l<p;)e=c[l],"undefined"==typeof o[e]&&(o[e]=u[e]);return o},au=function(n,r,t){var e,u=n,o=u;if(!u)return o;if(!G[typeof u])return o;r=r&&"undefined"==typeof t?r:Q(r,t,3);for(e in u)if(r(u[e],e,n)===!1)return o;return o},iu=function(n,r,t){var e,u=n,o=u;if(!u)return o;if(!G[typeof u])return o;r=r&&"undefined"==typeof t?r:Q(r,t,3);for(var a=-1,i=G[typeof u]&&Ze(u),f=i?i.length:0;++a<f;)if(e=i[a],r(u[e],e,n)===!1)return o;return o},fu=Ae?function(n){if(!n||Oe.call(n)!=L)return!1;var r=n.valueOf,t=lr(r)&&(t=Ae(r))&&Ae(t);return t?n==t||Ae(n)==t:cr(n)}:cr,lu=or(function(n,r,t){De.call(n,t)?n[t]++:n[t]=1}),cu=or(function(n,r,t){(De.call(n,t)?n[t]:n[t]=[]).push(r)}),pu=or(function(n,r,t){n[t]=r}),su=Zr,vu=Gr,hu=lr(hu=ge.now)&&hu||function(){return(new ge).getTime()},gu=8==Ve(w+"08")?Ve:function(n,r){return Ve($r(n)?n.replace(E,""):n,r||0)};return e.after=Dt,e.assign=uu,e.at=Ur,e.bind=Tt,e.bindAll=$t,e.bindKey=Ft,e.chain=fe,e.compact=pt,e.compose=Bt,e.constant=Ht,e.countBy=lu,e.create=gr,e.createCallback=Jt,e.curry=Wt,e.debounce=qt,e.defaults=ou,e.defer=zt,e.delay=Lt,e.difference=st,e.filter=Gr,e.flatten=yt,e.forEach=Qr,e.forEachRight=Xr,e.forIn=au,e.forInRight=dr,e.forOwn=iu,e.forOwnRight=br,e.functions=_r,e.groupBy=cu,e.indexBy=pu,e.initial=dt,e.intersection=bt,e.invert=jr,e.invoke=Yr,e.keys=Ze,e.map=Zr,e.mapValues=Br,e.max=nt,e.memoize=Pt,e.merge=Wr,e.min=rt,e.omit=qr,e.once=Kt,e.pairs=zr,e.partial=Ut,e.partialRight=Mt,e.pick=Lr,e.pluck=su,e.property=re,e.pull=jt,e.range=kt,e.reject=ut,e.remove=xt,e.rest=Ct,e.shuffle=at,e.sortBy=lt,e.tap=le,e.throttle=Vt,e.times=oe,e.toArray=ct,e.transform=Pr,e.union=Nt,e.uniq=Rt,e.values=Kr,e.where=vu,e.without=Et,e.wrap=Gt,e.xor=It,e.zip=St,e.zipObject=At,e.collect=Zr,e.drop=Ct,e.each=Qr,e.eachRight=Xr,e.extend=uu,e.methods=_r,e.object=At,e.select=Gr,e.tail=Ct,e.unique=Rt,e.unzip=St,Yt(e),e.clone=vr,e.cloneDeep=hr,e.contains=Mr,e.escape=Qt,e.every=Vr,e.find=Hr,e.findIndex=vt,e.findKey=yr,e.findLast=Jr,e.findLastIndex=ht,e.findLastKey=mr,e.has=wr,e.identity=Xt,e.indexOf=mt,e.isArguments=sr,e.isArray=Xe,e.isBoolean=kr,e.isDate=xr,e.isElement=Cr,e.isEmpty=Or,e.isEqual=Nr,e.isFinite=Rr,e.isFunction=Er,e.isNaN=Sr,e.isNull=Ar,e.isNumber=Dr,e.isObject=Ir,e.isPlainObject=fu,e.isRegExp=Tr,e.isString=$r,e.isUndefined=Fr,e.lastIndexOf=wt,e.mixin=Yt,e.noConflict=Zt,e.noop=ne,e.now=hu,e.parseInt=gu,e.random=te,e.reduce=tt,e.reduceRight=et,e.result=ee,e.runInContext=v,e.size=it,e.some=ft,e.sortedIndex=Ot,e.template=ue,e.unescape=ae,e.uniqueId=ie,e.all=Vr,e.any=ft,e.detect=Hr,e.findWhere=Hr,e.foldl=tt,e.foldr=et,e.include=Mr,e.inject=tt,Yt(function(){var n={};return iu(e,function(r,t){e.prototype[t]||(n[t]=r)}),n}(),!1),e.first=gt,e.last=_t,e.sample=ot,e.take=gt,e.head=gt,iu(e,function(n,r){var t="sample"!==r;e.prototype[r]||(e.prototype[r]=function(r,e){var u=this.__chain__,o=n(this.__wrapped__,r,e);return u||null!=r&&(!e||t&&"function"==typeof r)?new g(o,u):o})}),e.VERSION="2.4.1",e.prototype.chain=ce,e.prototype.toString=pe,e.prototype.value=se,e.prototype.valueOf=se,Qr(["join","pop","shift"],function(n){var r=ke[n];e.prototype[n]=function(){var n=this.__chain__,t=r.apply(this.__wrapped__,arguments);return n?new g(t,n):t}}),Qr(["push","reverse","sort","unshift"],function(n){var r=ke[n];e.prototype[n]=function(){return r.apply(this.__wrapped__,arguments),this}}),Qr(["concat","slice","splice"],function(n){var r=ke[n];e.prototype[n]=function(){return new g(r.apply(this.__wrapped__,arguments),this.__chain__)}}),e}var h,g=[],y=[],m=0,d=+new Date+"",b=75,_=40,w=" 	\f ﻿\n\r\u2028\u2029 ᠎             　",j=/\b__p \+= '';/g,k=/\b(__p \+=) '' \+/g,x=/(__e\(.*?\)|\b__t\)) \+\n'';/g,C=/\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g,O=/\w*$/,N=/^\s*function[ \n\r\t]+\w/,R=/<%=([\s\S]+?)%>/g,E=RegExp("^["+w+"]*0+(?=.$)"),I=/($^)/,S=/\bthis\b/,A=/['\n\r\t\u2028\u2029\\]/g,D=["Array","Boolean","Date","Function","Math","Number","Object","RegExp","String","_","attachEvent","clearTimeout","isFinite","isNaN","parseInt","setTimeout"],T=0,$="[object Arguments]",F="[object Array]",B="[object Boolean]",W="[object Date]",q="[object Function]",z="[object Number]",L="[object Object]",P="[object RegExp]",K="[object String]",U={};U[q]=!1,U[$]=U[F]=U[B]=U[W]=U[z]=U[L]=U[P]=U[K]=!0;var M={leading:!1,maxWait:0,trailing:!1},V={configurable:!1,enumerable:!1,value:null,writable:!1},G={"boolean":!1,"function":!0,object:!0,number:!1,string:!1,undefined:!1},H={"\\":"\\","'":"'","\n":"n","\r":"r","	":"t","\u2028":"u2028","\u2029":"u2029"},J=G[typeof window]&&window||this,Q=G[typeof exports]&&exports&&!exports.nodeType&&exports,X=G[typeof module]&&module&&!module.nodeType&&module,Y=X&&X.exports===Q&&Q,Z=G[typeof n]&&n;!Z||Z.global!==Z&&Z.window!==Z||(J=Z);var nr=v();"function"==typeof define&&"object"==typeof define.amd&&define.amd?(J._=nr,define(function(){return nr})):Q&&X?Y?(X.exports=nr)._=nr:Q._=nr:J._=nr}.call(this)}.call(this,"undefined"!=typeof self?self:"undefined"!=typeof window?window:{});
},{}]},{},[12])

//# sourceMappingURL=data:application/json;base64,